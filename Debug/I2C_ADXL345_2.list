
I2C_ADXL345_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008d28  08008d28  00018d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d44  08008d44  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008d44  08008d44  00018d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d4c  08008d4c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d4c  08008d4c  00018d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d50  08008d50  00018d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000958  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009d4  200009d4  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001597f  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003710  00000000  00000000  00035a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001130  00000000  00000000  00039180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000fc0  00000000  00000000  0003a2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ffc1  00000000  00000000  0003b270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000056ed  00000000  00000000  0004b231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b64  00000000  00000000  00050920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008d10 	.word	0x08008d10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008d10 	.word	0x08008d10

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b970 	b.w	8000b2c <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9e08      	ldr	r6, [sp, #32]
 800086a:	460d      	mov	r5, r1
 800086c:	4604      	mov	r4, r0
 800086e:	460f      	mov	r7, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14a      	bne.n	800090a <__udivmoddi4+0xa6>
 8000874:	428a      	cmp	r2, r1
 8000876:	4694      	mov	ip, r2
 8000878:	d965      	bls.n	8000946 <__udivmoddi4+0xe2>
 800087a:	fab2 f382 	clz	r3, r2
 800087e:	b143      	cbz	r3, 8000892 <__udivmoddi4+0x2e>
 8000880:	fa02 fc03 	lsl.w	ip, r2, r3
 8000884:	f1c3 0220 	rsb	r2, r3, #32
 8000888:	409f      	lsls	r7, r3
 800088a:	fa20 f202 	lsr.w	r2, r0, r2
 800088e:	4317      	orrs	r7, r2
 8000890:	409c      	lsls	r4, r3
 8000892:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000896:	fa1f f58c 	uxth.w	r5, ip
 800089a:	fbb7 f1fe 	udiv	r1, r7, lr
 800089e:	0c22      	lsrs	r2, r4, #16
 80008a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008a8:	fb01 f005 	mul.w	r0, r1, r5
 80008ac:	4290      	cmp	r0, r2
 80008ae:	d90a      	bls.n	80008c6 <__udivmoddi4+0x62>
 80008b0:	eb1c 0202 	adds.w	r2, ip, r2
 80008b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008b8:	f080 811c 	bcs.w	8000af4 <__udivmoddi4+0x290>
 80008bc:	4290      	cmp	r0, r2
 80008be:	f240 8119 	bls.w	8000af4 <__udivmoddi4+0x290>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4462      	add	r2, ip
 80008c6:	1a12      	subs	r2, r2, r0
 80008c8:	b2a4      	uxth	r4, r4
 80008ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80008ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80008d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008d6:	fb00 f505 	mul.w	r5, r0, r5
 80008da:	42a5      	cmp	r5, r4
 80008dc:	d90a      	bls.n	80008f4 <__udivmoddi4+0x90>
 80008de:	eb1c 0404 	adds.w	r4, ip, r4
 80008e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80008e6:	f080 8107 	bcs.w	8000af8 <__udivmoddi4+0x294>
 80008ea:	42a5      	cmp	r5, r4
 80008ec:	f240 8104 	bls.w	8000af8 <__udivmoddi4+0x294>
 80008f0:	4464      	add	r4, ip
 80008f2:	3802      	subs	r0, #2
 80008f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008f8:	1b64      	subs	r4, r4, r5
 80008fa:	2100      	movs	r1, #0
 80008fc:	b11e      	cbz	r6, 8000906 <__udivmoddi4+0xa2>
 80008fe:	40dc      	lsrs	r4, r3
 8000900:	2300      	movs	r3, #0
 8000902:	e9c6 4300 	strd	r4, r3, [r6]
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	428b      	cmp	r3, r1
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0xbc>
 800090e:	2e00      	cmp	r6, #0
 8000910:	f000 80ed 	beq.w	8000aee <__udivmoddi4+0x28a>
 8000914:	2100      	movs	r1, #0
 8000916:	e9c6 0500 	strd	r0, r5, [r6]
 800091a:	4608      	mov	r0, r1
 800091c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000920:	fab3 f183 	clz	r1, r3
 8000924:	2900      	cmp	r1, #0
 8000926:	d149      	bne.n	80009bc <__udivmoddi4+0x158>
 8000928:	42ab      	cmp	r3, r5
 800092a:	d302      	bcc.n	8000932 <__udivmoddi4+0xce>
 800092c:	4282      	cmp	r2, r0
 800092e:	f200 80f8 	bhi.w	8000b22 <__udivmoddi4+0x2be>
 8000932:	1a84      	subs	r4, r0, r2
 8000934:	eb65 0203 	sbc.w	r2, r5, r3
 8000938:	2001      	movs	r0, #1
 800093a:	4617      	mov	r7, r2
 800093c:	2e00      	cmp	r6, #0
 800093e:	d0e2      	beq.n	8000906 <__udivmoddi4+0xa2>
 8000940:	e9c6 4700 	strd	r4, r7, [r6]
 8000944:	e7df      	b.n	8000906 <__udivmoddi4+0xa2>
 8000946:	b902      	cbnz	r2, 800094a <__udivmoddi4+0xe6>
 8000948:	deff      	udf	#255	; 0xff
 800094a:	fab2 f382 	clz	r3, r2
 800094e:	2b00      	cmp	r3, #0
 8000950:	f040 8090 	bne.w	8000a74 <__udivmoddi4+0x210>
 8000954:	1a8a      	subs	r2, r1, r2
 8000956:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800095a:	fa1f fe8c 	uxth.w	lr, ip
 800095e:	2101      	movs	r1, #1
 8000960:	fbb2 f5f7 	udiv	r5, r2, r7
 8000964:	fb07 2015 	mls	r0, r7, r5, r2
 8000968:	0c22      	lsrs	r2, r4, #16
 800096a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800096e:	fb0e f005 	mul.w	r0, lr, r5
 8000972:	4290      	cmp	r0, r2
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x124>
 8000976:	eb1c 0202 	adds.w	r2, ip, r2
 800097a:	f105 38ff 	add.w	r8, r5, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0x122>
 8000980:	4290      	cmp	r0, r2
 8000982:	f200 80cb 	bhi.w	8000b1c <__udivmoddi4+0x2b8>
 8000986:	4645      	mov	r5, r8
 8000988:	1a12      	subs	r2, r2, r0
 800098a:	b2a4      	uxth	r4, r4
 800098c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000990:	fb07 2210 	mls	r2, r7, r0, r2
 8000994:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000998:	fb0e fe00 	mul.w	lr, lr, r0
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x14e>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009a8:	d202      	bcs.n	80009b0 <__udivmoddi4+0x14c>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	f200 80bb 	bhi.w	8000b26 <__udivmoddi4+0x2c2>
 80009b0:	4610      	mov	r0, r2
 80009b2:	eba4 040e 	sub.w	r4, r4, lr
 80009b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ba:	e79f      	b.n	80008fc <__udivmoddi4+0x98>
 80009bc:	f1c1 0720 	rsb	r7, r1, #32
 80009c0:	408b      	lsls	r3, r1
 80009c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009ca:	fa05 f401 	lsl.w	r4, r5, r1
 80009ce:	fa20 f307 	lsr.w	r3, r0, r7
 80009d2:	40fd      	lsrs	r5, r7
 80009d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009d8:	4323      	orrs	r3, r4
 80009da:	fbb5 f8f9 	udiv	r8, r5, r9
 80009de:	fa1f fe8c 	uxth.w	lr, ip
 80009e2:	fb09 5518 	mls	r5, r9, r8, r5
 80009e6:	0c1c      	lsrs	r4, r3, #16
 80009e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009ec:	fb08 f50e 	mul.w	r5, r8, lr
 80009f0:	42a5      	cmp	r5, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	fa00 f001 	lsl.w	r0, r0, r1
 80009fa:	d90b      	bls.n	8000a14 <__udivmoddi4+0x1b0>
 80009fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000a00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a04:	f080 8088 	bcs.w	8000b18 <__udivmoddi4+0x2b4>
 8000a08:	42a5      	cmp	r5, r4
 8000a0a:	f240 8085 	bls.w	8000b18 <__udivmoddi4+0x2b4>
 8000a0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a12:	4464      	add	r4, ip
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	b29d      	uxth	r5, r3
 8000a18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a28:	45a6      	cmp	lr, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x1da>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a34:	d26c      	bcs.n	8000b10 <__udivmoddi4+0x2ac>
 8000a36:	45a6      	cmp	lr, r4
 8000a38:	d96a      	bls.n	8000b10 <__udivmoddi4+0x2ac>
 8000a3a:	3b02      	subs	r3, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a42:	fba3 9502 	umull	r9, r5, r3, r2
 8000a46:	eba4 040e 	sub.w	r4, r4, lr
 8000a4a:	42ac      	cmp	r4, r5
 8000a4c:	46c8      	mov	r8, r9
 8000a4e:	46ae      	mov	lr, r5
 8000a50:	d356      	bcc.n	8000b00 <__udivmoddi4+0x29c>
 8000a52:	d053      	beq.n	8000afc <__udivmoddi4+0x298>
 8000a54:	b156      	cbz	r6, 8000a6c <__udivmoddi4+0x208>
 8000a56:	ebb0 0208 	subs.w	r2, r0, r8
 8000a5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a62:	40ca      	lsrs	r2, r1
 8000a64:	40cc      	lsrs	r4, r1
 8000a66:	4317      	orrs	r7, r2
 8000a68:	e9c6 7400 	strd	r7, r4, [r6]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a74:	f1c3 0120 	rsb	r1, r3, #32
 8000a78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a80:	fa25 f101 	lsr.w	r1, r5, r1
 8000a84:	409d      	lsls	r5, r3
 8000a86:	432a      	orrs	r2, r5
 8000a88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a8c:	fa1f fe8c 	uxth.w	lr, ip
 8000a90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a94:	fb07 1510 	mls	r5, r7, r0, r1
 8000a98:	0c11      	lsrs	r1, r2, #16
 8000a9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000aa2:	428d      	cmp	r5, r1
 8000aa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x258>
 8000aaa:	eb1c 0101 	adds.w	r1, ip, r1
 8000aae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ab2:	d22f      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ab4:	428d      	cmp	r5, r1
 8000ab6:	d92d      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000ab8:	3802      	subs	r0, #2
 8000aba:	4461      	add	r1, ip
 8000abc:	1b49      	subs	r1, r1, r5
 8000abe:	b292      	uxth	r2, r2
 8000ac0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ac4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ac8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000acc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ad0:	4291      	cmp	r1, r2
 8000ad2:	d908      	bls.n	8000ae6 <__udivmoddi4+0x282>
 8000ad4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000adc:	d216      	bcs.n	8000b0c <__udivmoddi4+0x2a8>
 8000ade:	4291      	cmp	r1, r2
 8000ae0:	d914      	bls.n	8000b0c <__udivmoddi4+0x2a8>
 8000ae2:	3d02      	subs	r5, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a52      	subs	r2, r2, r1
 8000ae8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000aec:	e738      	b.n	8000960 <__udivmoddi4+0xfc>
 8000aee:	4631      	mov	r1, r6
 8000af0:	4630      	mov	r0, r6
 8000af2:	e708      	b.n	8000906 <__udivmoddi4+0xa2>
 8000af4:	4639      	mov	r1, r7
 8000af6:	e6e6      	b.n	80008c6 <__udivmoddi4+0x62>
 8000af8:	4610      	mov	r0, r2
 8000afa:	e6fb      	b.n	80008f4 <__udivmoddi4+0x90>
 8000afc:	4548      	cmp	r0, r9
 8000afe:	d2a9      	bcs.n	8000a54 <__udivmoddi4+0x1f0>
 8000b00:	ebb9 0802 	subs.w	r8, r9, r2
 8000b04:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	e7a3      	b.n	8000a54 <__udivmoddi4+0x1f0>
 8000b0c:	4645      	mov	r5, r8
 8000b0e:	e7ea      	b.n	8000ae6 <__udivmoddi4+0x282>
 8000b10:	462b      	mov	r3, r5
 8000b12:	e794      	b.n	8000a3e <__udivmoddi4+0x1da>
 8000b14:	4640      	mov	r0, r8
 8000b16:	e7d1      	b.n	8000abc <__udivmoddi4+0x258>
 8000b18:	46d0      	mov	r8, sl
 8000b1a:	e77b      	b.n	8000a14 <__udivmoddi4+0x1b0>
 8000b1c:	3d02      	subs	r5, #2
 8000b1e:	4462      	add	r2, ip
 8000b20:	e732      	b.n	8000988 <__udivmoddi4+0x124>
 8000b22:	4608      	mov	r0, r1
 8000b24:	e70a      	b.n	800093c <__udivmoddi4+0xd8>
 8000b26:	4464      	add	r4, ip
 8000b28:	3802      	subs	r0, #2
 8000b2a:	e742      	b.n	80009b2 <__udivmoddi4+0x14e>

08000b2c <__aeabi_idiv0>:
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b34:	f000 fc80 	bl	8001438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b38:	f000 f880 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3c:	f000 f97c 	bl	8000e38 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b40:	f000 f8e6 	bl	8000d10 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b44:	f000 f912 	bl	8000d6c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b48:	f000 f940 	bl	8000dcc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000b4c:	f007 fc8c 	bl	8008468 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MX_USB_HOST_Process();
 8000b50:	f007 fcb0 	bl	80084b4 <MX_USB_HOST_Process>
	  ADXL345_Read(0x32, 6); //0x32,0x33...0x37 read 6 bits value
 8000b54:	2106      	movs	r1, #6
 8000b56:	2032      	movs	r0, #50	; 0x32
 8000b58:	f000 fa6c 	bl	8001034 <ADXL345_Read>

	 x=(myDatas[1]<<8 | myDatas[0]);
 8000b5c:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <main+0xf0>)
 8000b5e:	785b      	ldrb	r3, [r3, #1]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <main+0xf0>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <main+0xf4>)
 8000b70:	801a      	strh	r2, [r3, #0]
	 y=(myDatas[3]<<8 | myDatas[2]);
 8000b72:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <main+0xf0>)
 8000b74:	78db      	ldrb	r3, [r3, #3]
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <main+0xf0>)
 8000b7c:	789b      	ldrb	r3, [r3, #2]
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	4313      	orrs	r3, r2
 8000b82:	b21a      	sxth	r2, r3
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <main+0xf8>)
 8000b86:	801a      	strh	r2, [r3, #0]
	 z=(myDatas[5]<<8 | myDatas[4]);
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <main+0xf0>)
 8000b8a:	795b      	ldrb	r3, [r3, #5]
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <main+0xf0>)
 8000b92:	791b      	ldrb	r3, [r3, #4]
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <main+0xfc>)
 8000b9c:	801a      	strh	r2, [r3, #0]

	 xG = x * .0087;
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <main+0xf4>)
 8000ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fd8b 	bl	80006c0 <__aeabi_i2d>
 8000baa:	a31b      	add	r3, pc, #108	; (adr r3, 8000c18 <main+0xe8>)
 8000bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb0:	f7ff fb0a 	bl	80001c8 <__aeabi_dmul>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	4610      	mov	r0, r2
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f7ff fdea 	bl	8000794 <__aeabi_d2f>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <main+0x100>)
 8000bc4:	6013      	str	r3, [r2, #0]
	 yG = y * .0087;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <main+0xf8>)
 8000bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fd77 	bl	80006c0 <__aeabi_i2d>
 8000bd2:	a311      	add	r3, pc, #68	; (adr r3, 8000c18 <main+0xe8>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	f7ff faf6 	bl	80001c8 <__aeabi_dmul>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	460b      	mov	r3, r1
 8000be0:	4610      	mov	r0, r2
 8000be2:	4619      	mov	r1, r3
 8000be4:	f7ff fdd6 	bl	8000794 <__aeabi_d2f>
 8000be8:	4603      	mov	r3, r0
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <main+0x104>)
 8000bec:	6013      	str	r3, [r2, #0]
	 zG = z * .0087;
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <main+0xfc>)
 8000bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fd63 	bl	80006c0 <__aeabi_i2d>
 8000bfa:	a307      	add	r3, pc, #28	; (adr r3, 8000c18 <main+0xe8>)
 8000bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c00:	f7ff fae2 	bl	80001c8 <__aeabi_dmul>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	4610      	mov	r0, r2
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f7ff fdc2 	bl	8000794 <__aeabi_d2f>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <main+0x108>)
 8000c14:	6013      	str	r3, [r2, #0]
	  MX_USB_HOST_Process();
 8000c16:	e79b      	b.n	8000b50 <main+0x20>
 8000c18:	3bcd35a8 	.word	0x3bcd35a8
 8000c1c:	3f81d14e 	.word	0x3f81d14e
 8000c20:	2000018c 	.word	0x2000018c
 8000c24:	20000192 	.word	0x20000192
 8000c28:	20000194 	.word	0x20000194
 8000c2c:	20000196 	.word	0x20000196
 8000c30:	20000198 	.word	0x20000198
 8000c34:	2000019c 	.word	0x2000019c
 8000c38:	200001a0 	.word	0x200001a0

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	; 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0320 	add.w	r3, r7, #32
 8000c46:	2230      	movs	r2, #48	; 0x30
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f007 ffd0 	bl	8008bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <SystemClock_Config+0xcc>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a27      	ldr	r2, [pc, #156]	; (8000d08 <SystemClock_Config+0xcc>)
 8000c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <SystemClock_Config+0xcc>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <SystemClock_Config+0xd0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a21      	ldr	r2, [pc, #132]	; (8000d0c <SystemClock_Config+0xd0>)
 8000c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <SystemClock_Config+0xd0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cac:	2308      	movs	r3, #8
 8000cae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cba:	2307      	movs	r3, #7
 8000cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 0320 	add.w	r3, r7, #32
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f003 fdae 	bl	8004824 <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cce:	f000 f9cf 	bl	8001070 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ce2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	2105      	movs	r1, #5
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 f80f 	bl	8004d14 <HAL_RCC_ClockConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cfc:	f000 f9b8 	bl	8001070 <Error_Handler>
  }
}
 8000d00:	bf00      	nop
 8000d02:	3750      	adds	r7, #80	; 0x50
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40007000 	.word	0x40007000

08000d10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d16:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <MX_I2C1_Init+0x54>)
 8000d18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d1c:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <MX_I2C1_Init+0x58>)
 8000d1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <MX_I2C1_Init+0x50>)
 8000d4e:	f002 fadb 	bl	8003308 <HAL_I2C_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d58:	f000 f98a 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000098 	.word	0x20000098
 8000d64:	40005400 	.word	0x40005400
 8000d68:	00061a80 	.word	0x00061a80

08000d6c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_I2S3_Init+0x54>)
 8000d72:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <MX_I2S3_Init+0x58>)
 8000d74:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_I2S3_Init+0x54>)
 8000d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MX_I2S3_Init+0x54>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_I2S3_Init+0x54>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <MX_I2S3_Init+0x54>)
 8000d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d90:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_I2S3_Init+0x54>)
 8000d94:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <MX_I2S3_Init+0x5c>)
 8000d96:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_I2S3_Init+0x54>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_I2S3_Init+0x54>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_I2S3_Init+0x54>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_I2S3_Init+0x54>)
 8000dac:	f003 f89a 	bl	8003ee4 <HAL_I2S_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000db6:	f000 f95b 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200000ec 	.word	0x200000ec
 8000dc4:	40003c00 	.word	0x40003c00
 8000dc8:	00017700 	.word	0x00017700

08000dcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <MX_SPI1_Init+0x64>)
 8000dd2:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <MX_SPI1_Init+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_SPI1_Init+0x64>)
 8000dd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ddc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_SPI1_Init+0x64>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <MX_SPI1_Init+0x64>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_SPI1_Init+0x64>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_SPI1_Init+0x64>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_SPI1_Init+0x64>)
 8000df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_SPI1_Init+0x64>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <MX_SPI1_Init+0x64>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_SPI1_Init+0x64>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <MX_SPI1_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_SPI1_Init+0x64>)
 8000e18:	220a      	movs	r2, #10
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <MX_SPI1_Init+0x64>)
 8000e1e:	f004 fac5 	bl	80053ac <HAL_SPI_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e28:	f000 f922 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000134 	.word	0x20000134
 8000e34:	40013000 	.word	0x40013000

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	4b72      	ldr	r3, [pc, #456]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a71      	ldr	r2, [pc, #452]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e58:	f043 0310 	orr.w	r3, r3, #16
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b6f      	ldr	r3, [pc, #444]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	61bb      	str	r3, [r7, #24]
 8000e68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	4b6b      	ldr	r3, [pc, #428]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a6a      	ldr	r2, [pc, #424]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b68      	ldr	r3, [pc, #416]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b64      	ldr	r3, [pc, #400]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a63      	ldr	r2, [pc, #396]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b61      	ldr	r3, [pc, #388]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b5d      	ldr	r3, [pc, #372]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a5c      	ldr	r2, [pc, #368]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b5a      	ldr	r3, [pc, #360]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b56      	ldr	r3, [pc, #344]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a55      	ldr	r2, [pc, #340]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b53      	ldr	r3, [pc, #332]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b4f      	ldr	r3, [pc, #316]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a4e      	ldr	r2, [pc, #312]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b4c      	ldr	r3, [pc, #304]	; (800101c <MX_GPIO_Init+0x1e4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2108      	movs	r1, #8
 8000efa:	4849      	ldr	r0, [pc, #292]	; (8001020 <MX_GPIO_Init+0x1e8>)
 8000efc:	f000 fde0 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2101      	movs	r1, #1
 8000f04:	4847      	ldr	r0, [pc, #284]	; (8001024 <MX_GPIO_Init+0x1ec>)
 8000f06:	f000 fddb 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000f10:	4845      	ldr	r0, [pc, #276]	; (8001028 <MX_GPIO_Init+0x1f0>)
 8000f12:	f000 fdd5 	bl	8001ac0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f16:	2308      	movs	r3, #8
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	483c      	ldr	r0, [pc, #240]	; (8001020 <MX_GPIO_Init+0x1e8>)
 8000f2e:	f000 fc2b 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f32:	2301      	movs	r3, #1
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	4836      	ldr	r0, [pc, #216]	; (8001024 <MX_GPIO_Init+0x1ec>)
 8000f4a:	f000 fc1d 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f4e:	2308      	movs	r3, #8
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	482e      	ldr	r0, [pc, #184]	; (8001024 <MX_GPIO_Init+0x1ec>)
 8000f6a:	f000 fc0d 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f72:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	482a      	ldr	r0, [pc, #168]	; (800102c <MX_GPIO_Init+0x1f4>)
 8000f84:	f000 fc00 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4825      	ldr	r0, [pc, #148]	; (8001030 <MX_GPIO_Init+0x1f8>)
 8000f9c:	f000 fbf4 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	481c      	ldr	r0, [pc, #112]	; (8001030 <MX_GPIO_Init+0x1f8>)
 8000fbe:	f000 fbe3 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fc2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000fc6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4813      	ldr	r0, [pc, #76]	; (8001028 <MX_GPIO_Init+0x1f0>)
 8000fdc:	f000 fbd4 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_GPIO_Init+0x1f0>)
 8000ff4:	f000 fbc8 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ffc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <MX_GPIO_Init+0x1e8>)
 800100e:	f000 fbbb 	bl	8001788 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001012:	bf00      	nop
 8001014:	3730      	adds	r7, #48	; 0x30
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40021000 	.word	0x40021000
 8001024:	40020800 	.word	0x40020800
 8001028:	40020c00 	.word	0x40020c00
 800102c:	40020000 	.word	0x40020000
 8001030:	40020400 	.word	0x40020400

08001034 <ADXL345_Read>:

}


void ADXL345_Read(uint8_t rRegister, uint8_t numberOfBytes)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, rRegister, 1, myDatas, 1, 100);
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	b29a      	uxth	r2, r3
 8001048:	2364      	movs	r3, #100	; 0x64
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2301      	movs	r3, #1
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <ADXL345_Read+0x34>)
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	21a6      	movs	r1, #166	; 0xa6
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <ADXL345_Read+0x38>)
 800105a:	f002 fa99 	bl	8003590 <HAL_I2C_Mem_Read>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000018c 	.word	0x2000018c
 800106c:	20000098 	.word	0x20000098

08001070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001078:	e7fe      	b.n	8001078 <Error_Handler+0x8>
	...

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <HAL_MspInit+0x4c>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_MspInit+0x4c>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010ba:	2007      	movs	r0, #7
 80010bc:	f000 fb22 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800

080010cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a19      	ldr	r2, [pc, #100]	; (8001150 <HAL_I2C_MspInit+0x84>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d12c      	bne.n	8001148 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_I2C_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a17      	ldr	r2, [pc, #92]	; (8001154 <HAL_I2C_MspInit+0x88>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_I2C_MspInit+0x88>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800110a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800110e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001110:	2312      	movs	r3, #18
 8001112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001114:	2301      	movs	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800111c:	2304      	movs	r3, #4
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	480c      	ldr	r0, [pc, #48]	; (8001158 <HAL_I2C_MspInit+0x8c>)
 8001128:	f000 fb2e 	bl	8001788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_I2C_MspInit+0x88>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_I2C_MspInit+0x88>)
 8001136:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_I2C_MspInit+0x88>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40005400 	.word	0x40005400
 8001154:	40023800 	.word	0x40023800
 8001158:	40020400 	.word	0x40020400

0800115c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	; 0x38
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a31      	ldr	r2, [pc, #196]	; (800124c <HAL_I2S_MspInit+0xf0>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d15a      	bne.n	8001242 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800118c:	2301      	movs	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001190:	23c0      	movs	r3, #192	; 0xc0
 8001192:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4618      	mov	r0, r3
 800119e:	f003 ffc5 	bl	800512c <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80011a8:	f7ff ff62 	bl	8001070 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_I2S_MspInit+0xf4>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a26      	ldr	r2, [pc, #152]	; (8001250 <HAL_I2S_MspInit+0xf4>)
 80011b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_I2S_MspInit+0xf4>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	4b20      	ldr	r3, [pc, #128]	; (8001250 <HAL_I2S_MspInit+0xf4>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <HAL_I2S_MspInit+0xf4>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6313      	str	r3, [r2, #48]	; 0x30
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_I2S_MspInit+0xf4>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_I2S_MspInit+0xf4>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a18      	ldr	r2, [pc, #96]	; (8001250 <HAL_I2S_MspInit+0xf4>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_I2S_MspInit+0xf4>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001200:	2310      	movs	r3, #16
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001210:	2306      	movs	r3, #6
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <HAL_I2S_MspInit+0xf8>)
 800121c:	f000 fab4 	bl	8001788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001220:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001232:	2306      	movs	r3, #6
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123a:	4619      	mov	r1, r3
 800123c:	4806      	ldr	r0, [pc, #24]	; (8001258 <HAL_I2S_MspInit+0xfc>)
 800123e:	f000 faa3 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3738      	adds	r7, #56	; 0x38
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40003c00 	.word	0x40003c00
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020800 	.word	0x40020800

0800125c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <HAL_SPI_MspInit+0x84>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d12b      	bne.n	80012d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_SPI_MspInit+0x88>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <HAL_SPI_MspInit+0x88>)
 8001288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_SPI_MspInit+0x88>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_SPI_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a10      	ldr	r2, [pc, #64]	; (80012e4 <HAL_SPI_MspInit+0x88>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_SPI_MspInit+0x88>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012b6:	23e0      	movs	r3, #224	; 0xe0
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012c6:	2305      	movs	r3, #5
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <HAL_SPI_MspInit+0x8c>)
 80012d2:	f000 fa59 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	; 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40013000 	.word	0x40013000
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020000 	.word	0x40020000

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 f8d0 	bl	80014dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <OTG_FS_IRQHandler+0x10>)
 8001346:	f000 fe3f 	bl	8001fc8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000588 	.word	0x20000588

08001354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800135c:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <_sbrk+0x5c>)
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <_sbrk+0x60>)
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <_sbrk+0x64>)
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <_sbrk+0x68>)
 8001374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	429a      	cmp	r2, r3
 8001382:	d207      	bcs.n	8001394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001384:	f007 fc4c 	bl	8008c20 <__errno>
 8001388:	4603      	mov	r3, r0
 800138a:	220c      	movs	r2, #12
 800138c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e009      	b.n	80013a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <_sbrk+0x64>)
 80013a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20020000 	.word	0x20020000
 80013b4:	00000400 	.word	0x00000400
 80013b8:	200001a4 	.word	0x200001a4
 80013bc:	200009d8 	.word	0x200009d8

080013c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <SystemInit+0x20>)
 80013c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <SystemInit+0x20>)
 80013cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800141c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ea:	490e      	ldr	r1, [pc, #56]	; (8001424 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013ec:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001400:	4c0b      	ldr	r4, [pc, #44]	; (8001430 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800140e:	f7ff ffd7 	bl	80013c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001412:	f007 fc0b 	bl	8008c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001416:	f7ff fb8b 	bl	8000b30 <main>
  bx  lr    
 800141a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800141c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001424:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001428:	08008d54 	.word	0x08008d54
  ldr r2, =_sbss
 800142c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001430:	200009d4 	.word	0x200009d4

08001434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC_IRQHandler>
	...

08001438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <HAL_Init+0x40>)
 8001442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_Init+0x40>)
 800144e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_Init+0x40>)
 800145a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001460:	2003      	movs	r0, #3
 8001462:	f000 f94f 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001466:	2000      	movs	r0, #0
 8001468:	f000 f808 	bl	800147c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800146c:	f7ff fe06 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023c00 	.word	0x40023c00

0800147c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_InitTick+0x54>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_InitTick+0x58>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	fbb3 f3f1 	udiv	r3, r3, r1
 8001496:	fbb2 f3f3 	udiv	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f967 	bl	800176e <HAL_SYSTICK_Config>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00e      	b.n	80014c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d80a      	bhi.n	80014c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f000 f92f 	bl	800171a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014bc:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <HAL_InitTick+0x5c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e000      	b.n	80014c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000008 	.word	0x20000008
 80014d8:	20000004 	.word	0x20000004

080014dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x20>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x24>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_IncTick+0x24>)
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008
 8001500:	200001a8 	.word	0x200001a8

08001504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_GetTick+0x14>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	200001a8 	.word	0x200001a8

0800151c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff ffee 	bl	8001504 <HAL_GetTick>
 8001528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001534:	d005      	beq.n	8001542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_Delay+0x44>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4413      	add	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001542:	bf00      	nop
 8001544:	f7ff ffde 	bl	8001504 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	429a      	cmp	r2, r3
 8001552:	d8f7      	bhi.n	8001544 <HAL_Delay+0x28>
  {
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800158c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db0b      	blt.n	80015f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	4907      	ldr	r1, [pc, #28]	; (8001600 <__NVIC_EnableIRQ+0x38>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	2001      	movs	r0, #1
 80015ea:	fa00 f202 	lsl.w	r2, r0, r2
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	; (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	; (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
         );
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d0:	d301      	bcc.n	80016d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00f      	b.n	80016f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <SysTick_Config+0x40>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016de:	210f      	movs	r1, #15
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f7ff ff8e 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <SysTick_Config+0x40>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <SysTick_Config+0x40>)
 80016f0:	2207      	movs	r2, #7
 80016f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	e000e010 	.word	0xe000e010

08001704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff29 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800172c:	f7ff ff3e 	bl	80015ac <__NVIC_GetPriorityGrouping>
 8001730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	f7ff ff8e 	bl	8001658 <NVIC_EncodePriority>
 800173c:	4602      	mov	r2, r0
 800173e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff5d 	bl	8001604 <__NVIC_SetPriority>
}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff31 	bl	80015c8 <__NVIC_EnableIRQ>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffa2 	bl	80016c0 <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	e16b      	b.n	8001a7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017a4:	2201      	movs	r2, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f040 815a 	bne.w	8001a76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d005      	beq.n	80017da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d130      	bne.n	800183c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 0201 	and.w	r2, r3, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b03      	cmp	r3, #3
 8001846:	d017      	beq.n	8001878 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d123      	bne.n	80018cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	69b9      	ldr	r1, [r7, #24]
 80018c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0203 	and.w	r2, r3, #3
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80b4 	beq.w	8001a76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b60      	ldr	r3, [pc, #384]	; (8001a94 <HAL_GPIO_Init+0x30c>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a5f      	ldr	r2, [pc, #380]	; (8001a94 <HAL_GPIO_Init+0x30c>)
 8001918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <HAL_GPIO_Init+0x30c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800192a:	4a5b      	ldr	r2, [pc, #364]	; (8001a98 <HAL_GPIO_Init+0x310>)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a52      	ldr	r2, [pc, #328]	; (8001a9c <HAL_GPIO_Init+0x314>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d02b      	beq.n	80019ae <HAL_GPIO_Init+0x226>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <HAL_GPIO_Init+0x318>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d025      	beq.n	80019aa <HAL_GPIO_Init+0x222>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a50      	ldr	r2, [pc, #320]	; (8001aa4 <HAL_GPIO_Init+0x31c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d01f      	beq.n	80019a6 <HAL_GPIO_Init+0x21e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4f      	ldr	r2, [pc, #316]	; (8001aa8 <HAL_GPIO_Init+0x320>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d019      	beq.n	80019a2 <HAL_GPIO_Init+0x21a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4e      	ldr	r2, [pc, #312]	; (8001aac <HAL_GPIO_Init+0x324>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0x216>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4d      	ldr	r2, [pc, #308]	; (8001ab0 <HAL_GPIO_Init+0x328>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00d      	beq.n	800199a <HAL_GPIO_Init+0x212>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4c      	ldr	r2, [pc, #304]	; (8001ab4 <HAL_GPIO_Init+0x32c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <HAL_GPIO_Init+0x20e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4b      	ldr	r2, [pc, #300]	; (8001ab8 <HAL_GPIO_Init+0x330>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_GPIO_Init+0x20a>
 800198e:	2307      	movs	r3, #7
 8001990:	e00e      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 8001992:	2308      	movs	r3, #8
 8001994:	e00c      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 8001996:	2306      	movs	r3, #6
 8001998:	e00a      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 800199a:	2305      	movs	r3, #5
 800199c:	e008      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 800199e:	2304      	movs	r3, #4
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 80019a2:	2303      	movs	r3, #3
 80019a4:	e004      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e002      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_Init+0x228>
 80019ae:	2300      	movs	r3, #0
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	f002 0203 	and.w	r2, r2, #3
 80019b6:	0092      	lsls	r2, r2, #2
 80019b8:	4093      	lsls	r3, r2
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c0:	4935      	ldr	r1, [pc, #212]	; (8001a98 <HAL_GPIO_Init+0x310>)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ce:	4b3b      	ldr	r3, [pc, #236]	; (8001abc <HAL_GPIO_Init+0x334>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f2:	4a32      	ldr	r2, [pc, #200]	; (8001abc <HAL_GPIO_Init+0x334>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f8:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_GPIO_Init+0x334>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a1c:	4a27      	ldr	r2, [pc, #156]	; (8001abc <HAL_GPIO_Init+0x334>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <HAL_GPIO_Init+0x334>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a46:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <HAL_GPIO_Init+0x334>)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_GPIO_Init+0x334>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a70:	4a12      	ldr	r2, [pc, #72]	; (8001abc <HAL_GPIO_Init+0x334>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2b0f      	cmp	r3, #15
 8001a80:	f67f ae90 	bls.w	80017a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40021400 	.word	0x40021400
 8001ab4:	40021800 	.word	0x40021800
 8001ab8:	40021c00 	.word	0x40021c00
 8001abc:	40013c00 	.word	0x40013c00

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
 8001acc:	4613      	mov	r3, r2
 8001ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad0:	787b      	ldrb	r3, [r7, #1]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001adc:	e003      	b.n	8001ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	041a      	lsls	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	619a      	str	r2, [r3, #24]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af4:	b08f      	sub	sp, #60	; 0x3c
 8001af6:	af0a      	add	r7, sp, #40	; 0x28
 8001af8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e054      	b.n	8001bae <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f006 fd00 	bl	8008524 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2203      	movs	r2, #3
 8001b28:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fd2d 	bl	80055a2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	687e      	ldr	r6, [r7, #4]
 8001b50:	466d      	mov	r5, sp
 8001b52:	f106 0410 	add.w	r4, r6, #16
 8001b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b66:	1d33      	adds	r3, r6, #4
 8001b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6a:	6838      	ldr	r0, [r7, #0]
 8001b6c:	f003 fca7 	bl	80054be <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fd24 	bl	80055c4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	687e      	ldr	r6, [r7, #4]
 8001b84:	466d      	mov	r5, sp
 8001b86:	f106 0410 	add.w	r4, r6, #16
 8001b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b96:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b9a:	1d33      	adds	r3, r6, #4
 8001b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b9e:	6838      	ldr	r0, [r7, #0]
 8001ba0:	f003 feac 	bl	80058fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bb6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001bb6:	b590      	push	{r4, r7, lr}
 8001bb8:	b089      	sub	sp, #36	; 0x24
 8001bba:	af04      	add	r7, sp, #16
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	4608      	mov	r0, r1
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	70fb      	strb	r3, [r7, #3]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70bb      	strb	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_HCD_HC_Init+0x28>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e076      	b.n	8001ccc <HAL_HCD_HC_Init+0x116>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	333d      	adds	r3, #61	; 0x3d
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	3338      	adds	r3, #56	; 0x38
 8001c06:	787a      	ldrb	r2, [r7, #1]
 8001c08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	212c      	movs	r1, #44	; 0x2c
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	3340      	adds	r3, #64	; 0x40
 8001c18:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c1a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	212c      	movs	r1, #44	; 0x2c
 8001c22:	fb01 f303 	mul.w	r3, r1, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	3339      	adds	r3, #57	; 0x39
 8001c2a:	78fa      	ldrb	r2, [r7, #3]
 8001c2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	212c      	movs	r1, #44	; 0x2c
 8001c34:	fb01 f303 	mul.w	r3, r1, r3
 8001c38:	4413      	add	r3, r2
 8001c3a:	333f      	adds	r3, #63	; 0x3f
 8001c3c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001c40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	78ba      	ldrb	r2, [r7, #2]
 8001c46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c4a:	b2d0      	uxtb	r0, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	212c      	movs	r1, #44	; 0x2c
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	333a      	adds	r3, #58	; 0x3a
 8001c58:	4602      	mov	r2, r0
 8001c5a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001c5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	da09      	bge.n	8001c78 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	333b      	adds	r3, #59	; 0x3b
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
 8001c76:	e008      	b.n	8001c8a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	212c      	movs	r1, #44	; 0x2c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	333b      	adds	r3, #59	; 0x3b
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	212c      	movs	r1, #44	; 0x2c
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	333c      	adds	r3, #60	; 0x3c
 8001c98:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c9c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	787c      	ldrb	r4, [r7, #1]
 8001ca4:	78ba      	ldrb	r2, [r7, #2]
 8001ca6:	78f9      	ldrb	r1, [r7, #3]
 8001ca8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001cb0:	9301      	str	r3, [sp, #4]
 8001cb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	4623      	mov	r3, r4
 8001cba:	f003 ffa5 	bl	8005c08 <USB_HC_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd90      	pop	{r4, r7, pc}

08001cd4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_HCD_HC_Halt+0x1e>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e00f      	b.n	8001d12 <HAL_HCD_HC_Halt+0x3e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	78fa      	ldrb	r2, [r7, #3]
 8001d00:	4611      	mov	r1, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 f9f5 	bl	80060f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	4608      	mov	r0, r1
 8001d26:	4611      	mov	r1, r2
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	70fb      	strb	r3, [r7, #3]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70bb      	strb	r3, [r7, #2]
 8001d32:	4613      	mov	r3, r2
 8001d34:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	333b      	adds	r3, #59	; 0x3b
 8001d44:	78ba      	ldrb	r2, [r7, #2]
 8001d46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	212c      	movs	r1, #44	; 0x2c
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	333f      	adds	r3, #63	; 0x3f
 8001d56:	787a      	ldrb	r2, [r7, #1]
 8001d58:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d5a:	7c3b      	ldrb	r3, [r7, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d112      	bne.n	8001d86 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	212c      	movs	r1, #44	; 0x2c
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3342      	adds	r3, #66	; 0x42
 8001d6e:	2203      	movs	r2, #3
 8001d70:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	333d      	adds	r3, #61	; 0x3d
 8001d80:	7f3a      	ldrb	r2, [r7, #28]
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e008      	b.n	8001d98 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	3342      	adds	r3, #66	; 0x42
 8001d94:	2202      	movs	r2, #2
 8001d96:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	f200 80c6 	bhi.w	8001f2c <HAL_HCD_HC_SubmitRequest+0x210>
 8001da0:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da6:	bf00      	nop
 8001da8:	08001db9 	.word	0x08001db9
 8001dac:	08001f19 	.word	0x08001f19
 8001db0:	08001e1d 	.word	0x08001e1d
 8001db4:	08001e9b 	.word	0x08001e9b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001db8:	7c3b      	ldrb	r3, [r7, #16]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	f040 80b8 	bne.w	8001f30 <HAL_HCD_HC_SubmitRequest+0x214>
 8001dc0:	78bb      	ldrb	r3, [r7, #2]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 80b4 	bne.w	8001f30 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001dc8:	8b3b      	ldrh	r3, [r7, #24]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d108      	bne.n	8001de0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	212c      	movs	r1, #44	; 0x2c
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	3355      	adds	r3, #85	; 0x55
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	212c      	movs	r1, #44	; 0x2c
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	3355      	adds	r3, #85	; 0x55
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	212c      	movs	r1, #44	; 0x2c
 8001dfa:	fb01 f303 	mul.w	r3, r1, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	3342      	adds	r3, #66	; 0x42
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e06:	e093      	b.n	8001f30 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	212c      	movs	r1, #44	; 0x2c
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	3342      	adds	r3, #66	; 0x42
 8001e16:	2202      	movs	r2, #2
 8001e18:	701a      	strb	r2, [r3, #0]
      break;
 8001e1a:	e089      	b.n	8001f30 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001e1c:	78bb      	ldrb	r3, [r7, #2]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d11d      	bne.n	8001e5e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	212c      	movs	r1, #44	; 0x2c
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3355      	adds	r3, #85	; 0x55
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	212c      	movs	r1, #44	; 0x2c
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	3342      	adds	r3, #66	; 0x42
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e48:	e073      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	212c      	movs	r1, #44	; 0x2c
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	3342      	adds	r3, #66	; 0x42
 8001e58:	2202      	movs	r2, #2
 8001e5a:	701a      	strb	r2, [r3, #0]
      break;
 8001e5c:	e069      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	212c      	movs	r1, #44	; 0x2c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3354      	adds	r3, #84	; 0x54
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	212c      	movs	r1, #44	; 0x2c
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3342      	adds	r3, #66	; 0x42
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
      break;
 8001e84:	e055      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	212c      	movs	r1, #44	; 0x2c
 8001e8c:	fb01 f303 	mul.w	r3, r1, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	3342      	adds	r3, #66	; 0x42
 8001e94:	2202      	movs	r2, #2
 8001e96:	701a      	strb	r2, [r3, #0]
      break;
 8001e98:	e04b      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001e9a:	78bb      	ldrb	r3, [r7, #2]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d11d      	bne.n	8001edc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	212c      	movs	r1, #44	; 0x2c
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	3355      	adds	r3, #85	; 0x55
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	212c      	movs	r1, #44	; 0x2c
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3342      	adds	r3, #66	; 0x42
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ec6:	e034      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	212c      	movs	r1, #44	; 0x2c
 8001ece:	fb01 f303 	mul.w	r3, r1, r3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3342      	adds	r3, #66	; 0x42
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	701a      	strb	r2, [r3, #0]
      break;
 8001eda:	e02a      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	212c      	movs	r1, #44	; 0x2c
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3354      	adds	r3, #84	; 0x54
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d109      	bne.n	8001f04 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	212c      	movs	r1, #44	; 0x2c
 8001ef6:	fb01 f303 	mul.w	r3, r1, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	3342      	adds	r3, #66	; 0x42
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
      break;
 8001f02:	e016      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	212c      	movs	r1, #44	; 0x2c
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	3342      	adds	r3, #66	; 0x42
 8001f12:	2202      	movs	r2, #2
 8001f14:	701a      	strb	r2, [r3, #0]
      break;
 8001f16:	e00c      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	212c      	movs	r1, #44	; 0x2c
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	3342      	adds	r3, #66	; 0x42
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
      break;
 8001f2a:	e002      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001f2c:	bf00      	nop
 8001f2e:	e000      	b.n	8001f32 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001f30:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	212c      	movs	r1, #44	; 0x2c
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3344      	adds	r3, #68	; 0x44
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	8b3a      	ldrh	r2, [r7, #24]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	202c      	movs	r0, #44	; 0x2c
 8001f4c:	fb00 f303 	mul.w	r3, r0, r3
 8001f50:	440b      	add	r3, r1
 8001f52:	334c      	adds	r3, #76	; 0x4c
 8001f54:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	212c      	movs	r1, #44	; 0x2c
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	3360      	adds	r3, #96	; 0x60
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	212c      	movs	r1, #44	; 0x2c
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	3350      	adds	r3, #80	; 0x50
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	212c      	movs	r1, #44	; 0x2c
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	3339      	adds	r3, #57	; 0x39
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	212c      	movs	r1, #44	; 0x2c
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	4413      	add	r3, r2
 8001f98:	3361      	adds	r3, #97	; 0x61
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	222c      	movs	r2, #44	; 0x2c
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	3338      	adds	r3, #56	; 0x38
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	18d1      	adds	r1, r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f003 ff48 	bl	8005e4c <USB_HC_StartXfer>
 8001fbc:	4603      	mov	r3, r0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop

08001fc8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 fc49 	bl	8005876 <USB_GetMode>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	f040 80f6 	bne.w	80021d8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 fc2d 	bl	8005850 <USB_ReadInterrupts>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80ec 	beq.w	80021d6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f003 fc24 	bl	8005850 <USB_ReadInterrupts>
 8002008:	4603      	mov	r3, r0
 800200a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002012:	d104      	bne.n	800201e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800201c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f003 fc14 	bl	8005850 <USB_ReadInterrupts>
 8002028:	4603      	mov	r3, r0
 800202a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002032:	d104      	bne.n	800203e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800203c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f003 fc04 	bl	8005850 <USB_ReadInterrupts>
 8002048:	4603      	mov	r3, r0
 800204a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800204e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002052:	d104      	bne.n	800205e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800205c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f003 fbf4 	bl	8005850 <USB_ReadInterrupts>
 8002068:	4603      	mov	r3, r0
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b02      	cmp	r3, #2
 8002070:	d103      	bne.n	800207a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2202      	movs	r2, #2
 8002078:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f003 fbe6 	bl	8005850 <USB_ReadInterrupts>
 8002084:	4603      	mov	r3, r0
 8002086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800208a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800208e:	d11c      	bne.n	80020ca <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002098:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10f      	bne.n	80020ca <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80020aa:	2110      	movs	r1, #16
 80020ac:	6938      	ldr	r0, [r7, #16]
 80020ae:	f003 fad5 	bl	800565c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80020b2:	6938      	ldr	r0, [r7, #16]
 80020b4:	f003 fb06 	bl	80056c4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2101      	movs	r1, #1
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 fcdc 	bl	8005a7c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f006 faab 	bl	8008620 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 fbbe 	bl	8005850 <USB_ReadInterrupts>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020de:	d102      	bne.n	80020e6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f001 f89e 	bl	8003222 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fbb0 	bl	8005850 <USB_ReadInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d106      	bne.n	8002108 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f006 fa74 	bl	80085e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2208      	movs	r2, #8
 8002106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f003 fb9f 	bl	8005850 <USB_ReadInterrupts>
 8002112:	4603      	mov	r3, r0
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b10      	cmp	r3, #16
 800211a:	d101      	bne.n	8002120 <HAL_HCD_IRQHandler+0x158>
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <HAL_HCD_IRQHandler+0x15a>
 8002120:	2300      	movs	r3, #0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d012      	beq.n	800214c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699a      	ldr	r2, [r3, #24]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0210 	bic.w	r2, r2, #16
 8002134:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 ffa1 	bl	800307e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699a      	ldr	r2, [r3, #24]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0210 	orr.w	r2, r2, #16
 800214a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f003 fb7d 	bl	8005850 <USB_ReadInterrupts>
 8002156:	4603      	mov	r3, r0
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002160:	d13a      	bne.n	80021d8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f003 ffb2 	bl	80060d0 <USB_HC_ReadInterrupt>
 800216c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	e025      	b.n	80021c0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d018      	beq.n	80021ba <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800219a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800219e:	d106      	bne.n	80021ae <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f8ab 	bl	8002302 <HCD_HC_IN_IRQHandler>
 80021ac:	e005      	b.n	80021ba <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4619      	mov	r1, r3
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fbf9 	bl	80029ac <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d3d4      	bcc.n	8002174 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d2:	615a      	str	r2, [r3, #20]
 80021d4:	e000      	b.n	80021d8 <HAL_HCD_IRQHandler+0x210>
      return;
 80021d6:	bf00      	nop
    }
  }
}
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_HCD_Start+0x16>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e013      	b.n	800221c <HAL_HCD_Start+0x3e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2101      	movs	r1, #1
 8002202:	4618      	mov	r0, r3
 8002204:	f003 fc9e 	bl	8005b44 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f003 f9b7 	bl	8005580 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_HCD_Stop+0x16>
 8002236:	2302      	movs	r3, #2
 8002238:	e00d      	b.n	8002256 <HAL_HCD_Stop+0x32>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f004 f88c 	bl	8006364 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f003 fc40 	bl	8005af0 <USB_ResetPort>
 8002270:	4603      	mov	r3, r0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	212c      	movs	r1, #44	; 0x2c
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	3360      	adds	r3, #96	; 0x60
 8002294:	781b      	ldrb	r3, [r3, #0]
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3350      	adds	r3, #80	; 0x50
 80022bc:	681b      	ldr	r3, [r3, #0]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fc84 	bl	8005be4 <USB_GetCurrentFrame>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fc5f 	bl	8005bb6 <USB_GetHostSpeed>
 80022f8:	4603      	mov	r3, r0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b04      	cmp	r3, #4
 8002330:	d11a      	bne.n	8002368 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	461a      	mov	r2, r3
 8002340:	2304      	movs	r3, #4
 8002342:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3361      	adds	r3, #97	; 0x61
 8002352:	2206      	movs	r2, #6
 8002354:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f003 fec6 	bl	80060f2 <USB_HC_Halt>
 8002366:	e0af      	b.n	80024c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800237e:	d11b      	bne.n	80023b8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	461a      	mov	r2, r3
 800238e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002392:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3361      	adds	r3, #97	; 0x61
 80023a2:	2207      	movs	r2, #7
 80023a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 fe9e 	bl	80060f2 <USB_HC_Halt>
 80023b6:	e087      	b.n	80024c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d109      	bne.n	80023e2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	461a      	mov	r2, r3
 80023dc:	2320      	movs	r3, #32
 80023de:	6093      	str	r3, [r2, #8]
 80023e0:	e072      	b.n	80024c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d11a      	bne.n	800242e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	461a      	mov	r2, r3
 8002406:	2308      	movs	r3, #8
 8002408:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	3361      	adds	r3, #97	; 0x61
 8002418:	2205      	movs	r2, #5
 800241a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f003 fe63 	bl	80060f2 <USB_HC_Halt>
 800242c:	e04c      	b.n	80024c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002444:	d11b      	bne.n	800247e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002452:	461a      	mov	r2, r3
 8002454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002458:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	3361      	adds	r3, #97	; 0x61
 8002468:	2208      	movs	r2, #8
 800246a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f003 fe3b 	bl	80060f2 <USB_HC_Halt>
 800247c:	e024      	b.n	80024c8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002490:	2b80      	cmp	r3, #128	; 0x80
 8002492:	d119      	bne.n	80024c8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	461a      	mov	r2, r3
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3361      	adds	r3, #97	; 0x61
 80024b4:	2206      	movs	r2, #6
 80024b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 fe15 	bl	80060f2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024de:	d112      	bne.n	8002506 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fe01 	bl	80060f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	461a      	mov	r2, r3
 80024fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002502:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002504:	e24e      	b.n	80029a4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	f040 80df 	bne.w	80026dc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d019      	beq.n	800255a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	3348      	adds	r3, #72	; 0x48
 8002534:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	0159      	lsls	r1, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	440b      	add	r3, r1
 800253e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002548:	1ad2      	subs	r2, r2, r3
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	202c      	movs	r0, #44	; 0x2c
 8002550:	fb00 f303 	mul.w	r3, r0, r3
 8002554:	440b      	add	r3, r1
 8002556:	3350      	adds	r3, #80	; 0x50
 8002558:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	3361      	adds	r3, #97	; 0x61
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	335c      	adds	r3, #92	; 0x5c
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258a:	461a      	mov	r2, r3
 800258c:	2301      	movs	r3, #1
 800258e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	333f      	adds	r3, #63	; 0x3f
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	212c      	movs	r1, #44	; 0x2c
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	333f      	adds	r3, #63	; 0x3f
 80025b2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d111      	bne.n	80025dc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 fd95 	bl	80060f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	461a      	mov	r2, r3
 80025d6:	2310      	movs	r3, #16
 80025d8:	6093      	str	r3, [r2, #8]
 80025da:	e03a      	b.n	8002652 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	333f      	adds	r3, #63	; 0x3f
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d009      	beq.n	8002604 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	333f      	adds	r3, #63	; 0x3f
 80025fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002600:	2b01      	cmp	r3, #1
 8002602:	d126      	bne.n	8002652 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	0151      	lsls	r1, r2, #5
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	440a      	add	r2, r1
 800261a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800261e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002622:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	3360      	adds	r3, #96	; 0x60
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	b2d9      	uxtb	r1, r3
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	202c      	movs	r0, #44	; 0x2c
 8002640:	fb00 f303 	mul.w	r3, r0, r3
 8002644:	4413      	add	r3, r2
 8002646:	3360      	adds	r3, #96	; 0x60
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f005 fff5 	bl	800863c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d12b      	bne.n	80026b2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3348      	adds	r3, #72	; 0x48
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	202c      	movs	r0, #44	; 0x2c
 8002670:	fb00 f202 	mul.w	r2, r0, r2
 8002674:	440a      	add	r2, r1
 8002676:	3240      	adds	r2, #64	; 0x40
 8002678:	8812      	ldrh	r2, [r2, #0]
 800267a:	fbb3 f3f2 	udiv	r3, r3, r2
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 818e 	beq.w	80029a4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	3354      	adds	r3, #84	; 0x54
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	f083 0301 	eor.w	r3, r3, #1
 800269c:	b2d8      	uxtb	r0, r3
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	3354      	adds	r3, #84	; 0x54
 80026ac:	4602      	mov	r2, r0
 80026ae:	701a      	strb	r2, [r3, #0]
}
 80026b0:	e178      	b.n	80029a4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	3354      	adds	r3, #84	; 0x54
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	f083 0301 	eor.w	r3, r3, #1
 80026c6:	b2d8      	uxtb	r0, r3
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3354      	adds	r3, #84	; 0x54
 80026d6:	4602      	mov	r2, r0
 80026d8:	701a      	strb	r2, [r3, #0]
}
 80026da:	e163      	b.n	80029a4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	f040 80f6 	bne.w	80028e0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	3361      	adds	r3, #97	; 0x61
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d109      	bne.n	800271c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	3360      	adds	r3, #96	; 0x60
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	e0c9      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	3361      	adds	r3, #97	; 0x61
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d109      	bne.n	8002744 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	3360      	adds	r3, #96	; 0x60
 800273e:	2205      	movs	r2, #5
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e0b5      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3361      	adds	r3, #97	; 0x61
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b06      	cmp	r3, #6
 8002756:	d009      	beq.n	800276c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	3361      	adds	r3, #97	; 0x61
 8002766:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002768:	2b08      	cmp	r3, #8
 800276a:	d150      	bne.n	800280e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	4413      	add	r3, r2
 8002778:	335c      	adds	r3, #92	; 0x5c
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	202c      	movs	r0, #44	; 0x2c
 8002784:	fb00 f303 	mul.w	r3, r0, r3
 8002788:	440b      	add	r3, r1
 800278a:	335c      	adds	r3, #92	; 0x5c
 800278c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	335c      	adds	r3, #92	; 0x5c
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d912      	bls.n	80027c8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	335c      	adds	r3, #92	; 0x5c
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3360      	adds	r3, #96	; 0x60
 80027c2:	2204      	movs	r2, #4
 80027c4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027c6:	e073      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3360      	adds	r3, #96	; 0x60
 80027d6:	2202      	movs	r2, #2
 80027d8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027f0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027f8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	461a      	mov	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800280c:	e050      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3361      	adds	r3, #97	; 0x61
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d122      	bne.n	8002868 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	3360      	adds	r3, #96	; 0x60
 8002830:	2202      	movs	r2, #2
 8002832:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800284a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002852:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e023      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	3361      	adds	r3, #97	; 0x61
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b07      	cmp	r3, #7
 800287a:	d119      	bne.n	80028b0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	335c      	adds	r3, #92	; 0x5c
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	202c      	movs	r0, #44	; 0x2c
 8002894:	fb00 f303 	mul.w	r3, r0, r3
 8002898:	440b      	add	r3, r1
 800289a:	335c      	adds	r3, #92	; 0x5c
 800289c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3360      	adds	r3, #96	; 0x60
 80028ac:	2204      	movs	r2, #4
 80028ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	2302      	movs	r3, #2
 80028c0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	b2d9      	uxtb	r1, r3
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	202c      	movs	r0, #44	; 0x2c
 80028cc:	fb00 f303 	mul.w	r3, r0, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	3360      	adds	r3, #96	; 0x60
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f005 feaf 	bl	800863c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80028de:	e061      	b.n	80029a4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d156      	bne.n	80029a4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	333f      	adds	r3, #63	; 0x3f
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d111      	bne.n	800292e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	335c      	adds	r3, #92	; 0x5c
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f003 fbe3 	bl	80060f2 <USB_HC_Halt>
 800292c:	e031      	b.n	8002992 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	333f      	adds	r3, #63	; 0x3f
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	333f      	adds	r3, #63	; 0x3f
 8002950:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002952:	2b02      	cmp	r3, #2
 8002954:	d11d      	bne.n	8002992 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	335c      	adds	r3, #92	; 0x5c
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d110      	bne.n	8002992 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3361      	adds	r3, #97	; 0x61
 800297e:	2203      	movs	r2, #3
 8002980:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f003 fbb0 	bl	80060f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	461a      	mov	r2, r3
 80029a0:	2310      	movs	r3, #16
 80029a2:	6093      	str	r3, [r2, #8]
}
 80029a4:	bf00      	nop
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d11a      	bne.n	8002a12 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	461a      	mov	r2, r3
 80029ea:	2304      	movs	r3, #4
 80029ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	3361      	adds	r3, #97	; 0x61
 80029fc:	2206      	movs	r2, #6
 80029fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f003 fb71 	bl	80060f2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002a10:	e331      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d12e      	bne.n	8002a86 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	461a      	mov	r2, r3
 8002a36:	2320      	movs	r3, #32
 8002a38:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	333d      	adds	r3, #61	; 0x3d
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	f040 8313 	bne.w	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	333d      	adds	r3, #61	; 0x3d
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3360      	adds	r3, #96	; 0x60
 8002a70:	2202      	movs	r2, #2
 8002a72:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 fb37 	bl	80060f2 <USB_HC_Halt>
}
 8002a84:	e2f7      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a9c:	d112      	bne.n	8002ac4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f003 fb18 	bl	80060f2 <USB_HC_Halt>
}
 8002ac2:	e2d8      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d140      	bne.n	8002b5c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	335c      	adds	r3, #92	; 0x5c
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d111      	bne.n	8002b26 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	333d      	adds	r3, #61	; 0x3d
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	461a      	mov	r2, r3
 8002b22:	2340      	movs	r3, #64	; 0x40
 8002b24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b32:	461a      	mov	r2, r3
 8002b34:	2301      	movs	r3, #1
 8002b36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3361      	adds	r3, #97	; 0x61
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 facc 	bl	80060f2 <USB_HC_Halt>
}
 8002b5a:	e28c      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d12c      	bne.n	8002bcc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3361      	adds	r3, #97	; 0x61
 8002b80:	2204      	movs	r2, #4
 8002b82:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	333d      	adds	r3, #61	; 0x3d
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	335c      	adds	r3, #92	; 0x5c
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f003 fa9d 	bl	80060f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2340      	movs	r3, #64	; 0x40
 8002bc8:	6093      	str	r3, [r2, #8]
}
 8002bca:	e254      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d11a      	bne.n	8002c18 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	3361      	adds	r3, #97	; 0x61
 8002c02:	2205      	movs	r2, #5
 8002c04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f003 fa6e 	bl	80060f2 <USB_HC_Halt>
}
 8002c16:	e22e      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d140      	bne.n	8002cb0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	335c      	adds	r3, #92	; 0x5c
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3361      	adds	r3, #97	; 0x61
 8002c4e:	2203      	movs	r2, #3
 8002c50:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	333d      	adds	r3, #61	; 0x3d
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d112      	bne.n	8002c8c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	212c      	movs	r1, #44	; 0x2c
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	333c      	adds	r3, #60	; 0x3c
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	333d      	adds	r3, #61	; 0x3d
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f003 fa2b 	bl	80060f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2310      	movs	r3, #16
 8002cac:	6093      	str	r3, [r2, #8]
}
 8002cae:	e1e2      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	2b80      	cmp	r3, #128	; 0x80
 8002cc4:	d164      	bne.n	8002d90 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d111      	bne.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3361      	adds	r3, #97	; 0x61
 8002cdc:	2206      	movs	r2, #6
 8002cde:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 fa01 	bl	80060f2 <USB_HC_Halt>
 8002cf0:	e044      	b.n	8002d7c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	335c      	adds	r3, #92	; 0x5c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	202c      	movs	r0, #44	; 0x2c
 8002d0a:	fb00 f303 	mul.w	r3, r0, r3
 8002d0e:	440b      	add	r3, r1
 8002d10:	335c      	adds	r3, #92	; 0x5c
 8002d12:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	335c      	adds	r3, #92	; 0x5c
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d920      	bls.n	8002d6a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	335c      	adds	r3, #92	; 0x5c
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3360      	adds	r3, #96	; 0x60
 8002d48:	2204      	movs	r2, #4
 8002d4a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	b2d9      	uxtb	r1, r3
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	202c      	movs	r0, #44	; 0x2c
 8002d56:	fb00 f303 	mul.w	r3, r0, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3360      	adds	r3, #96	; 0x60
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f005 fc6a 	bl	800863c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d68:	e008      	b.n	8002d7c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3360      	adds	r3, #96	; 0x60
 8002d78:	2202      	movs	r2, #2
 8002d7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	6093      	str	r3, [r2, #8]
}
 8002d8e:	e172      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da6:	d11b      	bne.n	8002de0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3361      	adds	r3, #97	; 0x61
 8002db6:	2208      	movs	r2, #8
 8002db8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 f994 	bl	80060f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ddc:	6093      	str	r3, [r2, #8]
}
 8002dde:	e14a      	b.n	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	f040 813f 	bne.w	8003076 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3361      	adds	r3, #97	; 0x61
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d17d      	bne.n	8002f08 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3360      	adds	r3, #96	; 0x60
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	333f      	adds	r3, #63	; 0x3f
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d00a      	beq.n	8002e48 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	333f      	adds	r3, #63	; 0x3f
 8002e40:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	f040 8100 	bne.w	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d113      	bne.n	8002e78 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3355      	adds	r3, #85	; 0x55
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	f083 0301 	eor.w	r3, r3, #1
 8002e64:	b2d8      	uxtb	r0, r3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3355      	adds	r3, #85	; 0x55
 8002e74:	4602      	mov	r2, r0
 8002e76:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	f040 80e3 	bne.w	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	334c      	adds	r3, #76	; 0x4c
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80d8 	beq.w	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	334c      	adds	r3, #76	; 0x4c
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	202c      	movs	r0, #44	; 0x2c
 8002eae:	fb00 f202 	mul.w	r2, r0, r2
 8002eb2:	440a      	add	r2, r1
 8002eb4:	3240      	adds	r2, #64	; 0x40
 8002eb6:	8812      	ldrh	r2, [r2, #0]
 8002eb8:	4413      	add	r3, r2
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	202c      	movs	r0, #44	; 0x2c
 8002ec2:	fb00 f202 	mul.w	r2, r0, r2
 8002ec6:	440a      	add	r2, r1
 8002ec8:	3240      	adds	r2, #64	; 0x40
 8002eca:	8812      	ldrh	r2, [r2, #0]
 8002ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80b5 	beq.w	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3355      	adds	r3, #85	; 0x55
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	f083 0301 	eor.w	r3, r3, #1
 8002ef2:	b2d8      	uxtb	r0, r3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	3355      	adds	r3, #85	; 0x55
 8002f02:	4602      	mov	r2, r0
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e09f      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	212c      	movs	r1, #44	; 0x2c
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	3361      	adds	r3, #97	; 0x61
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d109      	bne.n	8002f30 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	3360      	adds	r3, #96	; 0x60
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e08b      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3361      	adds	r3, #97	; 0x61
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d109      	bne.n	8002f58 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	3360      	adds	r3, #96	; 0x60
 8002f52:	2202      	movs	r2, #2
 8002f54:	701a      	strb	r2, [r3, #0]
 8002f56:	e077      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	3361      	adds	r3, #97	; 0x61
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b05      	cmp	r3, #5
 8002f6a:	d109      	bne.n	8002f80 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3360      	adds	r3, #96	; 0x60
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e063      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3361      	adds	r3, #97	; 0x61
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b06      	cmp	r3, #6
 8002f92:	d009      	beq.n	8002fa8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3361      	adds	r3, #97	; 0x61
 8002fa2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d14f      	bne.n	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	335c      	adds	r3, #92	; 0x5c
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	202c      	movs	r0, #44	; 0x2c
 8002fc0:	fb00 f303 	mul.w	r3, r0, r3
 8002fc4:	440b      	add	r3, r1
 8002fc6:	335c      	adds	r3, #92	; 0x5c
 8002fc8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	335c      	adds	r3, #92	; 0x5c
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d912      	bls.n	8003004 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	335c      	adds	r3, #92	; 0x5c
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3360      	adds	r3, #96	; 0x60
 8002ffe:	2204      	movs	r2, #4
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e021      	b.n	8003048 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	212c      	movs	r1, #44	; 0x2c
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	4413      	add	r3, r2
 8003010:	3360      	adds	r3, #96	; 0x60
 8003012:	2202      	movs	r2, #2
 8003014:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	4413      	add	r3, r2
 800301e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800302c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003034:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	4413      	add	r3, r2
 800303e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003042:	461a      	mov	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	2302      	movs	r3, #2
 8003058:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	b2d9      	uxtb	r1, r3
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	202c      	movs	r0, #44	; 0x2c
 8003064:	fb00 f303 	mul.w	r3, r0, r3
 8003068:	4413      	add	r3, r2
 800306a:	3360      	adds	r3, #96	; 0x60
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f005 fae3 	bl	800863c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003076:	bf00      	nop
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b08a      	sub	sp, #40	; 0x28
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	0c5b      	lsrs	r3, r3, #17
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030b2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d004      	beq.n	80030c4 <HCD_RXQLVL_IRQHandler+0x46>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b05      	cmp	r3, #5
 80030be:	f000 80a9 	beq.w	8003214 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80030c2:	e0aa      	b.n	800321a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 80a6 	beq.w	8003218 <HCD_RXQLVL_IRQHandler+0x19a>
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3344      	adds	r3, #68	; 0x44
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 809b 	beq.w	8003218 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	3350      	adds	r3, #80	; 0x50
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	441a      	add	r2, r3
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	202c      	movs	r0, #44	; 0x2c
 80030fc:	fb00 f303 	mul.w	r3, r0, r3
 8003100:	440b      	add	r3, r1
 8003102:	334c      	adds	r3, #76	; 0x4c
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d87a      	bhi.n	8003200 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	3344      	adds	r3, #68	; 0x44
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	b292      	uxth	r2, r2
 8003122:	4619      	mov	r1, r3
 8003124:	f002 fb3c 	bl	80057a0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3344      	adds	r3, #68	; 0x44
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	441a      	add	r2, r3
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	202c      	movs	r0, #44	; 0x2c
 8003142:	fb00 f303 	mul.w	r3, r0, r3
 8003146:	440b      	add	r3, r1
 8003148:	3344      	adds	r3, #68	; 0x44
 800314a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3350      	adds	r3, #80	; 0x50
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	441a      	add	r2, r3
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	202c      	movs	r0, #44	; 0x2c
 8003166:	fb00 f303 	mul.w	r3, r0, r3
 800316a:	440b      	add	r3, r1
 800316c:	3350      	adds	r3, #80	; 0x50
 800316e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	0cdb      	lsrs	r3, r3, #19
 8003180:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003184:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	3340      	adds	r3, #64	; 0x40
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4293      	cmp	r3, r2
 800319c:	d13c      	bne.n	8003218 <HCD_RXQLVL_IRQHandler+0x19a>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d039      	beq.n	8003218 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031ba:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031c2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d0:	461a      	mov	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3354      	adds	r3, #84	; 0x54
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	f083 0301 	eor.w	r3, r3, #1
 80031ea:	b2d8      	uxtb	r0, r3
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	3354      	adds	r3, #84	; 0x54
 80031fa:	4602      	mov	r2, r0
 80031fc:	701a      	strb	r2, [r3, #0]
      break;
 80031fe:	e00b      	b.n	8003218 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	3360      	adds	r3, #96	; 0x60
 800320e:	2204      	movs	r2, #4
 8003210:	701a      	strb	r2, [r3, #0]
      break;
 8003212:	e001      	b.n	8003218 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003214:	bf00      	nop
 8003216:	e000      	b.n	800321a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003218:	bf00      	nop
  }
}
 800321a:	bf00      	nop
 800321c:	3728      	adds	r7, #40	; 0x28
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b086      	sub	sp, #24
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800324e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d10b      	bne.n	8003272 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d102      	bne.n	800326a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f005 f9cd 	bl	8008604 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b08      	cmp	r3, #8
 800327a:	d132      	bne.n	80032e2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f043 0308 	orr.w	r3, r3, #8
 8003282:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b04      	cmp	r3, #4
 800328c:	d126      	bne.n	80032dc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d113      	bne.n	80032be <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800329c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032a0:	d106      	bne.n	80032b0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2102      	movs	r1, #2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 fbe7 	bl	8005a7c <USB_InitFSLSPClkSel>
 80032ae:	e011      	b.n	80032d4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2101      	movs	r1, #1
 80032b6:	4618      	mov	r0, r3
 80032b8:	f002 fbe0 	bl	8005a7c <USB_InitFSLSPClkSel>
 80032bc:	e00a      	b.n	80032d4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d106      	bne.n	80032d4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032cc:	461a      	mov	r2, r3
 80032ce:	f64e 2360 	movw	r3, #60000	; 0xea60
 80032d2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f005 f9bf 	bl	8008658 <HAL_HCD_PortEnabled_Callback>
 80032da:	e002      	b.n	80032e2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f005 f9c9 	bl	8008674 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d103      	bne.n	80032f4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f043 0320 	orr.w	r3, r3, #32
 80032f2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032fa:	461a      	mov	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	6013      	str	r3, [r2, #0]
}
 8003300:	bf00      	nop
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e12b      	b.n	8003572 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fd fecc 	bl	80010cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800336a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800336c:	f001 feca 	bl	8005104 <HAL_RCC_GetPCLK1Freq>
 8003370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4a81      	ldr	r2, [pc, #516]	; (800357c <HAL_I2C_Init+0x274>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d807      	bhi.n	800338c <HAL_I2C_Init+0x84>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a80      	ldr	r2, [pc, #512]	; (8003580 <HAL_I2C_Init+0x278>)
 8003380:	4293      	cmp	r3, r2
 8003382:	bf94      	ite	ls
 8003384:	2301      	movls	r3, #1
 8003386:	2300      	movhi	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e006      	b.n	800339a <HAL_I2C_Init+0x92>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a7d      	ldr	r2, [pc, #500]	; (8003584 <HAL_I2C_Init+0x27c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	bf94      	ite	ls
 8003394:	2301      	movls	r3, #1
 8003396:	2300      	movhi	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e0e7      	b.n	8003572 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a78      	ldr	r2, [pc, #480]	; (8003588 <HAL_I2C_Init+0x280>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0c9b      	lsrs	r3, r3, #18
 80033ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4a6a      	ldr	r2, [pc, #424]	; (800357c <HAL_I2C_Init+0x274>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d802      	bhi.n	80033dc <HAL_I2C_Init+0xd4>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3301      	adds	r3, #1
 80033da:	e009      	b.n	80033f0 <HAL_I2C_Init+0xe8>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	4a69      	ldr	r2, [pc, #420]	; (800358c <HAL_I2C_Init+0x284>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	3301      	adds	r3, #1
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003402:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	495c      	ldr	r1, [pc, #368]	; (800357c <HAL_I2C_Init+0x274>)
 800340c:	428b      	cmp	r3, r1
 800340e:	d819      	bhi.n	8003444 <HAL_I2C_Init+0x13c>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1e59      	subs	r1, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fbb1 f3f3 	udiv	r3, r1, r3
 800341e:	1c59      	adds	r1, r3, #1
 8003420:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003424:	400b      	ands	r3, r1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_I2C_Init+0x138>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e59      	subs	r1, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fbb1 f3f3 	udiv	r3, r1, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343e:	e051      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 8003440:	2304      	movs	r3, #4
 8003442:	e04f      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d111      	bne.n	8003470 <HAL_I2C_Init+0x168>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1e58      	subs	r0, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e012      	b.n	8003496 <HAL_I2C_Init+0x18e>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1e58      	subs	r0, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	0099      	lsls	r1, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	fbb0 f3f3 	udiv	r3, r0, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Init+0x196>
 800349a:	2301      	movs	r3, #1
 800349c:	e022      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10e      	bne.n	80034c4 <HAL_I2C_Init+0x1bc>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1e58      	subs	r0, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	440b      	add	r3, r1
 80034b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b8:	3301      	adds	r3, #1
 80034ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c2:	e00f      	b.n	80034e4 <HAL_I2C_Init+0x1dc>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1e58      	subs	r0, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	0099      	lsls	r1, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	6809      	ldr	r1, [r1, #0]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69da      	ldr	r2, [r3, #28]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003512:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6911      	ldr	r1, [r2, #16]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68d2      	ldr	r2, [r2, #12]
 800351e:	4311      	orrs	r1, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	430b      	orrs	r3, r1
 8003526:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	000186a0 	.word	0x000186a0
 8003580:	001e847f 	.word	0x001e847f
 8003584:	003d08ff 	.word	0x003d08ff
 8003588:	431bde83 	.word	0x431bde83
 800358c:	10624dd3 	.word	0x10624dd3

08003590 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08c      	sub	sp, #48	; 0x30
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	4608      	mov	r0, r1
 800359a:	4611      	mov	r1, r2
 800359c:	461a      	mov	r2, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	817b      	strh	r3, [r7, #10]
 80035a2:	460b      	mov	r3, r1
 80035a4:	813b      	strh	r3, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035aa:	f7fd ffab 	bl	8001504 <HAL_GetTick>
 80035ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	f040 8208 	bne.w	80039ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	2319      	movs	r3, #25
 80035c4:	2201      	movs	r2, #1
 80035c6:	497b      	ldr	r1, [pc, #492]	; (80037b4 <HAL_I2C_Mem_Read+0x224>)
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 faef 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
 80035d6:	e1fb      	b.n	80039d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_I2C_Mem_Read+0x56>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e1f4      	b.n	80039d0 <HAL_I2C_Mem_Read+0x440>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d007      	beq.n	800360c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800361a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2222      	movs	r2, #34	; 0x22
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2240      	movs	r2, #64	; 0x40
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800363c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4a5b      	ldr	r2, [pc, #364]	; (80037b8 <HAL_I2C_Mem_Read+0x228>)
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800364e:	88f8      	ldrh	r0, [r7, #6]
 8003650:	893a      	ldrh	r2, [r7, #8]
 8003652:	8979      	ldrh	r1, [r7, #10]
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	4603      	mov	r3, r0
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f9bc 	bl	80039dc <I2C_RequestMemoryRead>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e1b0      	b.n	80039d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	2b00      	cmp	r3, #0
 8003674:	d113      	bne.n	800369e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003676:	2300      	movs	r3, #0
 8003678:	623b      	str	r3, [r7, #32]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	623b      	str	r3, [r7, #32]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	623b      	str	r3, [r7, #32]
 800368a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e184      	b.n	80039a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d11b      	bne.n	80036de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	e164      	b.n	80039a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d11b      	bne.n	800371e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003706:	2300      	movs	r3, #0
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	e144      	b.n	80039a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003734:	e138      	b.n	80039a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	2b03      	cmp	r3, #3
 800373c:	f200 80f1 	bhi.w	8003922 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	2b01      	cmp	r3, #1
 8003746:	d123      	bne.n	8003790 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fb44 	bl	8003dda <I2C_WaitOnRXNEFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e139      	b.n	80039d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800378e:	e10b      	b.n	80039a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003794:	2b02      	cmp	r3, #2
 8003796:	d14e      	bne.n	8003836 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379e:	2200      	movs	r2, #0
 80037a0:	4906      	ldr	r1, [pc, #24]	; (80037bc <HAL_I2C_Mem_Read+0x22c>)
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fa02 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e10e      	b.n	80039d0 <HAL_I2C_Mem_Read+0x440>
 80037b2:	bf00      	nop
 80037b4:	00100002 	.word	0x00100002
 80037b8:	ffff0000 	.word	0xffff0000
 80037bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003834:	e0b8      	b.n	80039a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383c:	2200      	movs	r2, #0
 800383e:	4966      	ldr	r1, [pc, #408]	; (80039d8 <HAL_I2C_Mem_Read+0x448>)
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f9b3 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0bf      	b.n	80039d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	2200      	movs	r2, #0
 800389a:	494f      	ldr	r1, [pc, #316]	; (80039d8 <HAL_I2C_Mem_Read+0x448>)
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f985 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e091      	b.n	80039d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003920:	e042      	b.n	80039a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003924:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 fa57 	bl	8003dda <I2C_WaitOnRXNEFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e04c      	b.n	80039d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b04      	cmp	r3, #4
 8003974:	d118      	bne.n	80039a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f47f aec2 	bne.w	8003736 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	e000      	b.n	80039d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039ce:	2302      	movs	r3, #2
  }
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3728      	adds	r7, #40	; 0x28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	00010004 	.word	0x00010004

080039dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	4608      	mov	r0, r1
 80039e6:	4611      	mov	r1, r2
 80039e8:	461a      	mov	r2, r3
 80039ea:	4603      	mov	r3, r0
 80039ec:	817b      	strh	r3, [r7, #10]
 80039ee:	460b      	mov	r3, r1
 80039f0:	813b      	strh	r3, [r7, #8]
 80039f2:	4613      	mov	r3, r2
 80039f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f8c2 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00d      	beq.n	8003a4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3c:	d103      	bne.n	8003a46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e0aa      	b.n	8003ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a4a:	897b      	ldrh	r3, [r7, #10]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	6a3a      	ldr	r2, [r7, #32]
 8003a5e:	4952      	ldr	r1, [pc, #328]	; (8003ba8 <I2C_RequestMemoryRead+0x1cc>)
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f8fa 	bl	8003c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e097      	b.n	8003ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a88:	6a39      	ldr	r1, [r7, #32]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f964 	bl	8003d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00d      	beq.n	8003ab2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d107      	bne.n	8003aae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e076      	b.n	8003ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d105      	bne.n	8003ac4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ab8:	893b      	ldrh	r3, [r7, #8]
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	611a      	str	r2, [r3, #16]
 8003ac2:	e021      	b.n	8003b08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ac4:	893b      	ldrh	r3, [r7, #8]
 8003ac6:	0a1b      	lsrs	r3, r3, #8
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad4:	6a39      	ldr	r1, [r7, #32]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f93e 	bl	8003d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d107      	bne.n	8003afa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e050      	b.n	8003ba0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003afe:	893b      	ldrh	r3, [r7, #8]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0a:	6a39      	ldr	r1, [r7, #32]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f923 	bl	8003d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00d      	beq.n	8003b34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d107      	bne.n	8003b30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e035      	b.n	8003ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f82b 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6a:	d103      	bne.n	8003b74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e013      	b.n	8003ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b78:	897b      	ldrh	r3, [r7, #10]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	6a3a      	ldr	r2, [r7, #32]
 8003b8c:	4906      	ldr	r1, [pc, #24]	; (8003ba8 <I2C_RequestMemoryRead+0x1cc>)
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f863 	bl	8003c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	00010002 	.word	0x00010002

08003bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bbc:	e025      	b.n	8003c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d021      	beq.n	8003c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc6:	f7fd fc9d 	bl	8001504 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d116      	bne.n	8003c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e023      	b.n	8003c52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d10d      	bne.n	8003c30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	43da      	mvns	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bf0c      	ite	eq
 8003c26:	2301      	moveq	r3, #1
 8003c28:	2300      	movne	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	e00c      	b.n	8003c4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	43da      	mvns	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d0b6      	beq.n	8003bbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
 8003c66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c68:	e051      	b.n	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c78:	d123      	bne.n	8003cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f043 0204 	orr.w	r2, r3, #4
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e046      	b.n	8003d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc8:	d021      	beq.n	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cca:	f7fd fc1b 	bl	8001504 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d302      	bcc.n	8003ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d116      	bne.n	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f043 0220 	orr.w	r2, r3, #32
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e020      	b.n	8003d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10c      	bne.n	8003d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4013      	ands	r3, r2
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	bf14      	ite	ne
 8003d2a:	2301      	movne	r3, #1
 8003d2c:	2300      	moveq	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	e00b      	b.n	8003d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	43da      	mvns	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf14      	ite	ne
 8003d44:	2301      	movne	r3, #1
 8003d46:	2300      	moveq	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d18d      	bne.n	8003c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d64:	e02d      	b.n	8003dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 f88d 	bl	8003e86 <I2C_IsAcknowledgeFailed>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e02d      	b.n	8003dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d021      	beq.n	8003dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7e:	f7fd fbc1 	bl	8001504 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d116      	bne.n	8003dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e007      	b.n	8003dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dcc:	2b80      	cmp	r3, #128	; 0x80
 8003dce:	d1ca      	bne.n	8003d66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003de6:	e042      	b.n	8003e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b10      	cmp	r3, #16
 8003df4:	d119      	bne.n	8003e2a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f06f 0210 	mvn.w	r2, #16
 8003dfe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e029      	b.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fd fb6b 	bl	8001504 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d116      	bne.n	8003e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e007      	b.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d1b5      	bne.n	8003de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9c:	d11b      	bne.n	8003ed6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ea6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f043 0204 	orr.w	r2, r3, #4
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e128      	b.n	8004148 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a90      	ldr	r2, [pc, #576]	; (8004150 <HAL_I2S_Init+0x26c>)
 8003f0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7fd f923 	bl	800115c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f2c:	f023 030f 	bic.w	r3, r3, #15
 8003f30:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2202      	movs	r2, #2
 8003f38:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d060      	beq.n	8004004 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d102      	bne.n	8003f50 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003f4a:	2310      	movs	r3, #16
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	e001      	b.n	8003f54 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003f50:	2320      	movs	r3, #32
 8003f52:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d802      	bhi.n	8003f62 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003f62:	2001      	movs	r0, #1
 8003f64:	f001 f9c4 	bl	80052f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f68:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f72:	d125      	bne.n	8003fc0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d010      	beq.n	8003f9e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	461a      	mov	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	3305      	adds	r3, #5
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	e01f      	b.n	8003fde <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fba:	3305      	adds	r3, #5
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	e00e      	b.n	8003fde <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fda:	3305      	adds	r3, #5
 8003fdc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4a5c      	ldr	r2, [pc, #368]	; (8004154 <HAL_I2S_Init+0x270>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	08db      	lsrs	r3, r3, #3
 8003fe8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	085b      	lsrs	r3, r3, #1
 8003ffa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	e003      	b.n	800400c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004004:	2302      	movs	r3, #2
 8004006:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d902      	bls.n	8004018 <HAL_I2S_Init+0x134>
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	2bff      	cmp	r3, #255	; 0xff
 8004016:	d907      	bls.n	8004028 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401c:	f043 0210 	orr.w	r2, r3, #16
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e08f      	b.n	8004148 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	ea42 0103 	orr.w	r1, r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	430a      	orrs	r2, r1
 800403a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004046:	f023 030f 	bic.w	r3, r3, #15
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6851      	ldr	r1, [r2, #4]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6892      	ldr	r2, [r2, #8]
 8004052:	4311      	orrs	r1, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	68d2      	ldr	r2, [r2, #12]
 8004058:	4311      	orrs	r1, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6992      	ldr	r2, [r2, #24]
 800405e:	430a      	orrs	r2, r1
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800406a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d161      	bne.n	8004138 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a38      	ldr	r2, [pc, #224]	; (8004158 <HAL_I2S_Init+0x274>)
 8004078:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a37      	ldr	r2, [pc, #220]	; (800415c <HAL_I2S_Init+0x278>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <HAL_I2S_Init+0x1a4>
 8004084:	4b36      	ldr	r3, [pc, #216]	; (8004160 <HAL_I2S_Init+0x27c>)
 8004086:	e001      	b.n	800408c <HAL_I2S_Init+0x1a8>
 8004088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	4932      	ldr	r1, [pc, #200]	; (800415c <HAL_I2S_Init+0x278>)
 8004094:	428a      	cmp	r2, r1
 8004096:	d101      	bne.n	800409c <HAL_I2S_Init+0x1b8>
 8004098:	4a31      	ldr	r2, [pc, #196]	; (8004160 <HAL_I2S_Init+0x27c>)
 800409a:	e001      	b.n	80040a0 <HAL_I2S_Init+0x1bc>
 800409c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80040a0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80040a4:	f023 030f 	bic.w	r3, r3, #15
 80040a8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a2b      	ldr	r2, [pc, #172]	; (800415c <HAL_I2S_Init+0x278>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d101      	bne.n	80040b8 <HAL_I2S_Init+0x1d4>
 80040b4:	4b2a      	ldr	r3, [pc, #168]	; (8004160 <HAL_I2S_Init+0x27c>)
 80040b6:	e001      	b.n	80040bc <HAL_I2S_Init+0x1d8>
 80040b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040bc:	2202      	movs	r2, #2
 80040be:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a25      	ldr	r2, [pc, #148]	; (800415c <HAL_I2S_Init+0x278>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d101      	bne.n	80040ce <HAL_I2S_Init+0x1ea>
 80040ca:	4b25      	ldr	r3, [pc, #148]	; (8004160 <HAL_I2S_Init+0x27c>)
 80040cc:	e001      	b.n	80040d2 <HAL_I2S_Init+0x1ee>
 80040ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040de:	d003      	beq.n	80040e8 <HAL_I2S_Init+0x204>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d103      	bne.n	80040f0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80040e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	e001      	b.n	80040f4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80040fe:	4313      	orrs	r3, r2
 8004100:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004108:	4313      	orrs	r3, r2
 800410a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004112:	4313      	orrs	r3, r2
 8004114:	b29a      	uxth	r2, r3
 8004116:	897b      	ldrh	r3, [r7, #10]
 8004118:	4313      	orrs	r3, r2
 800411a:	b29b      	uxth	r3, r3
 800411c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004120:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a0d      	ldr	r2, [pc, #52]	; (800415c <HAL_I2S_Init+0x278>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d101      	bne.n	8004130 <HAL_I2S_Init+0x24c>
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <HAL_I2S_Init+0x27c>)
 800412e:	e001      	b.n	8004134 <HAL_I2S_Init+0x250>
 8004130:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004134:	897a      	ldrh	r2, [r7, #10]
 8004136:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	0800425b 	.word	0x0800425b
 8004154:	cccccccd 	.word	0xcccccccd
 8004158:	08004371 	.word	0x08004371
 800415c:	40003800 	.word	0x40003800
 8004160:	40003400 	.word	0x40003400

08004164 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	881a      	ldrh	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c9a      	adds	r2, r3, #2
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10e      	bne.n	80041f4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041e4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff ffb8 	bl	8004164 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	b292      	uxth	r2, r2
 8004210:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	1c9a      	adds	r2, r3, #2
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10e      	bne.n	8004252 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004242:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff93 	bl	8004178 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b04      	cmp	r3, #4
 8004274:	d13a      	bne.n	80042ec <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d109      	bne.n	8004294 <I2S_IRQHandler+0x3a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	d102      	bne.n	8004294 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff ffb4 	bl	80041fc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429a:	2b40      	cmp	r3, #64	; 0x40
 800429c:	d126      	bne.n	80042ec <I2S_IRQHandler+0x92>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d11f      	bne.n	80042ec <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f043 0202 	orr.w	r2, r3, #2
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff ff50 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d136      	bne.n	8004366 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d109      	bne.n	8004316 <I2S_IRQHandler+0xbc>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d102      	bne.n	8004316 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ff45 	bl	80041a0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b08      	cmp	r3, #8
 800431e:	d122      	bne.n	8004366 <I2S_IRQHandler+0x10c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b20      	cmp	r3, #32
 800432c:	d11b      	bne.n	8004366 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800433c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004358:	f043 0204 	orr.w	r2, r3, #4
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff ff13 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004366:	bf00      	nop
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a92      	ldr	r2, [pc, #584]	; (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d101      	bne.n	800438e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800438a:	4b92      	ldr	r3, [pc, #584]	; (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800438c:	e001      	b.n	8004392 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800438e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a8b      	ldr	r2, [pc, #556]	; (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d101      	bne.n	80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80043a8:	4b8a      	ldr	r3, [pc, #552]	; (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043aa:	e001      	b.n	80043b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80043ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043bc:	d004      	beq.n	80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f040 8099 	bne.w	80044fa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d107      	bne.n	80043e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f925 	bl	800462c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d107      	bne.n	80043fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9c8 	bl	800478c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d13a      	bne.n	800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d035      	beq.n	800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a6e      	ldr	r2, [pc, #440]	; (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d101      	bne.n	800441e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800441a:	4b6e      	ldr	r3, [pc, #440]	; (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800441c:	e001      	b.n	8004422 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800441e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4969      	ldr	r1, [pc, #420]	; (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800442a:	428b      	cmp	r3, r1
 800442c:	d101      	bne.n	8004432 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800442e:	4b69      	ldr	r3, [pc, #420]	; (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004430:	e001      	b.n	8004436 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004432:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004436:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800443a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800444a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	f043 0202 	orr.w	r2, r3, #2
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff fe88 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b08      	cmp	r3, #8
 8004484:	f040 80c3 	bne.w	800460e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 80bd 	beq.w	800460e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044a2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a49      	ldr	r2, [pc, #292]	; (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d101      	bne.n	80044b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80044ae:	4b49      	ldr	r3, [pc, #292]	; (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044b0:	e001      	b.n	80044b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80044b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4944      	ldr	r1, [pc, #272]	; (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044be:	428b      	cmp	r3, r1
 80044c0:	d101      	bne.n	80044c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80044c2:	4b44      	ldr	r3, [pc, #272]	; (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044c4:	e001      	b.n	80044ca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80044c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044ce:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80044d0:	2300      	movs	r3, #0
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	f043 0204 	orr.w	r2, r3, #4
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff fe4a 	bl	800418c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044f8:	e089      	b.n	800460e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b02      	cmp	r3, #2
 8004502:	d107      	bne.n	8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8be 	bl	8004690 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b01      	cmp	r3, #1
 800451c:	d107      	bne.n	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f8fd 	bl	8004728 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	d12f      	bne.n	8004598 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d02a      	beq.n	8004598 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004550:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1e      	ldr	r2, [pc, #120]	; (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d101      	bne.n	8004560 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800455e:	e001      	b.n	8004564 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4919      	ldr	r1, [pc, #100]	; (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800456c:	428b      	cmp	r3, r1
 800456e:	d101      	bne.n	8004574 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004570:	4b18      	ldr	r3, [pc, #96]	; (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004572:	e001      	b.n	8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004578:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800457c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	f043 0202 	orr.w	r2, r3, #2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff fdfa 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d136      	bne.n	8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d031      	beq.n	8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a07      	ldr	r2, [pc, #28]	; (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045b8:	e001      	b.n	80045be <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80045ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4902      	ldr	r1, [pc, #8]	; (80045d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045c6:	428b      	cmp	r3, r1
 80045c8:	d106      	bne.n	80045d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80045ca:	4b02      	ldr	r3, [pc, #8]	; (80045d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045cc:	e006      	b.n	80045dc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80045ce:	bf00      	nop
 80045d0:	40003800 	.word	0x40003800
 80045d4:	40003400 	.word	0x40003400
 80045d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045e0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	f043 0204 	orr.w	r2, r3, #4
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff fdc0 	bl	800418c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800460c:	e000      	b.n	8004610 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800460e:	bf00      	nop
}
 8004610:	bf00      	nop
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c99      	adds	r1, r3, #2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6251      	str	r1, [r2, #36]	; 0x24
 800463e:	881a      	ldrh	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d113      	bne.n	8004686 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800466c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ffc9 	bl	8004618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c99      	adds	r1, r3, #2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6251      	str	r1, [r2, #36]	; 0x24
 80046a2:	8819      	ldrh	r1, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <I2SEx_TxISR_I2SExt+0x90>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d101      	bne.n	80046b2 <I2SEx_TxISR_I2SExt+0x22>
 80046ae:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <I2SEx_TxISR_I2SExt+0x94>)
 80046b0:	e001      	b.n	80046b6 <I2SEx_TxISR_I2SExt+0x26>
 80046b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046b6:	460a      	mov	r2, r1
 80046b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d121      	bne.n	8004716 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a12      	ldr	r2, [pc, #72]	; (8004720 <I2SEx_TxISR_I2SExt+0x90>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <I2SEx_TxISR_I2SExt+0x50>
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <I2SEx_TxISR_I2SExt+0x94>)
 80046de:	e001      	b.n	80046e4 <I2SEx_TxISR_I2SExt+0x54>
 80046e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	490d      	ldr	r1, [pc, #52]	; (8004720 <I2SEx_TxISR_I2SExt+0x90>)
 80046ec:	428b      	cmp	r3, r1
 80046ee:	d101      	bne.n	80046f4 <I2SEx_TxISR_I2SExt+0x64>
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <I2SEx_TxISR_I2SExt+0x94>)
 80046f2:	e001      	b.n	80046f8 <I2SEx_TxISR_I2SExt+0x68>
 80046f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ff81 	bl	8004618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40003800 	.word	0x40003800
 8004724:	40003400 	.word	0x40003400

08004728 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68d8      	ldr	r0, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	1c99      	adds	r1, r3, #2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004740:	b282      	uxth	r2, r0
 8004742:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d113      	bne.n	8004784 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800476a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff ff4a 	bl	8004618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004784:	bf00      	nop
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a20      	ldr	r2, [pc, #128]	; (800481c <I2SEx_RxISR_I2SExt+0x90>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d101      	bne.n	80047a2 <I2SEx_RxISR_I2SExt+0x16>
 800479e:	4b20      	ldr	r3, [pc, #128]	; (8004820 <I2SEx_RxISR_I2SExt+0x94>)
 80047a0:	e001      	b.n	80047a6 <I2SEx_RxISR_I2SExt+0x1a>
 80047a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047a6:	68d8      	ldr	r0, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	1c99      	adds	r1, r3, #2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80047b2:	b282      	uxth	r2, r0
 80047b4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d121      	bne.n	8004812 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a12      	ldr	r2, [pc, #72]	; (800481c <I2SEx_RxISR_I2SExt+0x90>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <I2SEx_RxISR_I2SExt+0x50>
 80047d8:	4b11      	ldr	r3, [pc, #68]	; (8004820 <I2SEx_RxISR_I2SExt+0x94>)
 80047da:	e001      	b.n	80047e0 <I2SEx_RxISR_I2SExt+0x54>
 80047dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	490d      	ldr	r1, [pc, #52]	; (800481c <I2SEx_RxISR_I2SExt+0x90>)
 80047e8:	428b      	cmp	r3, r1
 80047ea:	d101      	bne.n	80047f0 <I2SEx_RxISR_I2SExt+0x64>
 80047ec:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <I2SEx_RxISR_I2SExt+0x94>)
 80047ee:	e001      	b.n	80047f4 <I2SEx_RxISR_I2SExt+0x68>
 80047f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047f8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d106      	bne.n	8004812 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff03 	bl	8004618 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40003800 	.word	0x40003800
 8004820:	40003400 	.word	0x40003400

08004824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e267      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d075      	beq.n	800492e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004842:	4b88      	ldr	r3, [pc, #544]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b04      	cmp	r3, #4
 800484c:	d00c      	beq.n	8004868 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800484e:	4b85      	ldr	r3, [pc, #532]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004856:	2b08      	cmp	r3, #8
 8004858:	d112      	bne.n	8004880 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800485a:	4b82      	ldr	r3, [pc, #520]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004866:	d10b      	bne.n	8004880 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004868:	4b7e      	ldr	r3, [pc, #504]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d05b      	beq.n	800492c <HAL_RCC_OscConfig+0x108>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d157      	bne.n	800492c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e242      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d106      	bne.n	8004898 <HAL_RCC_OscConfig+0x74>
 800488a:	4b76      	ldr	r3, [pc, #472]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a75      	ldr	r2, [pc, #468]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	e01d      	b.n	80048d4 <HAL_RCC_OscConfig+0xb0>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048a0:	d10c      	bne.n	80048bc <HAL_RCC_OscConfig+0x98>
 80048a2:	4b70      	ldr	r3, [pc, #448]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a6f      	ldr	r2, [pc, #444]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	4b6d      	ldr	r3, [pc, #436]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a6c      	ldr	r2, [pc, #432]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	e00b      	b.n	80048d4 <HAL_RCC_OscConfig+0xb0>
 80048bc:	4b69      	ldr	r3, [pc, #420]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a68      	ldr	r2, [pc, #416]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	4b66      	ldr	r3, [pc, #408]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a65      	ldr	r2, [pc, #404]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d013      	beq.n	8004904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7fc fe12 	bl	8001504 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048e4:	f7fc fe0e 	bl	8001504 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b64      	cmp	r3, #100	; 0x64
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e207      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f6:	4b5b      	ldr	r3, [pc, #364]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f0      	beq.n	80048e4 <HAL_RCC_OscConfig+0xc0>
 8004902:	e014      	b.n	800492e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fc fdfe 	bl	8001504 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800490c:	f7fc fdfa 	bl	8001504 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e1f3      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800491e:	4b51      	ldr	r3, [pc, #324]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0xe8>
 800492a:	e000      	b.n	800492e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d063      	beq.n	8004a02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800493a:	4b4a      	ldr	r3, [pc, #296]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 030c 	and.w	r3, r3, #12
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00b      	beq.n	800495e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004946:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800494e:	2b08      	cmp	r3, #8
 8004950:	d11c      	bne.n	800498c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004952:	4b44      	ldr	r3, [pc, #272]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d116      	bne.n	800498c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495e:	4b41      	ldr	r3, [pc, #260]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_RCC_OscConfig+0x152>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d001      	beq.n	8004976 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e1c7      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004976:	4b3b      	ldr	r3, [pc, #236]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4937      	ldr	r1, [pc, #220]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004986:	4313      	orrs	r3, r2
 8004988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498a:	e03a      	b.n	8004a02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d020      	beq.n	80049d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004994:	4b34      	ldr	r3, [pc, #208]	; (8004a68 <HAL_RCC_OscConfig+0x244>)
 8004996:	2201      	movs	r2, #1
 8004998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fc fdb3 	bl	8001504 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049a2:	f7fc fdaf 	bl	8001504 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e1a8      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b4:	4b2b      	ldr	r3, [pc, #172]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c0:	4b28      	ldr	r3, [pc, #160]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4925      	ldr	r1, [pc, #148]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	600b      	str	r3, [r1, #0]
 80049d4:	e015      	b.n	8004a02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d6:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <HAL_RCC_OscConfig+0x244>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fc fd92 	bl	8001504 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e4:	f7fc fd8e 	bl	8001504 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e187      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f6:	4b1b      	ldr	r3, [pc, #108]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d036      	beq.n	8004a7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d016      	beq.n	8004a44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a16:	4b15      	ldr	r3, [pc, #84]	; (8004a6c <HAL_RCC_OscConfig+0x248>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1c:	f7fc fd72 	bl	8001504 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a24:	f7fc fd6e 	bl	8001504 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e167      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <HAL_RCC_OscConfig+0x240>)
 8004a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x200>
 8004a42:	e01b      	b.n	8004a7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <HAL_RCC_OscConfig+0x248>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4a:	f7fc fd5b 	bl	8001504 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a50:	e00e      	b.n	8004a70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a52:	f7fc fd57 	bl	8001504 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d907      	bls.n	8004a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e150      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
 8004a64:	40023800 	.word	0x40023800
 8004a68:	42470000 	.word	0x42470000
 8004a6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a70:	4b88      	ldr	r3, [pc, #544]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1ea      	bne.n	8004a52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8097 	beq.w	8004bb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a8e:	4b81      	ldr	r3, [pc, #516]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10f      	bne.n	8004aba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	4b7d      	ldr	r3, [pc, #500]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	4a7c      	ldr	r2, [pc, #496]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aaa:	4b7a      	ldr	r3, [pc, #488]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aba:	4b77      	ldr	r3, [pc, #476]	; (8004c98 <HAL_RCC_OscConfig+0x474>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d118      	bne.n	8004af8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac6:	4b74      	ldr	r3, [pc, #464]	; (8004c98 <HAL_RCC_OscConfig+0x474>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a73      	ldr	r2, [pc, #460]	; (8004c98 <HAL_RCC_OscConfig+0x474>)
 8004acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ad2:	f7fc fd17 	bl	8001504 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ada:	f7fc fd13 	bl	8001504 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e10c      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aec:	4b6a      	ldr	r3, [pc, #424]	; (8004c98 <HAL_RCC_OscConfig+0x474>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d106      	bne.n	8004b0e <HAL_RCC_OscConfig+0x2ea>
 8004b00:	4b64      	ldr	r3, [pc, #400]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	4a63      	ldr	r2, [pc, #396]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0c:	e01c      	b.n	8004b48 <HAL_RCC_OscConfig+0x324>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b05      	cmp	r3, #5
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCC_OscConfig+0x30c>
 8004b16:	4b5f      	ldr	r3, [pc, #380]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1a:	4a5e      	ldr	r2, [pc, #376]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b1c:	f043 0304 	orr.w	r3, r3, #4
 8004b20:	6713      	str	r3, [r2, #112]	; 0x70
 8004b22:	4b5c      	ldr	r3, [pc, #368]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	4a5b      	ldr	r2, [pc, #364]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b28:	f043 0301 	orr.w	r3, r3, #1
 8004b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2e:	e00b      	b.n	8004b48 <HAL_RCC_OscConfig+0x324>
 8004b30:	4b58      	ldr	r3, [pc, #352]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	4a57      	ldr	r2, [pc, #348]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b36:	f023 0301 	bic.w	r3, r3, #1
 8004b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3c:	4b55      	ldr	r3, [pc, #340]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b40:	4a54      	ldr	r2, [pc, #336]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b42:	f023 0304 	bic.w	r3, r3, #4
 8004b46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d015      	beq.n	8004b7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b50:	f7fc fcd8 	bl	8001504 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b58:	f7fc fcd4 	bl	8001504 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e0cb      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6e:	4b49      	ldr	r3, [pc, #292]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0ee      	beq.n	8004b58 <HAL_RCC_OscConfig+0x334>
 8004b7a:	e014      	b.n	8004ba6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b7c:	f7fc fcc2 	bl	8001504 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b82:	e00a      	b.n	8004b9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b84:	f7fc fcbe 	bl	8001504 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e0b5      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9a:	4b3e      	ldr	r3, [pc, #248]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1ee      	bne.n	8004b84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d105      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bac:	4b39      	ldr	r3, [pc, #228]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	4a38      	ldr	r2, [pc, #224]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80a1 	beq.w	8004d04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bc2:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d05c      	beq.n	8004c88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d141      	bne.n	8004c5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd6:	4b31      	ldr	r3, [pc, #196]	; (8004c9c <HAL_RCC_OscConfig+0x478>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bdc:	f7fc fc92 	bl	8001504 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be4:	f7fc fc8e 	bl	8001504 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e087      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf6:	4b27      	ldr	r3, [pc, #156]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	019b      	lsls	r3, r3, #6
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	085b      	lsrs	r3, r3, #1
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	041b      	lsls	r3, r3, #16
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	061b      	lsls	r3, r3, #24
 8004c26:	491b      	ldr	r1, [pc, #108]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <HAL_RCC_OscConfig+0x478>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c32:	f7fc fc67 	bl	8001504 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3a:	f7fc fc63 	bl	8001504 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e05c      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4c:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x416>
 8004c58:	e054      	b.n	8004d04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5a:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <HAL_RCC_OscConfig+0x478>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c60:	f7fc fc50 	bl	8001504 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fc fc4c 	bl	8001504 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e045      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7a:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0x444>
 8004c86:	e03d      	b.n	8004d04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d107      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e038      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
 8004c94:	40023800 	.word	0x40023800
 8004c98:	40007000 	.word	0x40007000
 8004c9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ca0:	4b1b      	ldr	r3, [pc, #108]	; (8004d10 <HAL_RCC_OscConfig+0x4ec>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d028      	beq.n	8004d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d121      	bne.n	8004d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d11a      	bne.n	8004d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d111      	bne.n	8004d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d107      	bne.n	8004d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40023800 	.word	0x40023800

08004d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0cc      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d28:	4b68      	ldr	r3, [pc, #416]	; (8004ecc <HAL_RCC_ClockConfig+0x1b8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d90c      	bls.n	8004d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d36:	4b65      	ldr	r3, [pc, #404]	; (8004ecc <HAL_RCC_ClockConfig+0x1b8>)
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3e:	4b63      	ldr	r3, [pc, #396]	; (8004ecc <HAL_RCC_ClockConfig+0x1b8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0b8      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d020      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d68:	4b59      	ldr	r3, [pc, #356]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4a58      	ldr	r2, [pc, #352]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d80:	4b53      	ldr	r3, [pc, #332]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	4a52      	ldr	r2, [pc, #328]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d8c:	4b50      	ldr	r3, [pc, #320]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	494d      	ldr	r1, [pc, #308]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d044      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d107      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db2:	4b47      	ldr	r3, [pc, #284]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d119      	bne.n	8004df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e07f      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d003      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d107      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd2:	4b3f      	ldr	r3, [pc, #252]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d109      	bne.n	8004df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e06f      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de2:	4b3b      	ldr	r3, [pc, #236]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e067      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004df2:	4b37      	ldr	r3, [pc, #220]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f023 0203 	bic.w	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	4934      	ldr	r1, [pc, #208]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e04:	f7fc fb7e 	bl	8001504 <HAL_GetTick>
 8004e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0a:	e00a      	b.n	8004e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e0c:	f7fc fb7a 	bl	8001504 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e04f      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e22:	4b2b      	ldr	r3, [pc, #172]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 020c 	and.w	r2, r3, #12
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d1eb      	bne.n	8004e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e34:	4b25      	ldr	r3, [pc, #148]	; (8004ecc <HAL_RCC_ClockConfig+0x1b8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d20c      	bcs.n	8004e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e42:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <HAL_RCC_ClockConfig+0x1b8>)
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4a:	4b20      	ldr	r3, [pc, #128]	; (8004ecc <HAL_RCC_ClockConfig+0x1b8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d001      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e032      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d008      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e68:	4b19      	ldr	r3, [pc, #100]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4916      	ldr	r1, [pc, #88]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e86:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	490e      	ldr	r1, [pc, #56]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e9a:	f000 f821 	bl	8004ee0 <HAL_RCC_GetSysClockFreq>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	490a      	ldr	r1, [pc, #40]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8004eac:	5ccb      	ldrb	r3, [r1, r3]
 8004eae:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb2:	4a09      	ldr	r2, [pc, #36]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004eb6:	4b09      	ldr	r3, [pc, #36]	; (8004edc <HAL_RCC_ClockConfig+0x1c8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fc fade 	bl	800147c <HAL_InitTick>

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40023c00 	.word	0x40023c00
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	08008d2c 	.word	0x08008d2c
 8004ed8:	20000000 	.word	0x20000000
 8004edc:	20000004 	.word	0x20000004

08004ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee4:	b094      	sub	sp, #80	; 0x50
 8004ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	647b      	str	r3, [r7, #68]	; 0x44
 8004eec:	2300      	movs	r3, #0
 8004eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ef8:	4b79      	ldr	r3, [pc, #484]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 030c 	and.w	r3, r3, #12
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d00d      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0x40>
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	f200 80e1 	bhi.w	80050cc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_RCC_GetSysClockFreq+0x34>
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d003      	beq.n	8004f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8004f12:	e0db      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f14:	4b73      	ldr	r3, [pc, #460]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f18:	e0db      	b.n	80050d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f1a:	4b73      	ldr	r3, [pc, #460]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f1e:	e0d8      	b.n	80050d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f20:	4b6f      	ldr	r3, [pc, #444]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f2a:	4b6d      	ldr	r3, [pc, #436]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d063      	beq.n	8004ffe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f36:	4b6a      	ldr	r3, [pc, #424]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	099b      	lsrs	r3, r3, #6
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f48:	633b      	str	r3, [r7, #48]	; 0x30
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f52:	4622      	mov	r2, r4
 8004f54:	462b      	mov	r3, r5
 8004f56:	f04f 0000 	mov.w	r0, #0
 8004f5a:	f04f 0100 	mov.w	r1, #0
 8004f5e:	0159      	lsls	r1, r3, #5
 8004f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f64:	0150      	lsls	r0, r2, #5
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	1a51      	subs	r1, r2, r1
 8004f6e:	6139      	str	r1, [r7, #16]
 8004f70:	4629      	mov	r1, r5
 8004f72:	eb63 0301 	sbc.w	r3, r3, r1
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f84:	4659      	mov	r1, fp
 8004f86:	018b      	lsls	r3, r1, #6
 8004f88:	4651      	mov	r1, sl
 8004f8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f8e:	4651      	mov	r1, sl
 8004f90:	018a      	lsls	r2, r1, #6
 8004f92:	4651      	mov	r1, sl
 8004f94:	ebb2 0801 	subs.w	r8, r2, r1
 8004f98:	4659      	mov	r1, fp
 8004f9a:	eb63 0901 	sbc.w	r9, r3, r1
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fb2:	4690      	mov	r8, r2
 8004fb4:	4699      	mov	r9, r3
 8004fb6:	4623      	mov	r3, r4
 8004fb8:	eb18 0303 	adds.w	r3, r8, r3
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	462b      	mov	r3, r5
 8004fc0:	eb49 0303 	adc.w	r3, r9, r3
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	024b      	lsls	r3, r1, #9
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fdc:	4621      	mov	r1, r4
 8004fde:	024a      	lsls	r2, r1, #9
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ff0:	f7fb fc20 	bl	8000834 <__aeabi_uldivmod>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ffc:	e058      	b.n	80050b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ffe:	4b38      	ldr	r3, [pc, #224]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	099b      	lsrs	r3, r3, #6
 8005004:	2200      	movs	r2, #0
 8005006:	4618      	mov	r0, r3
 8005008:	4611      	mov	r1, r2
 800500a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800500e:	623b      	str	r3, [r7, #32]
 8005010:	2300      	movs	r3, #0
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
 8005014:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005018:	4642      	mov	r2, r8
 800501a:	464b      	mov	r3, r9
 800501c:	f04f 0000 	mov.w	r0, #0
 8005020:	f04f 0100 	mov.w	r1, #0
 8005024:	0159      	lsls	r1, r3, #5
 8005026:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800502a:	0150      	lsls	r0, r2, #5
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4641      	mov	r1, r8
 8005032:	ebb2 0a01 	subs.w	sl, r2, r1
 8005036:	4649      	mov	r1, r9
 8005038:	eb63 0b01 	sbc.w	fp, r3, r1
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005048:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800504c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005050:	ebb2 040a 	subs.w	r4, r2, sl
 8005054:	eb63 050b 	sbc.w	r5, r3, fp
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	00eb      	lsls	r3, r5, #3
 8005062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005066:	00e2      	lsls	r2, r4, #3
 8005068:	4614      	mov	r4, r2
 800506a:	461d      	mov	r5, r3
 800506c:	4643      	mov	r3, r8
 800506e:	18e3      	adds	r3, r4, r3
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	464b      	mov	r3, r9
 8005074:	eb45 0303 	adc.w	r3, r5, r3
 8005078:	607b      	str	r3, [r7, #4]
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005086:	4629      	mov	r1, r5
 8005088:	028b      	lsls	r3, r1, #10
 800508a:	4621      	mov	r1, r4
 800508c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005090:	4621      	mov	r1, r4
 8005092:	028a      	lsls	r2, r1, #10
 8005094:	4610      	mov	r0, r2
 8005096:	4619      	mov	r1, r3
 8005098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800509a:	2200      	movs	r2, #0
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	61fa      	str	r2, [r7, #28]
 80050a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050a4:	f7fb fbc6 	bl	8000834 <__aeabi_uldivmod>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4613      	mov	r3, r2
 80050ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	0c1b      	lsrs	r3, r3, #16
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	3301      	adds	r3, #1
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80050c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050ca:	e002      	b.n	80050d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050cc:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80050ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3750      	adds	r7, #80	; 0x50
 80050d8:	46bd      	mov	sp, r7
 80050da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050de:	bf00      	nop
 80050e0:	40023800 	.word	0x40023800
 80050e4:	00f42400 	.word	0x00f42400
 80050e8:	007a1200 	.word	0x007a1200

080050ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f0:	4b03      	ldr	r3, [pc, #12]	; (8005100 <HAL_RCC_GetHCLKFreq+0x14>)
 80050f2:	681b      	ldr	r3, [r3, #0]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20000000 	.word	0x20000000

08005104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005108:	f7ff fff0 	bl	80050ec <HAL_RCC_GetHCLKFreq>
 800510c:	4602      	mov	r2, r0
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	0a9b      	lsrs	r3, r3, #10
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	4903      	ldr	r1, [pc, #12]	; (8005128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800511a:	5ccb      	ldrb	r3, [r1, r3]
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40023800 	.word	0x40023800
 8005128:	08008d3c 	.word	0x08008d3c

0800512c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d105      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005150:	2b00      	cmp	r3, #0
 8005152:	d035      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005154:	4b62      	ldr	r3, [pc, #392]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800515a:	f7fc f9d3 	bl	8001504 <HAL_GetTick>
 800515e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005160:	e008      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005162:	f7fc f9cf 	bl	8001504 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e0b0      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005174:	4b5b      	ldr	r3, [pc, #364]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f0      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	019a      	lsls	r2, r3, #6
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	071b      	lsls	r3, r3, #28
 800518c:	4955      	ldr	r1, [pc, #340]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005194:	4b52      	ldr	r3, [pc, #328]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005196:	2201      	movs	r2, #1
 8005198:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800519a:	f7fc f9b3 	bl	8001504 <HAL_GetTick>
 800519e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051a0:	e008      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051a2:	f7fc f9af 	bl	8001504 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e090      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051b4:	4b4b      	ldr	r3, [pc, #300]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0f0      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8083 	beq.w	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	4b44      	ldr	r3, [pc, #272]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	4a43      	ldr	r2, [pc, #268]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051dc:	6413      	str	r3, [r2, #64]	; 0x40
 80051de:	4b41      	ldr	r3, [pc, #260]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051ea:	4b3f      	ldr	r3, [pc, #252]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a3e      	ldr	r2, [pc, #248]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051f6:	f7fc f985 	bl	8001504 <HAL_GetTick>
 80051fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051fc:	e008      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051fe:	f7fc f981 	bl	8001504 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e062      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005210:	4b35      	ldr	r3, [pc, #212]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f0      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800521c:	4b31      	ldr	r3, [pc, #196]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005224:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d02f      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	429a      	cmp	r2, r3
 8005238:	d028      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800523a:	4b2a      	ldr	r3, [pc, #168]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005242:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005244:	4b29      	ldr	r3, [pc, #164]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005246:	2201      	movs	r2, #1
 8005248:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800524a:	4b28      	ldr	r3, [pc, #160]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005250:	4a24      	ldr	r2, [pc, #144]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005256:	4b23      	ldr	r3, [pc, #140]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b01      	cmp	r3, #1
 8005260:	d114      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005262:	f7fc f94f 	bl	8001504 <HAL_GetTick>
 8005266:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005268:	e00a      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800526a:	f7fc f94b 	bl	8001504 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f241 3288 	movw	r2, #5000	; 0x1388
 8005278:	4293      	cmp	r3, r2
 800527a:	d901      	bls.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e02a      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005280:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0ee      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005298:	d10d      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800529a:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ae:	490d      	ldr	r1, [pc, #52]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	608b      	str	r3, [r1, #8]
 80052b4:	e005      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	4a0a      	ldr	r2, [pc, #40]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052bc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052c0:	6093      	str	r3, [r2, #8]
 80052c2:	4b08      	ldr	r3, [pc, #32]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ce:	4905      	ldr	r1, [pc, #20]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	42470068 	.word	0x42470068
 80052e4:	40023800 	.word	0x40023800
 80052e8:	40007000 	.word	0x40007000
 80052ec:	42470e40 	.word	0x42470e40

080052f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d13e      	bne.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800530e:	4b23      	ldr	r3, [pc, #140]	; (800539c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d12f      	bne.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005324:	4b1e      	ldr	r3, [pc, #120]	; (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005326:	617b      	str	r3, [r7, #20]
          break;
 8005328:	e02f      	b.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800532a:	4b1c      	ldr	r3, [pc, #112]	; (800539c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005336:	d108      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005338:	4b18      	ldr	r3, [pc, #96]	; (800539c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005340:	4a18      	ldr	r2, [pc, #96]	; (80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005342:	fbb2 f3f3 	udiv	r3, r2, r3
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	e007      	b.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800534a:	4b14      	ldr	r3, [pc, #80]	; (800539c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005352:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005354:	fbb2 f3f3 	udiv	r3, r2, r3
 8005358:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800535a:	4b10      	ldr	r3, [pc, #64]	; (800539c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800535c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005360:	099b      	lsrs	r3, r3, #6
 8005362:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	fb02 f303 	mul.w	r3, r2, r3
 800536c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800536e:	4b0b      	ldr	r3, [pc, #44]	; (800539c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005374:	0f1b      	lsrs	r3, r3, #28
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	617b      	str	r3, [r7, #20]
          break;
 8005382:	e002      	b.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]
          break;
 8005388:	bf00      	nop
        }
      }
      break;
 800538a:	bf00      	nop
    }
  }
  return frequency;
 800538c:	697b      	ldr	r3, [r7, #20]
}
 800538e:	4618      	mov	r0, r3
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40023800 	.word	0x40023800
 80053a0:	00bb8000 	.word	0x00bb8000
 80053a4:	007a1200 	.word	0x007a1200
 80053a8:	00f42400 	.word	0x00f42400

080053ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e07b      	b.n	80054b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d108      	bne.n	80053d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ce:	d009      	beq.n	80053e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	61da      	str	r2, [r3, #28]
 80053d6:	e005      	b.n	80053e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fb ff2c 	bl	800125c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005468:	ea42 0103 	orr.w	r1, r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	f003 0104 	and.w	r1, r3, #4
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	f003 0210 	and.w	r2, r3, #16
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054be:	b084      	sub	sp, #16
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	f107 001c 	add.w	r0, r7, #28
 80054cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d122      	bne.n	800551c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d105      	bne.n	8005510 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f9bf 	bl	8005894 <USB_CoreReset>
 8005516:	4603      	mov	r3, r0
 8005518:	73fb      	strb	r3, [r7, #15]
 800551a:	e01a      	b.n	8005552 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f9b3 	bl	8005894 <USB_CoreReset>
 800552e:	4603      	mov	r3, r0
 8005530:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d106      	bne.n	8005546 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	639a      	str	r2, [r3, #56]	; 0x38
 8005544:	e005      	b.n	8005552 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	2b01      	cmp	r3, #1
 8005556:	d10b      	bne.n	8005570 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f043 0206 	orr.w	r2, r3, #6
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800557c:	b004      	add	sp, #16
 800557e:	4770      	bx	lr

08005580 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f043 0201 	orr.w	r2, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f023 0201 	bic.w	r2, r3, #1
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d115      	bne.n	8005612 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055f2:	2001      	movs	r0, #1
 80055f4:	f7fb ff92 	bl	800151c <HAL_Delay>
      ms++;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f939 	bl	8005876 <USB_GetMode>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d01e      	beq.n	8005648 <USB_SetCurrentMode+0x84>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b31      	cmp	r3, #49	; 0x31
 800560e:	d9f0      	bls.n	80055f2 <USB_SetCurrentMode+0x2e>
 8005610:	e01a      	b.n	8005648 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d115      	bne.n	8005644 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005624:	2001      	movs	r0, #1
 8005626:	f7fb ff79 	bl	800151c <HAL_Delay>
      ms++;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3301      	adds	r3, #1
 800562e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f920 	bl	8005876 <USB_GetMode>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <USB_SetCurrentMode+0x84>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b31      	cmp	r3, #49	; 0x31
 8005640:	d9f0      	bls.n	8005624 <USB_SetCurrentMode+0x60>
 8005642:	e001      	b.n	8005648 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e005      	b.n	8005654 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b32      	cmp	r3, #50	; 0x32
 800564c:	d101      	bne.n	8005652 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3301      	adds	r3, #1
 800566e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a13      	ldr	r2, [pc, #76]	; (80056c0 <USB_FlushTxFifo+0x64>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d901      	bls.n	800567c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e01b      	b.n	80056b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	daf2      	bge.n	800566a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	019b      	lsls	r3, r3, #6
 800568c:	f043 0220 	orr.w	r2, r3, #32
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3301      	adds	r3, #1
 8005698:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a08      	ldr	r2, [pc, #32]	; (80056c0 <USB_FlushTxFifo+0x64>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d901      	bls.n	80056a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e006      	b.n	80056b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	d0f0      	beq.n	8005694 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	00030d40 	.word	0x00030d40

080056c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3301      	adds	r3, #1
 80056d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4a11      	ldr	r2, [pc, #68]	; (8005720 <USB_FlushRxFifo+0x5c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e018      	b.n	8005714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	daf2      	bge.n	80056d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2210      	movs	r2, #16
 80056f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3301      	adds	r3, #1
 80056f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4a08      	ldr	r2, [pc, #32]	; (8005720 <USB_FlushRxFifo+0x5c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e006      	b.n	8005714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b10      	cmp	r3, #16
 8005710:	d0f0      	beq.n	80056f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	00030d40 	.word	0x00030d40

08005724 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005724:	b480      	push	{r7}
 8005726:	b089      	sub	sp, #36	; 0x24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	4611      	mov	r1, r2
 8005730:	461a      	mov	r2, r3
 8005732:	460b      	mov	r3, r1
 8005734:	71fb      	strb	r3, [r7, #7]
 8005736:	4613      	mov	r3, r2
 8005738:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005746:	2b00      	cmp	r3, #0
 8005748:	d123      	bne.n	8005792 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800574a:	88bb      	ldrh	r3, [r7, #4]
 800574c:	3303      	adds	r3, #3
 800574e:	089b      	lsrs	r3, r3, #2
 8005750:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005752:	2300      	movs	r3, #0
 8005754:	61bb      	str	r3, [r7, #24]
 8005756:	e018      	b.n	800578a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	031a      	lsls	r2, r3, #12
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	4413      	add	r3, r2
 8005760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005764:	461a      	mov	r2, r3
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	3301      	adds	r3, #1
 8005770:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	3301      	adds	r3, #1
 8005776:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	3301      	adds	r3, #1
 800577c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	3301      	adds	r3, #1
 8005782:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	3301      	adds	r3, #1
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	429a      	cmp	r2, r3
 8005790:	d3e2      	bcc.n	8005758 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3724      	adds	r7, #36	; 0x24
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b08b      	sub	sp, #44	; 0x2c
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	4613      	mov	r3, r2
 80057ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	089b      	lsrs	r3, r3, #2
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057c6:	2300      	movs	r3, #0
 80057c8:	623b      	str	r3, [r7, #32]
 80057ca:	e014      	b.n	80057f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	3301      	adds	r3, #1
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	3301      	adds	r3, #1
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	3301      	adds	r3, #1
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	3301      	adds	r3, #1
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	3301      	adds	r3, #1
 80057f4:	623b      	str	r3, [r7, #32]
 80057f6:	6a3a      	ldr	r2, [r7, #32]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d3e6      	bcc.n	80057cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80057fe:	8bfb      	ldrh	r3, [r7, #30]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01e      	beq.n	8005842 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800580e:	461a      	mov	r2, r3
 8005810:	f107 0310 	add.w	r3, r7, #16
 8005814:	6812      	ldr	r2, [r2, #0]
 8005816:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
 8005824:	b2da      	uxtb	r2, r3
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	701a      	strb	r2, [r3, #0]
      i++;
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	3301      	adds	r3, #1
 800582e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	3301      	adds	r3, #1
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005836:	8bfb      	ldrh	r3, [r7, #30]
 8005838:	3b01      	subs	r3, #1
 800583a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800583c:	8bfb      	ldrh	r3, [r7, #30]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1ea      	bne.n	8005818 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005844:	4618      	mov	r0, r3
 8005846:	372c      	adds	r7, #44	; 0x2c
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4013      	ands	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005868:	68fb      	ldr	r3, [r7, #12]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0301 	and.w	r3, r3, #1
}
 8005886:	4618      	mov	r0, r3
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4a13      	ldr	r2, [pc, #76]	; (80058f8 <USB_CoreReset+0x64>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e01b      	b.n	80058ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	daf2      	bge.n	80058a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f043 0201 	orr.w	r2, r3, #1
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3301      	adds	r3, #1
 80058ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4a09      	ldr	r2, [pc, #36]	; (80058f8 <USB_CoreReset+0x64>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d901      	bls.n	80058dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e006      	b.n	80058ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d0f0      	beq.n	80058ca <USB_CoreReset+0x36>

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	00030d40 	.word	0x00030d40

080058fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058fc:	b084      	sub	sp, #16
 80058fe:	b580      	push	{r7, lr}
 8005900:	b086      	sub	sp, #24
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800590a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800591c:	461a      	mov	r2, r3
 800591e:	2300      	movs	r3, #0
 8005920:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594e:	2b00      	cmp	r3, #0
 8005950:	d018      	beq.n	8005984 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	2b01      	cmp	r3, #1
 8005956:	d10a      	bne.n	800596e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005966:	f043 0304 	orr.w	r3, r3, #4
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	e014      	b.n	8005998 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800597c:	f023 0304 	bic.w	r3, r3, #4
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	e009      	b.n	8005998 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005992:	f023 0304 	bic.w	r3, r3, #4
 8005996:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005998:	2110      	movs	r1, #16
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff fe5e 	bl	800565c <USB_FlushTxFifo>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fe8a 	bl	80056c4 <USB_FlushRxFifo>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80059ba:	2300      	movs	r3, #0
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	e015      	b.n	80059ec <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059cc:	461a      	mov	r2, r3
 80059ce:	f04f 33ff 	mov.w	r3, #4294967295
 80059d2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e0:	461a      	mov	r2, r3
 80059e2:	2300      	movs	r3, #0
 80059e4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	3301      	adds	r3, #1
 80059ea:	613b      	str	r3, [r7, #16]
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d3e5      	bcc.n	80059c0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005a00:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a14:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a13      	ldr	r2, [pc, #76]	; (8005a68 <USB_HostInit+0x16c>)
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <USB_HostInit+0x170>)
 8005a20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005a24:	e009      	b.n	8005a3a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2280      	movs	r2, #128	; 0x80
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a10      	ldr	r2, [pc, #64]	; (8005a70 <USB_HostInit+0x174>)
 8005a30:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a0f      	ldr	r2, [pc, #60]	; (8005a74 <USB_HostInit+0x178>)
 8005a36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d105      	bne.n	8005a4c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f043 0210 	orr.w	r2, r3, #16
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <USB_HostInit+0x17c>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a64:	b004      	add	sp, #16
 8005a66:	4770      	bx	lr
 8005a68:	01000200 	.word	0x01000200
 8005a6c:	00e00300 	.word	0x00e00300
 8005a70:	00600080 	.word	0x00600080
 8005a74:	004000e0 	.word	0x004000e0
 8005a78:	a3200008 	.word	0xa3200008

08005a7c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a9a:	f023 0303 	bic.w	r3, r3, #3
 8005a9e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	68f9      	ldr	r1, [r7, #12]
 8005ab0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d107      	bne.n	8005ace <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005aca:	6053      	str	r3, [r2, #4]
 8005acc:	e009      	b.n	8005ae2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d106      	bne.n	8005ae2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ada:	461a      	mov	r2, r3
 8005adc:	f241 7370 	movw	r3, #6000	; 0x1770
 8005ae0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b10:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005b20:	2064      	movs	r0, #100	; 0x64
 8005b22:	f7fb fcfb 	bl	800151c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b32:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005b34:	200a      	movs	r0, #10
 8005b36:	f7fb fcf1 	bl	800151c <HAL_Delay>

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b68:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d109      	bne.n	8005b88 <USB_DriveVbus+0x44>
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d106      	bne.n	8005b88 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b86:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b92:	d109      	bne.n	8005ba8 <USB_DriveVbus+0x64>
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ba6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	0c5b      	lsrs	r3, r3, #17
 8005bd4:	f003 0303 	and.w	r3, r3, #3
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	b29b      	uxth	r3, r3
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	4608      	mov	r0, r1
 8005c12:	4611      	mov	r1, r2
 8005c14:	461a      	mov	r2, r3
 8005c16:	4603      	mov	r3, r0
 8005c18:	70fb      	strb	r3, [r7, #3]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	70bb      	strb	r3, [r7, #2]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c36:	461a      	mov	r2, r3
 8005c38:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d87e      	bhi.n	8005d44 <USB_HC_Init+0x13c>
 8005c46:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <USB_HC_Init+0x44>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005c5d 	.word	0x08005c5d
 8005c50:	08005d07 	.word	0x08005d07
 8005c54:	08005c5d 	.word	0x08005c5d
 8005c58:	08005cc9 	.word	0x08005cc9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005c6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	da10      	bge.n	8005c9a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	78fa      	ldrb	r2, [r7, #3]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c96:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005c98:	e057      	b.n	8005d4a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d051      	beq.n	8005d4a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	78fa      	ldrb	r2, [r7, #3]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005cc4:	60d3      	str	r3, [r2, #12]
      break;
 8005cc6:	e040      	b.n	8005d4a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f240 639d 	movw	r3, #1693	; 0x69d
 8005cda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005cdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	da34      	bge.n	8005d4e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	78fa      	ldrb	r2, [r7, #3]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d02:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d04:	e023      	b.n	8005d4e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d06:	78fb      	ldrb	r3, [r7, #3]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d12:	461a      	mov	r2, r3
 8005d14:	f240 2325 	movw	r3, #549	; 0x225
 8005d18:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da17      	bge.n	8005d52 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	78fa      	ldrb	r2, [r7, #3]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d3c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005d40:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005d42:	e006      	b.n	8005d52 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	77fb      	strb	r3, [r7, #31]
      break;
 8005d48:	e004      	b.n	8005d54 <USB_HC_Init+0x14c>
      break;
 8005d4a:	bf00      	nop
 8005d4c:	e002      	b.n	8005d54 <USB_HC_Init+0x14c>
      break;
 8005d4e:	bf00      	nop
 8005d50:	e000      	b.n	8005d54 <USB_HC_Init+0x14c>
      break;
 8005d52:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	78fa      	ldrb	r2, [r7, #3]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6e:	f043 0302 	orr.w	r3, r3, #2
 8005d72:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d7a:	699a      	ldr	r2, [r3, #24]
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	2101      	movs	r1, #1
 8005d84:	fa01 f303 	lsl.w	r3, r1, r3
 8005d88:	6939      	ldr	r1, [r7, #16]
 8005d8a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	da03      	bge.n	8005dae <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005daa:	61bb      	str	r3, [r7, #24]
 8005dac:	e001      	b.n	8005db2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff feff 	bl	8005bb6 <USB_GetHostSpeed>
 8005db8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005dba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d106      	bne.n	8005dd0 <USB_HC_Init+0x1c8>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d003      	beq.n	8005dd0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	e001      	b.n	8005dd4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dd4:	787b      	ldrb	r3, [r7, #1]
 8005dd6:	059b      	lsls	r3, r3, #22
 8005dd8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ddc:	78bb      	ldrb	r3, [r7, #2]
 8005dde:	02db      	lsls	r3, r3, #11
 8005de0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005de4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005de6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005dea:	049b      	lsls	r3, r3, #18
 8005dec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005df0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005df2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005df4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005df8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dfe:	78fb      	ldrb	r3, [r7, #3]
 8005e00:	0159      	lsls	r1, r3, #5
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	440b      	add	r3, r1
 8005e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e10:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005e12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d003      	beq.n	8005e22 <USB_HC_Init+0x21a>
 8005e1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d10f      	bne.n	8005e42 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	78fa      	ldrb	r2, [r7, #3]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e40:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005e42:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3720      	adds	r7, #32
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08c      	sub	sp, #48	; 0x30
 8005e50:	af02      	add	r7, sp, #8
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	4613      	mov	r3, r2
 8005e58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e68:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d02d      	beq.n	8005ed2 <USB_HC_StartXfer+0x86>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	791b      	ldrb	r3, [r3, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d129      	bne.n	8005ed2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d117      	bne.n	8005eb4 <USB_HC_StartXfer+0x68>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	79db      	ldrb	r3, [r3, #7]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <USB_HC_StartXfer+0x48>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	79db      	ldrb	r3, [r3, #7]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d10f      	bne.n	8005eb4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	0151      	lsls	r1, r2, #5
 8005ea6:	6a3a      	ldr	r2, [r7, #32]
 8005ea8:	440a      	add	r2, r1
 8005eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10b      	bne.n	8005ed2 <USB_HC_StartXfer+0x86>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	795b      	ldrb	r3, [r3, #5]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d107      	bne.n	8005ed2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 fa0f 	bl	80062ec <USB_DoPing>
      return HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e0f8      	b.n	80060c4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d018      	beq.n	8005f0c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	8912      	ldrh	r2, [r2, #8]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	8912      	ldrh	r2, [r2, #8]
 8005eea:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eee:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005ef0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005ef2:	8b7b      	ldrh	r3, [r7, #26]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d90b      	bls.n	8005f10 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005ef8:	8b7b      	ldrh	r3, [r7, #26]
 8005efa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005efc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	8912      	ldrh	r2, [r2, #8]
 8005f02:	fb03 f202 	mul.w	r2, r3, r2
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	611a      	str	r2, [r3, #16]
 8005f0a:	e001      	b.n	8005f10 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	78db      	ldrb	r3, [r3, #3]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d007      	beq.n	8005f28 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	8912      	ldrh	r2, [r2, #8]
 8005f1e:	fb03 f202 	mul.w	r2, r3, r2
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	611a      	str	r2, [r3, #16]
 8005f26:	e003      	b.n	8005f30 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	695a      	ldr	r2, [r3, #20]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f3a:	04d9      	lsls	r1, r3, #19
 8005f3c:	4b63      	ldr	r3, [pc, #396]	; (80060cc <USB_HC_StartXfer+0x280>)
 8005f3e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f40:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	7a9b      	ldrb	r3, [r3, #10]
 8005f46:	075b      	lsls	r3, r3, #29
 8005f48:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f4c:	69f9      	ldr	r1, [r7, #28]
 8005f4e:	0148      	lsls	r0, r1, #5
 8005f50:	6a39      	ldr	r1, [r7, #32]
 8005f52:	4401      	add	r1, r0
 8005f54:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f58:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f5a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d009      	beq.n	8005f76 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	68d9      	ldr	r1, [r3, #12]
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f72:	460a      	mov	r2, r1
 8005f74:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	bf0c      	ite	eq
 8005f86:	2301      	moveq	r3, #1
 8005f88:	2300      	movne	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	0151      	lsls	r1, r2, #5
 8005fa0:	6a3a      	ldr	r2, [r7, #32]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	7e7b      	ldrb	r3, [r7, #25]
 8005fbe:	075b      	lsls	r3, r3, #29
 8005fc0:	69f9      	ldr	r1, [r7, #28]
 8005fc2:	0148      	lsls	r0, r1, #5
 8005fc4:	6a39      	ldr	r1, [r7, #32]
 8005fc6:	4401      	add	r1, r0
 8005fc8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fe6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	78db      	ldrb	r3, [r3, #3]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d004      	beq.n	8005ffa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	e003      	b.n	8006002 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006000:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006008:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	4413      	add	r3, r2
 8006012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006016:	461a      	mov	r2, r3
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	e04e      	b.n	80060c4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	78db      	ldrb	r3, [r3, #3]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d149      	bne.n	80060c2 <USB_HC_StartXfer+0x276>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d045      	beq.n	80060c2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	79db      	ldrb	r3, [r3, #7]
 800603a:	2b03      	cmp	r3, #3
 800603c:	d830      	bhi.n	80060a0 <USB_HC_StartXfer+0x254>
 800603e:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <USB_HC_StartXfer+0x1f8>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006055 	.word	0x08006055
 8006048:	08006079 	.word	0x08006079
 800604c:	08006055 	.word	0x08006055
 8006050:	08006079 	.word	0x08006079
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	3303      	adds	r3, #3
 800605a:	089b      	lsrs	r3, r3, #2
 800605c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800605e:	8afa      	ldrh	r2, [r7, #22]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	b29b      	uxth	r3, r3
 8006066:	429a      	cmp	r2, r3
 8006068:	d91c      	bls.n	80060a4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	f043 0220 	orr.w	r2, r3, #32
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	619a      	str	r2, [r3, #24]
        }
        break;
 8006076:	e015      	b.n	80060a4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	3303      	adds	r3, #3
 800607e:	089b      	lsrs	r3, r3, #2
 8006080:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006082:	8afa      	ldrh	r2, [r7, #22]
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	b29b      	uxth	r3, r3
 800608e:	429a      	cmp	r2, r3
 8006090:	d90a      	bls.n	80060a8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	619a      	str	r2, [r3, #24]
        }
        break;
 800609e:	e003      	b.n	80060a8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80060a0:	bf00      	nop
 80060a2:	e002      	b.n	80060aa <USB_HC_StartXfer+0x25e>
        break;
 80060a4:	bf00      	nop
 80060a6:	e000      	b.n	80060aa <USB_HC_StartXfer+0x25e>
        break;
 80060a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	68d9      	ldr	r1, [r3, #12]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	785a      	ldrb	r2, [r3, #1]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2000      	movs	r0, #0
 80060ba:	9000      	str	r0, [sp, #0]
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff fb31 	bl	8005724 <USB_WritePacket>
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3728      	adds	r7, #40	; 0x28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	1ff80000 	.word	0x1ff80000

080060d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	b29b      	uxth	r3, r3
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b089      	sub	sp, #36	; 0x24
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	4413      	add	r3, r2
 8006112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	0c9b      	lsrs	r3, r3, #18
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	0fdb      	lsrs	r3, r3, #31
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b20      	cmp	r3, #32
 8006140:	d104      	bne.n	800614c <USB_HC_Halt+0x5a>
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	e0c8      	b.n	80062de <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <USB_HC_Halt+0x66>
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d163      	bne.n	8006220 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	4413      	add	r3, r2
 8006160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	440a      	add	r2, r1
 800616e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006172:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006176:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 0320 	and.w	r3, r3, #32
 8006180:	2b00      	cmp	r3, #0
 8006182:	f040 80ab 	bne.w	80062dc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d133      	bne.n	80061fa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	4413      	add	r3, r2
 800619a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061b0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	69fa      	ldr	r2, [r7, #28]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061d0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3301      	adds	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061de:	d81d      	bhi.n	800621c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f6:	d0ec      	beq.n	80061d2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061f8:	e070      	b.n	80062dc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	4413      	add	r3, r2
 8006202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	440a      	add	r2, r1
 8006210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006218:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800621a:	e05f      	b.n	80062dc <USB_HC_Halt+0x1ea>
            break;
 800621c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800621e:	e05d      	b.n	80062dc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4413      	add	r3, r2
 8006228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	440a      	add	r2, r1
 8006236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800623e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d133      	bne.n	80062b8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	4413      	add	r3, r2
 8006258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	0151      	lsls	r1, r2, #5
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	440a      	add	r2, r1
 8006266:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800626a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800626e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	440a      	add	r2, r1
 8006286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800628a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800628e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	3301      	adds	r3, #1
 8006294:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800629c:	d81d      	bhi.n	80062da <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062b4:	d0ec      	beq.n	8006290 <USB_HC_Halt+0x19e>
 80062b6:	e011      	b.n	80062dc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	0151      	lsls	r1, r2, #5
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	440a      	add	r2, r1
 80062ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	e000      	b.n	80062dc <USB_HC_Halt+0x1ea>
          break;
 80062da:	bf00      	nop
    }
  }

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3724      	adds	r7, #36	; 0x24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006300:	2301      	movs	r3, #1
 8006302:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	04da      	lsls	r2, r3, #19
 8006308:	4b15      	ldr	r3, [pc, #84]	; (8006360 <USB_DoPing+0x74>)
 800630a:	4013      	ands	r3, r2
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	440a      	add	r2, r1
 8006314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800631c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	4413      	add	r3, r2
 8006326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006334:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800633c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	4413      	add	r3, r2
 8006346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634a:	461a      	mov	r2, r3
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	1ff80000 	.word	0x1ff80000

08006364 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff f912 	bl	80055a2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800637e:	2110      	movs	r1, #16
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff f96b 	bl	800565c <USB_FlushTxFifo>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff f997 	bl	80056c4 <USB_FlushRxFifo>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80063a0:	2300      	movs	r3, #0
 80063a2:	61bb      	str	r3, [r7, #24]
 80063a4:	e01f      	b.n	80063e6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063da:	461a      	mov	r2, r3
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	3301      	adds	r3, #1
 80063e4:	61bb      	str	r3, [r7, #24]
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b0f      	cmp	r3, #15
 80063ea:	d9dc      	bls.n	80063a6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80063ec:	2300      	movs	r3, #0
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	e034      	b.n	800645c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006408:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006410:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006418:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	4413      	add	r3, r2
 8006422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006426:	461a      	mov	r2, r3
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	3301      	adds	r3, #1
 8006430:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006438:	d80c      	bhi.n	8006454 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	4413      	add	r3, r2
 8006442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800644c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006450:	d0ec      	beq.n	800642c <USB_StopHost+0xc8>
 8006452:	e000      	b.n	8006456 <USB_StopHost+0xf2>
        break;
 8006454:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	3301      	adds	r3, #1
 800645a:	61bb      	str	r3, [r7, #24]
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	2b0f      	cmp	r3, #15
 8006460:	d9c7      	bls.n	80063f2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006468:	461a      	mov	r2, r3
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
 800646e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f04f 32ff 	mov.w	r2, #4294967295
 8006476:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff f881 	bl	8005580 <USB_EnableGlobalInt>

  return ret;
 800647e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3720      	adds	r7, #32
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006488:	b590      	push	{r4, r7, lr}
 800648a:	b089      	sub	sp, #36	; 0x24
 800648c:	af04      	add	r7, sp, #16
 800648e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006490:	2301      	movs	r3, #1
 8006492:	2202      	movs	r2, #2
 8006494:	2102      	movs	r1, #2
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fc66 	bl	8006d68 <USBH_FindInterface>
 800649c:	4603      	mov	r3, r0
 800649e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	2bff      	cmp	r3, #255	; 0xff
 80064a4:	d002      	beq.n	80064ac <USBH_CDC_InterfaceInit+0x24>
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d901      	bls.n	80064b0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80064ac:	2302      	movs	r3, #2
 80064ae:	e13d      	b.n	800672c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fc3b 	bl	8006d30 <USBH_SelectInterface>
 80064ba:	4603      	mov	r3, r0
 80064bc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80064be:	7bbb      	ldrb	r3, [r7, #14]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80064c4:	2302      	movs	r3, #2
 80064c6:	e131      	b.n	800672c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80064ce:	2050      	movs	r0, #80	; 0x50
 80064d0:	f002 fad2 	bl	8008a78 <malloc>
 80064d4:	4603      	mov	r3, r0
 80064d6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80064e8:	2302      	movs	r3, #2
 80064ea:	e11f      	b.n	800672c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80064ec:	2250      	movs	r2, #80	; 0x50
 80064ee:	2100      	movs	r1, #0
 80064f0:	68b8      	ldr	r0, [r7, #8]
 80064f2:	f002 fb7d 	bl	8008bf0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	211a      	movs	r1, #26
 80064fc:	fb01 f303 	mul.w	r3, r1, r3
 8006500:	4413      	add	r3, r2
 8006502:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	b25b      	sxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	da15      	bge.n	800653a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800650e:	7bfb      	ldrb	r3, [r7, #15]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	211a      	movs	r1, #26
 8006514:	fb01 f303 	mul.w	r3, r1, r3
 8006518:	4413      	add	r3, r2
 800651a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800651e:	781a      	ldrb	r2, [r3, #0]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	211a      	movs	r1, #26
 800652a:	fb01 f303 	mul.w	r3, r1, r3
 800652e:	4413      	add	r3, r2
 8006530:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006534:	881a      	ldrh	r2, [r3, #0]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 ff2e 	bl	80083a2 <USBH_AllocPipe>
 8006546:	4603      	mov	r3, r0
 8006548:	461a      	mov	r2, r3
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	7819      	ldrb	r1, [r3, #0]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	7858      	ldrb	r0, [r3, #1]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	8952      	ldrh	r2, [r2, #10]
 8006566:	9202      	str	r2, [sp, #8]
 8006568:	2203      	movs	r2, #3
 800656a:	9201      	str	r2, [sp, #4]
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	4623      	mov	r3, r4
 8006570:	4602      	mov	r2, r0
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 fee6 	bl	8008344 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2200      	movs	r2, #0
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f002 f9f5 	bl	8008970 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006586:	2300      	movs	r3, #0
 8006588:	2200      	movs	r2, #0
 800658a:	210a      	movs	r1, #10
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fbeb 	bl	8006d68 <USBH_FindInterface>
 8006592:	4603      	mov	r3, r0
 8006594:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	2bff      	cmp	r3, #255	; 0xff
 800659a:	d002      	beq.n	80065a2 <USBH_CDC_InterfaceInit+0x11a>
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d901      	bls.n	80065a6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065a2:	2302      	movs	r3, #2
 80065a4:	e0c2      	b.n	800672c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	211a      	movs	r1, #26
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	b25b      	sxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	da16      	bge.n	80065ec <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	211a      	movs	r1, #26
 80065c4:	fb01 f303 	mul.w	r3, r1, r3
 80065c8:	4413      	add	r3, r2
 80065ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065ce:	781a      	ldrb	r2, [r3, #0]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	211a      	movs	r1, #26
 80065da:	fb01 f303 	mul.w	r3, r1, r3
 80065de:	4413      	add	r3, r2
 80065e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80065e4:	881a      	ldrh	r2, [r3, #0]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	835a      	strh	r2, [r3, #26]
 80065ea:	e015      	b.n	8006618 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	211a      	movs	r1, #26
 80065f2:	fb01 f303 	mul.w	r3, r1, r3
 80065f6:	4413      	add	r3, r2
 80065f8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065fc:	781a      	ldrb	r2, [r3, #0]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	211a      	movs	r1, #26
 8006608:	fb01 f303 	mul.w	r3, r1, r3
 800660c:	4413      	add	r3, r2
 800660e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006612:	881a      	ldrh	r2, [r3, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	211a      	movs	r1, #26
 800661e:	fb01 f303 	mul.w	r3, r1, r3
 8006622:	4413      	add	r3, r2
 8006624:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	b25b      	sxtb	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	da16      	bge.n	800665e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	211a      	movs	r1, #26
 8006636:	fb01 f303 	mul.w	r3, r1, r3
 800663a:	4413      	add	r3, r2
 800663c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006640:	781a      	ldrb	r2, [r3, #0]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	211a      	movs	r1, #26
 800664c:	fb01 f303 	mul.w	r3, r1, r3
 8006650:	4413      	add	r3, r2
 8006652:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006656:	881a      	ldrh	r2, [r3, #0]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	835a      	strh	r2, [r3, #26]
 800665c:	e015      	b.n	800668a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	211a      	movs	r1, #26
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	4413      	add	r3, r2
 800666a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800666e:	781a      	ldrb	r2, [r3, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	211a      	movs	r1, #26
 800667a:	fb01 f303 	mul.w	r3, r1, r3
 800667e:	4413      	add	r3, r2
 8006680:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006684:	881a      	ldrh	r2, [r3, #0]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	7b9b      	ldrb	r3, [r3, #14]
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 fe86 	bl	80083a2 <USBH_AllocPipe>
 8006696:	4603      	mov	r3, r0
 8006698:	461a      	mov	r2, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	7bdb      	ldrb	r3, [r3, #15]
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 fe7c 	bl	80083a2 <USBH_AllocPipe>
 80066aa:	4603      	mov	r3, r0
 80066ac:	461a      	mov	r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	7b59      	ldrb	r1, [r3, #13]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	7b98      	ldrb	r0, [r3, #14]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	8b12      	ldrh	r2, [r2, #24]
 80066ca:	9202      	str	r2, [sp, #8]
 80066cc:	2202      	movs	r2, #2
 80066ce:	9201      	str	r2, [sp, #4]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	4623      	mov	r3, r4
 80066d4:	4602      	mov	r2, r0
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 fe34 	bl	8008344 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	7b19      	ldrb	r1, [r3, #12]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	7bd8      	ldrb	r0, [r3, #15]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	8b52      	ldrh	r2, [r2, #26]
 80066f4:	9202      	str	r2, [sp, #8]
 80066f6:	2202      	movs	r2, #2
 80066f8:	9201      	str	r2, [sp, #4]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	4623      	mov	r3, r4
 80066fe:	4602      	mov	r2, r0
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fe1f 	bl	8008344 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	7b5b      	ldrb	r3, [r3, #13]
 8006712:	2200      	movs	r2, #0
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f002 f92a 	bl	8008970 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	7b1b      	ldrb	r3, [r3, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f002 f923 	bl	8008970 <USBH_LL_SetToggle>

  return USBH_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	bd90      	pop	{r4, r7, pc}

08006734 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00e      	beq.n	800676c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fe14 	bl	8008382 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 fe3f 	bl	80083e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	7b1b      	ldrb	r3, [r3, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00e      	beq.n	8006792 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	7b1b      	ldrb	r3, [r3, #12]
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 fe01 	bl	8008382 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	7b1b      	ldrb	r3, [r3, #12]
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 fe2c 	bl	80083e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	7b5b      	ldrb	r3, [r3, #13]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00e      	beq.n	80067b8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	7b5b      	ldrb	r3, [r3, #13]
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 fdee 	bl	8008382 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	7b5b      	ldrb	r3, [r3, #13]
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 fe19 	bl	80083e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f002 f95b 	bl	8008a88 <free>
    phost->pActiveClass->pData = 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067d8:	2200      	movs	r2, #0
 80067da:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3340      	adds	r3, #64	; 0x40
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f8b1 	bl	8006966 <GetLineCoding>
 8006804:	4603      	mov	r3, r0
 8006806:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d105      	bne.n	800681a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006814:	2102      	movs	r1, #2
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800681a:	7afb      	ldrb	r3, [r7, #11]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800682c:	2301      	movs	r3, #1
 800682e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006844:	2b04      	cmp	r3, #4
 8006846:	d877      	bhi.n	8006938 <USBH_CDC_Process+0x114>
 8006848:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <USBH_CDC_Process+0x2c>)
 800684a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684e:	bf00      	nop
 8006850:	08006865 	.word	0x08006865
 8006854:	0800686b 	.word	0x0800686b
 8006858:	0800689b 	.word	0x0800689b
 800685c:	0800690f 	.word	0x0800690f
 8006860:	0800691d 	.word	0x0800691d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]
      break;
 8006868:	e06d      	b.n	8006946 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f897 	bl	80069a4 <SetLineCoding>
 8006876:	4603      	mov	r3, r0
 8006878:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800687a:	7bbb      	ldrb	r3, [r7, #14]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006888:	e058      	b.n	800693c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800688a:	7bbb      	ldrb	r3, [r7, #14]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d055      	beq.n	800693c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2204      	movs	r2, #4
 8006894:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006898:	e050      	b.n	800693c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	3340      	adds	r3, #64	; 0x40
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f860 	bl	8006966 <GetLineCoding>
 80068a6:	4603      	mov	r3, r0
 80068a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068aa:	7bbb      	ldrb	r3, [r7, #14]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d126      	bne.n	80068fe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068c2:	791b      	ldrb	r3, [r3, #4]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d13b      	bne.n	8006940 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d133      	bne.n	8006940 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d12b      	bne.n	8006940 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d124      	bne.n	8006940 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f958 	bl	8006bac <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80068fc:	e020      	b.n	8006940 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d01d      	beq.n	8006940 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2204      	movs	r2, #4
 8006908:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800690c:	e018      	b.n	8006940 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f867 	bl	80069e2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f8da 	bl	8006ace <CDC_ProcessReception>
      break;
 800691a:	e014      	b.n	8006946 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800691c:	2100      	movs	r1, #0
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 ffef 	bl	8007902 <USBH_ClrFeature>
 8006924:	4603      	mov	r3, r0
 8006926:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006936:	e005      	b.n	8006944 <USBH_CDC_Process+0x120>

    default:
      break;
 8006938:	bf00      	nop
 800693a:	e004      	b.n	8006946 <USBH_CDC_Process+0x122>
      break;
 800693c:	bf00      	nop
 800693e:	e002      	b.n	8006946 <USBH_CDC_Process+0x122>
      break;
 8006940:	bf00      	nop
 8006942:	e000      	b.n	8006946 <USBH_CDC_Process+0x122>
      break;
 8006944:	bf00      	nop

  }

  return status;
 8006946:	7bfb      	ldrb	r3, [r7, #15]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	22a1      	movs	r2, #161	; 0xa1
 8006974:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2221      	movs	r2, #33	; 0x21
 800697a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2207      	movs	r2, #7
 800698c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2207      	movs	r2, #7
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 fa83 	bl	8007ea0 <USBH_CtlReq>
 800699a:	4603      	mov	r3, r0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2221      	movs	r2, #33	; 0x21
 80069b2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2207      	movs	r2, #7
 80069ca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2207      	movs	r2, #7
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 fa64 	bl	8007ea0 <USBH_CtlReq>
 80069d8:	4603      	mov	r3, r0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b086      	sub	sp, #24
 80069e6:	af02      	add	r7, sp, #8
 80069e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d002      	beq.n	8006a08 <CDC_ProcessTransmission+0x26>
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d023      	beq.n	8006a4e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006a06:	e05e      	b.n	8006ac6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	8b12      	ldrh	r2, [r2, #24]
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d90b      	bls.n	8006a2c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	69d9      	ldr	r1, [r3, #28]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8b1a      	ldrh	r2, [r3, #24]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	7b5b      	ldrb	r3, [r3, #13]
 8006a20:	2001      	movs	r0, #1
 8006a22:	9000      	str	r0, [sp, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 fc4a 	bl	80082be <USBH_BulkSendData>
 8006a2a:	e00b      	b.n	8006a44 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	7b5b      	ldrb	r3, [r3, #13]
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	9000      	str	r0, [sp, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fc3d 	bl	80082be <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006a4c:	e03b      	b.n	8006ac6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	7b5b      	ldrb	r3, [r3, #13]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 ff61 	bl	800891c <USBH_LL_GetURBState>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006a5e:	7afb      	ldrb	r3, [r7, #11]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d128      	bne.n	8006ab6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	8b12      	ldrh	r2, [r2, #24]
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d90e      	bls.n	8006a8e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	8b12      	ldrh	r2, [r2, #24]
 8006a78:	1a9a      	subs	r2, r3, r2
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	8b12      	ldrh	r2, [r2, #24]
 8006a86:	441a      	add	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	61da      	str	r2, [r3, #28]
 8006a8c:	e002      	b.n	8006a94 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d004      	beq.n	8006aa6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006aa4:	e00e      	b.n	8006ac4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f868 	bl	8006b84 <USBH_CDC_TransmitCallback>
      break;
 8006ab4:	e006      	b.n	8006ac4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006ab6:	7afb      	ldrb	r3, [r7, #11]
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d103      	bne.n	8006ac4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ac4:	bf00      	nop
  }
}
 8006ac6:	bf00      	nop
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b086      	sub	sp, #24
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d002      	beq.n	8006af4 <CDC_ProcessReception+0x26>
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d00e      	beq.n	8006b10 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006af2:	e043      	b.n	8006b7c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	6a19      	ldr	r1, [r3, #32]
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	8b5a      	ldrh	r2, [r3, #26]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	7b1b      	ldrb	r3, [r3, #12]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f001 fc01 	bl	8008308 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2204      	movs	r2, #4
 8006b0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b0e:	e035      	b.n	8006b7c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	7b1b      	ldrb	r3, [r3, #12]
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 ff00 	bl	800891c <USBH_LL_GetURBState>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006b20:	7cfb      	ldrb	r3, [r7, #19]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d129      	bne.n	8006b7a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	7b1b      	ldrb	r3, [r3, #12]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 fe63 	bl	80087f8 <USBH_LL_GetLastXferSize>
 8006b32:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d016      	beq.n	8006b6c <CDC_ProcessReception+0x9e>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	8b5b      	ldrh	r3, [r3, #26]
 8006b42:	461a      	mov	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d910      	bls.n	8006b6c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	1ad2      	subs	r2, r2, r3
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	6a1a      	ldr	r2, [r3, #32]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	441a      	add	r2, r3
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2203      	movs	r2, #3
 8006b66:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b6a:	e006      	b.n	8006b7a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f80f 	bl	8006b98 <USBH_CDC_ReceiveCallback>
      break;
 8006b7a:	bf00      	nop
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	e029      	b.n	8006c2c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	79fa      	ldrb	r2, [r7, #7]
 8006bdc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 f81f 	bl	8006c34 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f001 fd33 	bl	8008690 <USBH_LL_Init>

  return USBH_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	e009      	b.n	8006c5a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	33e0      	adds	r3, #224	; 0xe0
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	2200      	movs	r2, #0
 8006c52:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b0f      	cmp	r3, #15
 8006c5e:	d9f2      	bls.n	8006c46 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e009      	b.n	8006c7a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3301      	adds	r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c80:	d3f1      	bcc.n	8006c66 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2240      	movs	r2, #64	; 0x40
 8006ca6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d016      	beq.n	8006d1e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10e      	bne.n	8006d18 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d00:	1c59      	adds	r1, r3, #1
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	33de      	adds	r3, #222	; 0xde
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]
 8006d16:	e004      	b.n	8006d22 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	73fb      	strb	r3, [r7, #15]
 8006d1c:	e001      	b.n	8006d22 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d204      	bcs.n	8006d56 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	78fa      	ldrb	r2, [r7, #3]
 8006d50:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006d54:	e001      	b.n	8006d5a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d56:	2302      	movs	r3, #2
 8006d58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	4608      	mov	r0, r1
 8006d72:	4611      	mov	r1, r2
 8006d74:	461a      	mov	r2, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	70fb      	strb	r3, [r7, #3]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	70bb      	strb	r3, [r7, #2]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006d90:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d92:	e025      	b.n	8006de0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	221a      	movs	r2, #26
 8006d98:	fb02 f303 	mul.w	r3, r2, r3
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	3302      	adds	r3, #2
 8006da4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	795b      	ldrb	r3, [r3, #5]
 8006daa:	78fa      	ldrb	r2, [r7, #3]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d002      	beq.n	8006db6 <USBH_FindInterface+0x4e>
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	2bff      	cmp	r3, #255	; 0xff
 8006db4:	d111      	bne.n	8006dda <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006dba:	78ba      	ldrb	r2, [r7, #2]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d002      	beq.n	8006dc6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006dc0:	78bb      	ldrb	r3, [r7, #2]
 8006dc2:	2bff      	cmp	r3, #255	; 0xff
 8006dc4:	d109      	bne.n	8006dda <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006dca:	787a      	ldrb	r2, [r7, #1]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d002      	beq.n	8006dd6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006dd0:	787b      	ldrb	r3, [r7, #1]
 8006dd2:	2bff      	cmp	r3, #255	; 0xff
 8006dd4:	d101      	bne.n	8006dda <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	e006      	b.n	8006de8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d9d6      	bls.n	8006d94 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006de6:	23ff      	movs	r3, #255	; 0xff
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	371c      	adds	r7, #28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 fc83 	bl	8008708 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006e02:	2101      	movs	r1, #1
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 fd9c 	bl	8008942 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af04      	add	r7, sp, #16
 8006e1a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d102      	bne.n	8006e36 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2203      	movs	r2, #3
 8006e34:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b0b      	cmp	r3, #11
 8006e3e:	f200 81be 	bhi.w	80071be <USBH_Process+0x3aa>
 8006e42:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <USBH_Process+0x34>)
 8006e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e48:	08006e79 	.word	0x08006e79
 8006e4c:	08006eab 	.word	0x08006eab
 8006e50:	08006f13 	.word	0x08006f13
 8006e54:	08007159 	.word	0x08007159
 8006e58:	080071bf 	.word	0x080071bf
 8006e5c:	08006fb7 	.word	0x08006fb7
 8006e60:	080070ff 	.word	0x080070ff
 8006e64:	08006fed 	.word	0x08006fed
 8006e68:	0800700d 	.word	0x0800700d
 8006e6c:	0800702d 	.word	0x0800702d
 8006e70:	08007071 	.word	0x08007071
 8006e74:	08007141 	.word	0x08007141
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 819e 	beq.w	80071c2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006e8c:	20c8      	movs	r0, #200	; 0xc8
 8006e8e:	f001 fd9f 	bl	80089d0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 fc95 	bl	80087c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ea8:	e18b      	b.n	80071c2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d107      	bne.n	8006ec4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ec2:	e18d      	b.n	80071e0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ece:	d914      	bls.n	8006efa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d903      	bls.n	8006ef2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	220d      	movs	r2, #13
 8006eee:	701a      	strb	r2, [r3, #0]
      break;
 8006ef0:	e176      	b.n	80071e0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	701a      	strb	r2, [r3, #0]
      break;
 8006ef8:	e172      	b.n	80071e0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f00:	f103 020a 	add.w	r2, r3, #10
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006f0a:	200a      	movs	r0, #10
 8006f0c:	f001 fd60 	bl	80089d0 <USBH_Delay>
      break;
 8006f10:	e166      	b.n	80071e0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f22:	2104      	movs	r1, #4
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006f28:	2064      	movs	r0, #100	; 0x64
 8006f2a:	f001 fd51 	bl	80089d0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f001 fc20 	bl	8008774 <USBH_LL_GetSpeed>
 8006f34:	4603      	mov	r3, r0
 8006f36:	461a      	mov	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2205      	movs	r2, #5
 8006f42:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006f44:	2100      	movs	r1, #0
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fa2b 	bl	80083a2 <USBH_AllocPipe>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006f54:	2180      	movs	r1, #128	; 0x80
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 fa23 	bl	80083a2 <USBH_AllocPipe>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	461a      	mov	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	7919      	ldrb	r1, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f78:	b292      	uxth	r2, r2
 8006f7a:	9202      	str	r2, [sp, #8]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	9201      	str	r2, [sp, #4]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	4603      	mov	r3, r0
 8006f84:	2280      	movs	r2, #128	; 0x80
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 f9dc 	bl	8008344 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	7959      	ldrb	r1, [r3, #5]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006fa0:	b292      	uxth	r2, r2
 8006fa2:	9202      	str	r2, [sp, #8]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	9201      	str	r2, [sp, #4]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	4603      	mov	r3, r0
 8006fac:	2200      	movs	r2, #0
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 f9c8 	bl	8008344 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fb4:	e114      	b.n	80071e0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f918 	bl	80071ec <USBH_HandleEnum>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006fc0:	7bbb      	ldrb	r3, [r7, #14]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f040 80fe 	bne.w	80071c6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d103      	bne.n	8006fe4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2208      	movs	r2, #8
 8006fe0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006fe2:	e0f0      	b.n	80071c6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2207      	movs	r2, #7
 8006fe8:	701a      	strb	r2, [r3, #0]
      break;
 8006fea:	e0ec      	b.n	80071c6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 80e9 	beq.w	80071ca <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ffe:	2101      	movs	r1, #1
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2208      	movs	r2, #8
 8007008:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800700a:	e0de      	b.n	80071ca <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007012:	b29b      	uxth	r3, r3
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fc2c 	bl	8007874 <USBH_SetCfg>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	f040 80d5 	bne.w	80071ce <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2209      	movs	r2, #9
 8007028:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800702a:	e0d0      	b.n	80071ce <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007032:	f003 0320 	and.w	r3, r3, #32
 8007036:	2b00      	cmp	r3, #0
 8007038:	d016      	beq.n	8007068 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800703a:	2101      	movs	r1, #1
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fc3c 	bl	80078ba <USBH_SetFeature>
 8007042:	4603      	mov	r3, r0
 8007044:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007046:	7bbb      	ldrb	r3, [r7, #14]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	220a      	movs	r2, #10
 8007052:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007054:	e0bd      	b.n	80071d2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007056:	7bbb      	ldrb	r3, [r7, #14]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b03      	cmp	r3, #3
 800705c:	f040 80b9 	bne.w	80071d2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	220a      	movs	r2, #10
 8007064:	701a      	strb	r2, [r3, #0]
      break;
 8007066:	e0b4      	b.n	80071d2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	220a      	movs	r2, #10
 800706c:	701a      	strb	r2, [r3, #0]
      break;
 800706e:	e0b0      	b.n	80071d2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 80ad 	beq.w	80071d6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007084:	2300      	movs	r3, #0
 8007086:	73fb      	strb	r3, [r7, #15]
 8007088:	e016      	b.n	80070b8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800708a:	7bfa      	ldrb	r2, [r7, #15]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	32de      	adds	r2, #222	; 0xde
 8007090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007094:	791a      	ldrb	r2, [r3, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800709c:	429a      	cmp	r2, r3
 800709e:	d108      	bne.n	80070b2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80070a0:	7bfa      	ldrb	r2, [r7, #15]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	32de      	adds	r2, #222	; 0xde
 80070a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80070b0:	e005      	b.n	80070be <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	3301      	adds	r3, #1
 80070b6:	73fb      	strb	r3, [r7, #15]
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0e5      	beq.n	800708a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d016      	beq.n	80070f6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	4798      	blx	r3
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d109      	bne.n	80070ee <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2206      	movs	r2, #6
 80070de:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070e6:	2103      	movs	r1, #3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070ec:	e073      	b.n	80071d6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	220d      	movs	r2, #13
 80070f2:	701a      	strb	r2, [r3, #0]
      break;
 80070f4:	e06f      	b.n	80071d6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	220d      	movs	r2, #13
 80070fa:	701a      	strb	r2, [r3, #0]
      break;
 80070fc:	e06b      	b.n	80071d6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d017      	beq.n	8007138 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	4798      	blx	r3
 8007114:	4603      	mov	r3, r0
 8007116:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007118:	7bbb      	ldrb	r3, [r7, #14]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d103      	bne.n	8007128 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	220b      	movs	r2, #11
 8007124:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007126:	e058      	b.n	80071da <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d154      	bne.n	80071da <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	220d      	movs	r2, #13
 8007134:	701a      	strb	r2, [r3, #0]
      break;
 8007136:	e050      	b.n	80071da <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	220d      	movs	r2, #13
 800713c:	701a      	strb	r2, [r3, #0]
      break;
 800713e:	e04c      	b.n	80071da <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007146:	2b00      	cmp	r3, #0
 8007148:	d049      	beq.n	80071de <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	4798      	blx	r3
      }
      break;
 8007156:	e042      	b.n	80071de <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff fd67 	bl	8006c34 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d009      	beq.n	8007184 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007194:	2105      	movs	r1, #5
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d107      	bne.n	80071b6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff fe20 	bl	8006df4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80071b4:	e014      	b.n	80071e0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 faa6 	bl	8008708 <USBH_LL_Start>
      break;
 80071bc:	e010      	b.n	80071e0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80071be:	bf00      	nop
 80071c0:	e00e      	b.n	80071e0 <USBH_Process+0x3cc>
      break;
 80071c2:	bf00      	nop
 80071c4:	e00c      	b.n	80071e0 <USBH_Process+0x3cc>
      break;
 80071c6:	bf00      	nop
 80071c8:	e00a      	b.n	80071e0 <USBH_Process+0x3cc>
    break;
 80071ca:	bf00      	nop
 80071cc:	e008      	b.n	80071e0 <USBH_Process+0x3cc>
      break;
 80071ce:	bf00      	nop
 80071d0:	e006      	b.n	80071e0 <USBH_Process+0x3cc>
      break;
 80071d2:	bf00      	nop
 80071d4:	e004      	b.n	80071e0 <USBH_Process+0x3cc>
      break;
 80071d6:	bf00      	nop
 80071d8:	e002      	b.n	80071e0 <USBH_Process+0x3cc>
      break;
 80071da:	bf00      	nop
 80071dc:	e000      	b.n	80071e0 <USBH_Process+0x3cc>
      break;
 80071de:	bf00      	nop
  }
  return USBH_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop

080071ec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af04      	add	r7, sp, #16
 80071f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80071f4:	2301      	movs	r3, #1
 80071f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80071f8:	2301      	movs	r3, #1
 80071fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	785b      	ldrb	r3, [r3, #1]
 8007200:	2b07      	cmp	r3, #7
 8007202:	f200 81c1 	bhi.w	8007588 <USBH_HandleEnum+0x39c>
 8007206:	a201      	add	r2, pc, #4	; (adr r2, 800720c <USBH_HandleEnum+0x20>)
 8007208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720c:	0800722d 	.word	0x0800722d
 8007210:	080072eb 	.word	0x080072eb
 8007214:	08007355 	.word	0x08007355
 8007218:	080073e3 	.word	0x080073e3
 800721c:	0800744d 	.word	0x0800744d
 8007220:	080074bd 	.word	0x080074bd
 8007224:	08007503 	.word	0x08007503
 8007228:	08007549 	.word	0x08007549
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800722c:	2108      	movs	r1, #8
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fa50 	bl	80076d4 <USBH_Get_DevDesc>
 8007234:	4603      	mov	r3, r0
 8007236:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d130      	bne.n	80072a0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	7919      	ldrb	r1, [r3, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007262:	b292      	uxth	r2, r2
 8007264:	9202      	str	r2, [sp, #8]
 8007266:	2200      	movs	r2, #0
 8007268:	9201      	str	r2, [sp, #4]
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	4603      	mov	r3, r0
 800726e:	2280      	movs	r2, #128	; 0x80
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 f867 	bl	8008344 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	7959      	ldrb	r1, [r3, #5]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800728a:	b292      	uxth	r2, r2
 800728c:	9202      	str	r2, [sp, #8]
 800728e:	2200      	movs	r2, #0
 8007290:	9201      	str	r2, [sp, #4]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	4603      	mov	r3, r0
 8007296:	2200      	movs	r2, #0
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f853 	bl	8008344 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800729e:	e175      	b.n	800758c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	f040 8172 	bne.w	800758c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072ae:	3301      	adds	r3, #1
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d903      	bls.n	80072ca <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	220d      	movs	r2, #13
 80072c6:	701a      	strb	r2, [r3, #0]
      break;
 80072c8:	e160      	b.n	800758c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	795b      	ldrb	r3, [r3, #5]
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 f887 	bl	80083e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	791b      	ldrb	r3, [r3, #4]
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f881 	bl	80083e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	701a      	strb	r2, [r3, #0]
      break;
 80072e8:	e150      	b.n	800758c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80072ea:	2112      	movs	r1, #18
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f9f1 	bl	80076d4 <USBH_Get_DevDesc>
 80072f2:	4603      	mov	r3, r0
 80072f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d103      	bne.n	8007304 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007302:	e145      	b.n	8007590 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	2b03      	cmp	r3, #3
 8007308:	f040 8142 	bne.w	8007590 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007312:	3301      	adds	r3, #1
 8007314:	b2da      	uxtb	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007322:	2b03      	cmp	r3, #3
 8007324:	d903      	bls.n	800732e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	220d      	movs	r2, #13
 800732a:	701a      	strb	r2, [r3, #0]
      break;
 800732c:	e130      	b.n	8007590 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	795b      	ldrb	r3, [r3, #5]
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f001 f855 	bl	80083e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	791b      	ldrb	r3, [r3, #4]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 f84f 	bl	80083e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	701a      	strb	r2, [r3, #0]
      break;
 8007352:	e11d      	b.n	8007590 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007354:	2101      	movs	r1, #1
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa68 	bl	800782c <USBH_SetAddress>
 800735c:	4603      	mov	r3, r0
 800735e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d132      	bne.n	80073cc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007366:	2002      	movs	r0, #2
 8007368:	f001 fb32 	bl	80089d0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2203      	movs	r2, #3
 8007378:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	7919      	ldrb	r1, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800738e:	b292      	uxth	r2, r2
 8007390:	9202      	str	r2, [sp, #8]
 8007392:	2200      	movs	r2, #0
 8007394:	9201      	str	r2, [sp, #4]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	4603      	mov	r3, r0
 800739a:	2280      	movs	r2, #128	; 0x80
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 ffd1 	bl	8008344 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	7959      	ldrb	r1, [r3, #5]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073b6:	b292      	uxth	r2, r2
 80073b8:	9202      	str	r2, [sp, #8]
 80073ba:	2200      	movs	r2, #0
 80073bc:	9201      	str	r2, [sp, #4]
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	4603      	mov	r3, r0
 80073c2:	2200      	movs	r2, #0
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 ffbd 	bl	8008344 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80073ca:	e0e3      	b.n	8007594 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	f040 80e0 	bne.w	8007594 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	220d      	movs	r2, #13
 80073d8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	705a      	strb	r2, [r3, #1]
      break;
 80073e0:	e0d8      	b.n	8007594 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80073e2:	2109      	movs	r1, #9
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f99d 	bl	8007724 <USBH_Get_CfgDesc>
 80073ea:	4603      	mov	r3, r0
 80073ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d103      	bne.n	80073fc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2204      	movs	r2, #4
 80073f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80073fa:	e0cd      	b.n	8007598 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	2b03      	cmp	r3, #3
 8007400:	f040 80ca 	bne.w	8007598 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800740a:	3301      	adds	r3, #1
 800740c:	b2da      	uxtb	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800741a:	2b03      	cmp	r3, #3
 800741c:	d903      	bls.n	8007426 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	220d      	movs	r2, #13
 8007422:	701a      	strb	r2, [r3, #0]
      break;
 8007424:	e0b8      	b.n	8007598 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	795b      	ldrb	r3, [r3, #5]
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 ffd9 	bl	80083e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	791b      	ldrb	r3, [r3, #4]
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 ffd3 	bl	80083e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	701a      	strb	r2, [r3, #0]
      break;
 800744a:	e0a5      	b.n	8007598 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f965 	bl	8007724 <USBH_Get_CfgDesc>
 800745a:	4603      	mov	r3, r0
 800745c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800745e:	7bbb      	ldrb	r3, [r7, #14]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d103      	bne.n	800746c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2205      	movs	r2, #5
 8007468:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800746a:	e097      	b.n	800759c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	2b03      	cmp	r3, #3
 8007470:	f040 8094 	bne.w	800759c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800747a:	3301      	adds	r3, #1
 800747c:	b2da      	uxtb	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800748a:	2b03      	cmp	r3, #3
 800748c:	d903      	bls.n	8007496 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	220d      	movs	r2, #13
 8007492:	701a      	strb	r2, [r3, #0]
      break;
 8007494:	e082      	b.n	800759c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	795b      	ldrb	r3, [r3, #5]
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 ffa1 	bl	80083e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	791b      	ldrb	r3, [r3, #4]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 ff9b 	bl	80083e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	701a      	strb	r2, [r3, #0]
      break;
 80074ba:	e06f      	b.n	800759c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d019      	beq.n	80074fa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80074d2:	23ff      	movs	r3, #255	; 0xff
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f949 	bl	800776c <USBH_Get_StringDesc>
 80074da:	4603      	mov	r3, r0
 80074dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d103      	bne.n	80074ec <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2206      	movs	r2, #6
 80074e8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80074ea:	e059      	b.n	80075a0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d156      	bne.n	80075a0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2206      	movs	r2, #6
 80074f6:	705a      	strb	r2, [r3, #1]
      break;
 80074f8:	e052      	b.n	80075a0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2206      	movs	r2, #6
 80074fe:	705a      	strb	r2, [r3, #1]
      break;
 8007500:	e04e      	b.n	80075a0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007508:	2b00      	cmp	r3, #0
 800750a:	d019      	beq.n	8007540 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007518:	23ff      	movs	r3, #255	; 0xff
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f926 	bl	800776c <USBH_Get_StringDesc>
 8007520:	4603      	mov	r3, r0
 8007522:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d103      	bne.n	8007532 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2207      	movs	r2, #7
 800752e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007530:	e038      	b.n	80075a4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b03      	cmp	r3, #3
 8007536:	d135      	bne.n	80075a4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2207      	movs	r2, #7
 800753c:	705a      	strb	r2, [r3, #1]
      break;
 800753e:	e031      	b.n	80075a4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2207      	movs	r2, #7
 8007544:	705a      	strb	r2, [r3, #1]
      break;
 8007546:	e02d      	b.n	80075a4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800754e:	2b00      	cmp	r3, #0
 8007550:	d017      	beq.n	8007582 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800755e:	23ff      	movs	r3, #255	; 0xff
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f903 	bl	800776c <USBH_Get_StringDesc>
 8007566:	4603      	mov	r3, r0
 8007568:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d102      	bne.n	8007576 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007574:	e018      	b.n	80075a8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	2b03      	cmp	r3, #3
 800757a:	d115      	bne.n	80075a8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]
      break;
 8007580:	e012      	b.n	80075a8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
      break;
 8007586:	e00f      	b.n	80075a8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007588:	bf00      	nop
 800758a:	e00e      	b.n	80075aa <USBH_HandleEnum+0x3be>
      break;
 800758c:	bf00      	nop
 800758e:	e00c      	b.n	80075aa <USBH_HandleEnum+0x3be>
      break;
 8007590:	bf00      	nop
 8007592:	e00a      	b.n	80075aa <USBH_HandleEnum+0x3be>
      break;
 8007594:	bf00      	nop
 8007596:	e008      	b.n	80075aa <USBH_HandleEnum+0x3be>
      break;
 8007598:	bf00      	nop
 800759a:	e006      	b.n	80075aa <USBH_HandleEnum+0x3be>
      break;
 800759c:	bf00      	nop
 800759e:	e004      	b.n	80075aa <USBH_HandleEnum+0x3be>
      break;
 80075a0:	bf00      	nop
 80075a2:	e002      	b.n	80075aa <USBH_HandleEnum+0x3be>
      break;
 80075a4:	bf00      	nop
 80075a6:	e000      	b.n	80075aa <USBH_HandleEnum+0x3be>
      break;
 80075a8:	bf00      	nop
  }
  return Status;
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f804 	bl	80075f6 <USBH_HandleSof>
}
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b082      	sub	sp, #8
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b0b      	cmp	r3, #11
 8007606:	d10a      	bne.n	800761e <USBH_HandleSof+0x28>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d005      	beq.n	800761e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
  }
}
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007636:	bf00      	nop
}
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007652:	bf00      	nop
}
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 f846 	bl	800873e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	791b      	ldrb	r3, [r3, #4]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fe93 	bl	80083e4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	795b      	ldrb	r3, [r3, #5]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fe8d 	bl	80083e4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af02      	add	r7, sp, #8
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	4613      	mov	r3, r2
 80076ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076f2:	2100      	movs	r1, #0
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f864 	bl	80077c2 <USBH_GetDescriptor>
 80076fa:	4603      	mov	r3, r0
 80076fc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10a      	bne.n	800771a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f203 3026 	addw	r0, r3, #806	; 0x326
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007710:	78fa      	ldrb	r2, [r7, #3]
 8007712:	b292      	uxth	r2, r2
 8007714:	4619      	mov	r1, r3
 8007716:	f000 f919 	bl	800794c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af02      	add	r7, sp, #8
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	331c      	adds	r3, #28
 8007734:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007736:	887b      	ldrh	r3, [r7, #2]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007740:	2100      	movs	r1, #0
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f83d 	bl	80077c2 <USBH_GetDescriptor>
 8007748:	4603      	mov	r3, r0
 800774a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d107      	bne.n	8007762 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007752:	887b      	ldrh	r3, [r7, #2]
 8007754:	461a      	mov	r2, r3
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f989 	bl	8007a70 <USBH_ParseCfgDesc>
 800775e:	4603      	mov	r3, r0
 8007760:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007762:	7bfb      	ldrb	r3, [r7, #15]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b088      	sub	sp, #32
 8007770:	af02      	add	r7, sp, #8
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	607a      	str	r2, [r7, #4]
 8007776:	461a      	mov	r2, r3
 8007778:	460b      	mov	r3, r1
 800777a:	72fb      	strb	r3, [r7, #11]
 800777c:	4613      	mov	r3, r2
 800777e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	b29b      	uxth	r3, r3
 8007784:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007788:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007790:	893b      	ldrh	r3, [r7, #8]
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	460b      	mov	r3, r1
 8007796:	2100      	movs	r1, #0
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 f812 	bl	80077c2 <USBH_GetDescriptor>
 800779e:	4603      	mov	r3, r0
 80077a0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d107      	bne.n	80077b8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80077ae:	893a      	ldrh	r2, [r7, #8]
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 fb26 	bl	8007e04 <USBH_ParseStringDesc>
  }

  return status;
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	72fb      	strb	r3, [r7, #11]
 80077d0:	4613      	mov	r3, r2
 80077d2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	789b      	ldrb	r3, [r3, #2]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d11c      	bne.n	8007816 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2206      	movs	r2, #6
 80077ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	893a      	ldrh	r2, [r7, #8]
 80077f2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80077f4:	893b      	ldrh	r3, [r7, #8]
 80077f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80077fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077fe:	d104      	bne.n	800780a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f240 4209 	movw	r2, #1033	; 0x409
 8007806:	829a      	strh	r2, [r3, #20]
 8007808:	e002      	b.n	8007810 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8b3a      	ldrh	r2, [r7, #24]
 8007814:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007816:	8b3b      	ldrh	r3, [r7, #24]
 8007818:	461a      	mov	r2, r3
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 fb3f 	bl	8007ea0 <USBH_CtlReq>
 8007822:	4603      	mov	r3, r0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	789b      	ldrb	r3, [r3, #2]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d10f      	bne.n	8007860 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2205      	movs	r2, #5
 800784a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800784c:	78fb      	ldrb	r3, [r7, #3]
 800784e:	b29a      	uxth	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007860:	2200      	movs	r2, #0
 8007862:	2100      	movs	r1, #0
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fb1b 	bl	8007ea0 <USBH_CtlReq>
 800786a:	4603      	mov	r3, r0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	789b      	ldrb	r3, [r3, #2]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d10e      	bne.n	80078a6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2209      	movs	r2, #9
 8007892:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	887a      	ldrh	r2, [r7, #2]
 8007898:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80078a6:	2200      	movs	r2, #0
 80078a8:	2100      	movs	r1, #0
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 faf8 	bl	8007ea0 <USBH_CtlReq>
 80078b0:	4603      	mov	r3, r0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	460b      	mov	r3, r1
 80078c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	789b      	ldrb	r3, [r3, #2]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d10f      	bne.n	80078ee <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2203      	movs	r2, #3
 80078d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	b29a      	uxth	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80078ee:	2200      	movs	r2, #0
 80078f0:	2100      	movs	r1, #0
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fad4 	bl	8007ea0 <USBH_CtlReq>
 80078f8:	4603      	mov	r3, r0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	460b      	mov	r3, r1
 800790c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	789b      	ldrb	r3, [r3, #2]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d10f      	bne.n	8007936 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2202      	movs	r2, #2
 800791a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007928:	78fb      	ldrb	r3, [r7, #3]
 800792a:	b29a      	uxth	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007936:	2200      	movs	r2, #0
 8007938:	2100      	movs	r1, #0
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fab0 	bl	8007ea0 <USBH_CtlReq>
 8007940:	4603      	mov	r3, r0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
	...

0800794c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	4613      	mov	r3, r2
 8007958:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	781a      	ldrb	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	785a      	ldrb	r2, [r3, #1]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	3302      	adds	r3, #2
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	b29a      	uxth	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	3303      	adds	r3, #3
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	b29b      	uxth	r3, r3
 800797a:	021b      	lsls	r3, r3, #8
 800797c:	b29b      	uxth	r3, r3
 800797e:	4313      	orrs	r3, r2
 8007980:	b29a      	uxth	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	791a      	ldrb	r2, [r3, #4]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	795a      	ldrb	r2, [r3, #5]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	799a      	ldrb	r2, [r3, #6]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	79da      	ldrb	r2, [r3, #7]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	79db      	ldrb	r3, [r3, #7]
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	dc0f      	bgt.n	80079ce <USBH_ParseDevDesc+0x82>
 80079ae:	2b08      	cmp	r3, #8
 80079b0:	db14      	blt.n	80079dc <USBH_ParseDevDesc+0x90>
 80079b2:	3b08      	subs	r3, #8
 80079b4:	4a2d      	ldr	r2, [pc, #180]	; (8007a6c <USBH_ParseDevDesc+0x120>)
 80079b6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	bf14      	ite	ne
 80079c2:	2301      	movne	r3, #1
 80079c4:	2300      	moveq	r3, #0
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d102      	bne.n	80079d2 <USBH_ParseDevDesc+0x86>
 80079cc:	e006      	b.n	80079dc <USBH_ParseDevDesc+0x90>
 80079ce:	2b40      	cmp	r3, #64	; 0x40
 80079d0:	d104      	bne.n	80079dc <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	79da      	ldrb	r2, [r3, #7]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	71da      	strb	r2, [r3, #7]
      break;
 80079da:	e003      	b.n	80079e4 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2240      	movs	r2, #64	; 0x40
 80079e0:	71da      	strb	r2, [r3, #7]
      break;
 80079e2:	bf00      	nop
  }

  if (length > 8U)
 80079e4:	88fb      	ldrh	r3, [r7, #6]
 80079e6:	2b08      	cmp	r3, #8
 80079e8:	d939      	bls.n	8007a5e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	3308      	adds	r3, #8
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	3309      	adds	r3, #9
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	021b      	lsls	r3, r3, #8
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	4313      	orrs	r3, r2
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	330a      	adds	r3, #10
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	330b      	adds	r3, #11
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	330c      	adds	r3, #12
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	330d      	adds	r3, #13
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	4313      	orrs	r3, r2
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	7b9a      	ldrb	r2, [r3, #14]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	7bda      	ldrb	r2, [r3, #15]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	7c1a      	ldrb	r2, [r3, #16]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	7c5a      	ldrb	r2, [r3, #17]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	745a      	strb	r2, [r3, #17]
  }
}
 8007a5e:	bf00      	nop
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	01000101 	.word	0x01000101

08007a70 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b08c      	sub	sp, #48	; 0x30
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007a84:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	781a      	ldrb	r2, [r3, #0]
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	785a      	ldrb	r2, [r3, #1]
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	3302      	adds	r3, #2
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	3303      	adds	r3, #3
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	021b      	lsls	r3, r3, #8
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007acc:	bf28      	it	cs
 8007ace:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	791a      	ldrb	r2, [r3, #4]
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	795a      	ldrb	r2, [r3, #5]
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	799a      	ldrb	r2, [r3, #6]
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	79da      	ldrb	r2, [r3, #7]
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	7a1a      	ldrb	r2, [r3, #8]
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2b09      	cmp	r3, #9
 8007b06:	d002      	beq.n	8007b0e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	2209      	movs	r2, #9
 8007b0c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007b0e:	88fb      	ldrh	r3, [r7, #6]
 8007b10:	2b09      	cmp	r3, #9
 8007b12:	f240 809d 	bls.w	8007c50 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007b16:	2309      	movs	r3, #9
 8007b18:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b1e:	e081      	b.n	8007c24 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007b20:	f107 0316 	add.w	r3, r7, #22
 8007b24:	4619      	mov	r1, r3
 8007b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b28:	f000 f99f 	bl	8007e6a <USBH_GetNextDesc>
 8007b2c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b30:	785b      	ldrb	r3, [r3, #1]
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d176      	bne.n	8007c24 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b09      	cmp	r3, #9
 8007b3c:	d002      	beq.n	8007b44 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b40:	2209      	movs	r2, #9
 8007b42:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b48:	221a      	movs	r2, #26
 8007b4a:	fb02 f303 	mul.w	r3, r2, r3
 8007b4e:	3308      	adds	r3, #8
 8007b50:	6a3a      	ldr	r2, [r7, #32]
 8007b52:	4413      	add	r3, r2
 8007b54:	3302      	adds	r3, #2
 8007b56:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b5a:	69f8      	ldr	r0, [r7, #28]
 8007b5c:	f000 f87e 	bl	8007c5c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007b66:	2300      	movs	r3, #0
 8007b68:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b6a:	e043      	b.n	8007bf4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007b6c:	f107 0316 	add.w	r3, r7, #22
 8007b70:	4619      	mov	r1, r3
 8007b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b74:	f000 f979 	bl	8007e6a <USBH_GetNextDesc>
 8007b78:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	785b      	ldrb	r3, [r3, #1]
 8007b7e:	2b05      	cmp	r3, #5
 8007b80:	d138      	bne.n	8007bf4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	795b      	ldrb	r3, [r3, #5]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d10f      	bne.n	8007baa <USBH_ParseCfgDesc+0x13a>
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	799b      	ldrb	r3, [r3, #6]
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d10b      	bne.n	8007baa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	79db      	ldrb	r3, [r3, #7]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10f      	bne.n	8007bba <USBH_ParseCfgDesc+0x14a>
 8007b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b09      	cmp	r3, #9
 8007ba0:	d00b      	beq.n	8007bba <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba4:	2209      	movs	r2, #9
 8007ba6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ba8:	e007      	b.n	8007bba <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b07      	cmp	r3, #7
 8007bb0:	d004      	beq.n	8007bbc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb4:	2207      	movs	r2, #7
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	e000      	b.n	8007bbc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007bba:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bc0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007bc4:	3201      	adds	r2, #1
 8007bc6:	00d2      	lsls	r2, r2, #3
 8007bc8:	211a      	movs	r1, #26
 8007bca:	fb01 f303 	mul.w	r3, r1, r3
 8007bce:	4413      	add	r3, r2
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	6a3a      	ldr	r2, [r7, #32]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bdc:	69b9      	ldr	r1, [r7, #24]
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 f86b 	bl	8007cba <USBH_ParseEPDesc>
 8007be4:	4603      	mov	r3, r0
 8007be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007bea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bee:	3301      	adds	r3, #1
 8007bf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	791b      	ldrb	r3, [r3, #4]
 8007bf8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d204      	bcs.n	8007c0a <USBH_ParseCfgDesc+0x19a>
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	885a      	ldrh	r2, [r3, #2]
 8007c04:	8afb      	ldrh	r3, [r7, #22]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d8b0      	bhi.n	8007b6c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	791b      	ldrb	r3, [r3, #4]
 8007c0e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d201      	bcs.n	8007c1a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e01c      	b.n	8007c54 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c1e:	3301      	adds	r3, #1
 8007c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d805      	bhi.n	8007c38 <USBH_ParseCfgDesc+0x1c8>
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	885a      	ldrh	r2, [r3, #2]
 8007c30:	8afb      	ldrh	r3, [r7, #22]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	f63f af74 	bhi.w	8007b20 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	791b      	ldrb	r3, [r3, #4]
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	bf28      	it	cs
 8007c40:	2302      	movcs	r3, #2
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d201      	bcs.n	8007c50 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e001      	b.n	8007c54 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007c50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3730      	adds	r7, #48	; 0x30
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781a      	ldrb	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	785a      	ldrb	r2, [r3, #1]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	789a      	ldrb	r2, [r3, #2]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	78da      	ldrb	r2, [r3, #3]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	791a      	ldrb	r2, [r3, #4]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	795a      	ldrb	r2, [r3, #5]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	799a      	ldrb	r2, [r3, #6]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	79da      	ldrb	r2, [r3, #7]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	7a1a      	ldrb	r2, [r3, #8]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	721a      	strb	r2, [r3, #8]
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b087      	sub	sp, #28
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	60b9      	str	r1, [r7, #8]
 8007cc4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	781a      	ldrb	r2, [r3, #0]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	785a      	ldrb	r2, [r3, #1]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	789a      	ldrb	r2, [r3, #2]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	78da      	ldrb	r2, [r3, #3]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3304      	adds	r3, #4
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	3305      	adds	r3, #5
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	799a      	ldrb	r2, [r3, #6]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	889b      	ldrh	r3, [r3, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d102      	bne.n	8007d1c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007d16:	2303      	movs	r3, #3
 8007d18:	75fb      	strb	r3, [r7, #23]
 8007d1a:	e033      	b.n	8007d84 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	889b      	ldrh	r3, [r3, #4]
 8007d20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d24:	f023 0307 	bic.w	r3, r3, #7
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	889b      	ldrh	r3, [r3, #4]
 8007d32:	b21a      	sxth	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3304      	adds	r3, #4
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	b299      	uxth	r1, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3305      	adds	r3, #5
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	430b      	orrs	r3, r1
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d110      	bne.n	8007d76 <USBH_ParseEPDesc+0xbc>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3304      	adds	r3, #4
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	b299      	uxth	r1, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3305      	adds	r3, #5
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	430b      	orrs	r3, r1
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	b21b      	sxth	r3, r3
 8007d6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d72:	b21b      	sxth	r3, r3
 8007d74:	e001      	b.n	8007d7a <USBH_ParseEPDesc+0xc0>
 8007d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b21b      	sxth	r3, r3
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d116      	bne.n	8007dbc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	78db      	ldrb	r3, [r3, #3]
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d005      	beq.n	8007da6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	78db      	ldrb	r3, [r3, #3]
 8007d9e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d127      	bne.n	8007df6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	799b      	ldrb	r3, [r3, #6]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <USBH_ParseEPDesc+0xfc>
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	799b      	ldrb	r3, [r3, #6]
 8007db2:	2b10      	cmp	r3, #16
 8007db4:	d91f      	bls.n	8007df6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007db6:	2303      	movs	r3, #3
 8007db8:	75fb      	strb	r3, [r7, #23]
 8007dba:	e01c      	b.n	8007df6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	78db      	ldrb	r3, [r3, #3]
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d10a      	bne.n	8007dde <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	799b      	ldrb	r3, [r3, #6]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <USBH_ParseEPDesc+0x11e>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	799b      	ldrb	r3, [r3, #6]
 8007dd4:	2b10      	cmp	r3, #16
 8007dd6:	d90e      	bls.n	8007df6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	75fb      	strb	r3, [r7, #23]
 8007ddc:	e00b      	b.n	8007df6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	78db      	ldrb	r3, [r3, #3]
 8007de2:	f003 0303 	and.w	r3, r3, #3
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d105      	bne.n	8007df6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	799b      	ldrb	r3, [r3, #6]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007df2:	2303      	movs	r3, #3
 8007df4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	371c      	adds	r7, #28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3301      	adds	r3, #1
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d120      	bne.n	8007e5e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	1e9a      	subs	r2, r3, #2
 8007e22:	88fb      	ldrh	r3, [r7, #6]
 8007e24:	4293      	cmp	r3, r2
 8007e26:	bf28      	it	cs
 8007e28:	4613      	movcs	r3, r2
 8007e2a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	3302      	adds	r3, #2
 8007e30:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007e32:	2300      	movs	r3, #0
 8007e34:	82fb      	strh	r3, [r7, #22]
 8007e36:	e00b      	b.n	8007e50 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007e38:	8afb      	ldrh	r3, [r7, #22]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007e4a:	8afb      	ldrh	r3, [r7, #22]
 8007e4c:	3302      	adds	r3, #2
 8007e4e:	82fb      	strh	r3, [r7, #22]
 8007e50:	8afa      	ldrh	r2, [r7, #22]
 8007e52:	8abb      	ldrh	r3, [r7, #20]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d3ef      	bcc.n	8007e38 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	701a      	strb	r2, [r3, #0]
  }
}
 8007e5e:	bf00      	nop
 8007e60:	371c      	adds	r7, #28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	881a      	ldrh	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	4413      	add	r3, r2
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4413      	add	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e92:	68fb      	ldr	r3, [r7, #12]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	789b      	ldrb	r3, [r3, #2]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d002      	beq.n	8007ec0 <USBH_CtlReq+0x20>
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d00f      	beq.n	8007ede <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007ebe:	e027      	b.n	8007f10 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	88fa      	ldrh	r2, [r7, #6]
 8007eca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	75fb      	strb	r3, [r7, #23]
      break;
 8007edc:	e018      	b.n	8007f10 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f81c 	bl	8007f1c <USBH_HandleControl>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <USBH_CtlReq+0x54>
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	d106      	bne.n	8007f02 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	761a      	strb	r2, [r3, #24]
      break;
 8007f00:	e005      	b.n	8007f0e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d102      	bne.n	8007f0e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	709a      	strb	r2, [r3, #2]
      break;
 8007f0e:	bf00      	nop
  }
  return status;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f24:	2301      	movs	r3, #1
 8007f26:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	7e1b      	ldrb	r3, [r3, #24]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	2b0a      	cmp	r3, #10
 8007f34:	f200 8156 	bhi.w	80081e4 <USBH_HandleControl+0x2c8>
 8007f38:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <USBH_HandleControl+0x24>)
 8007f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3e:	bf00      	nop
 8007f40:	08007f6d 	.word	0x08007f6d
 8007f44:	08007f87 	.word	0x08007f87
 8007f48:	08007ff1 	.word	0x08007ff1
 8007f4c:	08008017 	.word	0x08008017
 8007f50:	0800804f 	.word	0x0800804f
 8007f54:	08008079 	.word	0x08008079
 8007f58:	080080cb 	.word	0x080080cb
 8007f5c:	080080ed 	.word	0x080080ed
 8007f60:	08008129 	.word	0x08008129
 8007f64:	0800814f 	.word	0x0800814f
 8007f68:	0800818d 	.word	0x0800818d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f103 0110 	add.w	r1, r3, #16
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	795b      	ldrb	r3, [r3, #5]
 8007f76:	461a      	mov	r2, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f943 	bl	8008204 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2202      	movs	r2, #2
 8007f82:	761a      	strb	r2, [r3, #24]
      break;
 8007f84:	e139      	b.n	80081fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	795b      	ldrb	r3, [r3, #5]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fcc5 	bl	800891c <USBH_LL_GetURBState>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d11e      	bne.n	8007fda <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	7c1b      	ldrb	r3, [r3, #16]
 8007fa0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fa4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	8adb      	ldrh	r3, [r3, #22]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00a      	beq.n	8007fc4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007fae:	7b7b      	ldrb	r3, [r7, #13]
 8007fb0:	2b80      	cmp	r3, #128	; 0x80
 8007fb2:	d103      	bne.n	8007fbc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2203      	movs	r2, #3
 8007fb8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fba:	e115      	b.n	80081e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2205      	movs	r2, #5
 8007fc0:	761a      	strb	r2, [r3, #24]
      break;
 8007fc2:	e111      	b.n	80081e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007fc4:	7b7b      	ldrb	r3, [r7, #13]
 8007fc6:	2b80      	cmp	r3, #128	; 0x80
 8007fc8:	d103      	bne.n	8007fd2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2209      	movs	r2, #9
 8007fce:	761a      	strb	r2, [r3, #24]
      break;
 8007fd0:	e10a      	b.n	80081e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2207      	movs	r2, #7
 8007fd6:	761a      	strb	r2, [r3, #24]
      break;
 8007fd8:	e106      	b.n	80081e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d003      	beq.n	8007fe8 <USBH_HandleControl+0xcc>
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	f040 8100 	bne.w	80081e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	220b      	movs	r2, #11
 8007fec:	761a      	strb	r2, [r3, #24]
      break;
 8007fee:	e0fb      	b.n	80081e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6899      	ldr	r1, [r3, #8]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	899a      	ldrh	r2, [r3, #12]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	791b      	ldrb	r3, [r3, #4]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f93a 	bl	8008282 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2204      	movs	r2, #4
 8008012:	761a      	strb	r2, [r3, #24]
      break;
 8008014:	e0f1      	b.n	80081fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	791b      	ldrb	r3, [r3, #4]
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fc7d 	bl	800891c <USBH_LL_GetURBState>
 8008022:	4603      	mov	r3, r0
 8008024:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008026:	7bbb      	ldrb	r3, [r7, #14]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d102      	bne.n	8008032 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2209      	movs	r2, #9
 8008030:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	2b05      	cmp	r3, #5
 8008036:	d102      	bne.n	800803e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008038:	2303      	movs	r3, #3
 800803a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800803c:	e0d6      	b.n	80081ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800803e:	7bbb      	ldrb	r3, [r7, #14]
 8008040:	2b04      	cmp	r3, #4
 8008042:	f040 80d3 	bne.w	80081ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	220b      	movs	r2, #11
 800804a:	761a      	strb	r2, [r3, #24]
      break;
 800804c:	e0ce      	b.n	80081ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6899      	ldr	r1, [r3, #8]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	899a      	ldrh	r2, [r3, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	795b      	ldrb	r3, [r3, #5]
 800805a:	2001      	movs	r0, #1
 800805c:	9000      	str	r0, [sp, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f8ea 	bl	8008238 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800806a:	b29a      	uxth	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2206      	movs	r2, #6
 8008074:	761a      	strb	r2, [r3, #24]
      break;
 8008076:	e0c0      	b.n	80081fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	795b      	ldrb	r3, [r3, #5]
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fc4c 	bl	800891c <USBH_LL_GetURBState>
 8008084:	4603      	mov	r3, r0
 8008086:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008088:	7bbb      	ldrb	r3, [r7, #14]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d103      	bne.n	8008096 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2207      	movs	r2, #7
 8008092:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008094:	e0ac      	b.n	80081f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	2b05      	cmp	r3, #5
 800809a:	d105      	bne.n	80080a8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	220c      	movs	r2, #12
 80080a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80080a2:	2303      	movs	r3, #3
 80080a4:	73fb      	strb	r3, [r7, #15]
      break;
 80080a6:	e0a3      	b.n	80081f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d103      	bne.n	80080b6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2205      	movs	r2, #5
 80080b2:	761a      	strb	r2, [r3, #24]
      break;
 80080b4:	e09c      	b.n	80081f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	2b04      	cmp	r3, #4
 80080ba:	f040 8099 	bne.w	80081f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	220b      	movs	r2, #11
 80080c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80080c4:	2302      	movs	r3, #2
 80080c6:	73fb      	strb	r3, [r7, #15]
      break;
 80080c8:	e092      	b.n	80081f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	791b      	ldrb	r3, [r3, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	2100      	movs	r1, #0
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f8d5 	bl	8008282 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080de:	b29a      	uxth	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2208      	movs	r2, #8
 80080e8:	761a      	strb	r2, [r3, #24]

      break;
 80080ea:	e086      	b.n	80081fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	791b      	ldrb	r3, [r3, #4]
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fc12 	bl	800891c <USBH_LL_GetURBState>
 80080f8:	4603      	mov	r3, r0
 80080fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d105      	bne.n	800810e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	220d      	movs	r2, #13
 8008106:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800810c:	e072      	b.n	80081f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	2b04      	cmp	r3, #4
 8008112:	d103      	bne.n	800811c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	220b      	movs	r2, #11
 8008118:	761a      	strb	r2, [r3, #24]
      break;
 800811a:	e06b      	b.n	80081f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	2b05      	cmp	r3, #5
 8008120:	d168      	bne.n	80081f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008122:	2303      	movs	r3, #3
 8008124:	73fb      	strb	r3, [r7, #15]
      break;
 8008126:	e065      	b.n	80081f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	795b      	ldrb	r3, [r3, #5]
 800812c:	2201      	movs	r2, #1
 800812e:	9200      	str	r2, [sp, #0]
 8008130:	2200      	movs	r2, #0
 8008132:	2100      	movs	r1, #0
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f87f 	bl	8008238 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008140:	b29a      	uxth	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	220a      	movs	r2, #10
 800814a:	761a      	strb	r2, [r3, #24]
      break;
 800814c:	e055      	b.n	80081fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	795b      	ldrb	r3, [r3, #5]
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fbe1 	bl	800891c <USBH_LL_GetURBState>
 800815a:	4603      	mov	r3, r0
 800815c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800815e:	7bbb      	ldrb	r3, [r7, #14]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d105      	bne.n	8008170 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	220d      	movs	r2, #13
 800816c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800816e:	e043      	b.n	80081f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d103      	bne.n	800817e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2209      	movs	r2, #9
 800817a:	761a      	strb	r2, [r3, #24]
      break;
 800817c:	e03c      	b.n	80081f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b04      	cmp	r3, #4
 8008182:	d139      	bne.n	80081f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	220b      	movs	r2, #11
 8008188:	761a      	strb	r2, [r3, #24]
      break;
 800818a:	e035      	b.n	80081f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	7e5b      	ldrb	r3, [r3, #25]
 8008190:	3301      	adds	r3, #1
 8008192:	b2da      	uxtb	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	765a      	strb	r2, [r3, #25]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	7e5b      	ldrb	r3, [r3, #25]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d806      	bhi.n	80081ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80081ac:	e025      	b.n	80081fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081b4:	2106      	movs	r1, #6
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	795b      	ldrb	r3, [r3, #5]
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f90c 	bl	80083e4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	791b      	ldrb	r3, [r3, #4]
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f906 	bl	80083e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80081de:	2302      	movs	r3, #2
 80081e0:	73fb      	strb	r3, [r7, #15]
      break;
 80081e2:	e00a      	b.n	80081fa <USBH_HandleControl+0x2de>

    default:
      break;
 80081e4:	bf00      	nop
 80081e6:	e008      	b.n	80081fa <USBH_HandleControl+0x2de>
      break;
 80081e8:	bf00      	nop
 80081ea:	e006      	b.n	80081fa <USBH_HandleControl+0x2de>
      break;
 80081ec:	bf00      	nop
 80081ee:	e004      	b.n	80081fa <USBH_HandleControl+0x2de>
      break;
 80081f0:	bf00      	nop
 80081f2:	e002      	b.n	80081fa <USBH_HandleControl+0x2de>
      break;
 80081f4:	bf00      	nop
 80081f6:	e000      	b.n	80081fa <USBH_HandleControl+0x2de>
      break;
 80081f8:	bf00      	nop
  }

  return status;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af04      	add	r7, sp, #16
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008212:	79f9      	ldrb	r1, [r7, #7]
 8008214:	2300      	movs	r3, #0
 8008216:	9303      	str	r3, [sp, #12]
 8008218:	2308      	movs	r3, #8
 800821a:	9302      	str	r3, [sp, #8]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	2300      	movs	r3, #0
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	2300      	movs	r3, #0
 8008226:	2200      	movs	r2, #0
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 fb46 	bl	80088ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b088      	sub	sp, #32
 800823c:	af04      	add	r7, sp, #16
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	4611      	mov	r1, r2
 8008244:	461a      	mov	r2, r3
 8008246:	460b      	mov	r3, r1
 8008248:	80fb      	strh	r3, [r7, #6]
 800824a:	4613      	mov	r3, r2
 800824c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800825c:	7979      	ldrb	r1, [r7, #5]
 800825e:	7e3b      	ldrb	r3, [r7, #24]
 8008260:	9303      	str	r3, [sp, #12]
 8008262:	88fb      	ldrh	r3, [r7, #6]
 8008264:	9302      	str	r3, [sp, #8]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	2301      	movs	r3, #1
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	2300      	movs	r3, #0
 8008270:	2200      	movs	r2, #0
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 fb21 	bl	80088ba <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b088      	sub	sp, #32
 8008286:	af04      	add	r7, sp, #16
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	4611      	mov	r1, r2
 800828e:	461a      	mov	r2, r3
 8008290:	460b      	mov	r3, r1
 8008292:	80fb      	strh	r3, [r7, #6]
 8008294:	4613      	mov	r3, r2
 8008296:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008298:	7979      	ldrb	r1, [r7, #5]
 800829a:	2300      	movs	r3, #0
 800829c:	9303      	str	r3, [sp, #12]
 800829e:	88fb      	ldrh	r3, [r7, #6]
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	2301      	movs	r3, #1
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	2300      	movs	r3, #0
 80082ac:	2201      	movs	r2, #1
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 fb03 	bl	80088ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80082b4:	2300      	movs	r3, #0

}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b088      	sub	sp, #32
 80082c2:	af04      	add	r7, sp, #16
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	4611      	mov	r1, r2
 80082ca:	461a      	mov	r2, r3
 80082cc:	460b      	mov	r3, r1
 80082ce:	80fb      	strh	r3, [r7, #6]
 80082d0:	4613      	mov	r3, r2
 80082d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082e2:	7979      	ldrb	r1, [r7, #5]
 80082e4:	7e3b      	ldrb	r3, [r7, #24]
 80082e6:	9303      	str	r3, [sp, #12]
 80082e8:	88fb      	ldrh	r3, [r7, #6]
 80082ea:	9302      	str	r3, [sp, #8]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	2301      	movs	r3, #1
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	2302      	movs	r3, #2
 80082f6:	2200      	movs	r2, #0
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 fade 	bl	80088ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af04      	add	r7, sp, #16
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	4611      	mov	r1, r2
 8008314:	461a      	mov	r2, r3
 8008316:	460b      	mov	r3, r1
 8008318:	80fb      	strh	r3, [r7, #6]
 800831a:	4613      	mov	r3, r2
 800831c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800831e:	7979      	ldrb	r1, [r7, #5]
 8008320:	2300      	movs	r3, #0
 8008322:	9303      	str	r3, [sp, #12]
 8008324:	88fb      	ldrh	r3, [r7, #6]
 8008326:	9302      	str	r3, [sp, #8]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	9301      	str	r3, [sp, #4]
 800832c:	2301      	movs	r3, #1
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	2302      	movs	r3, #2
 8008332:	2201      	movs	r2, #1
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 fac0 	bl	80088ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af04      	add	r7, sp, #16
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	4608      	mov	r0, r1
 800834e:	4611      	mov	r1, r2
 8008350:	461a      	mov	r2, r3
 8008352:	4603      	mov	r3, r0
 8008354:	70fb      	strb	r3, [r7, #3]
 8008356:	460b      	mov	r3, r1
 8008358:	70bb      	strb	r3, [r7, #2]
 800835a:	4613      	mov	r3, r2
 800835c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800835e:	7878      	ldrb	r0, [r7, #1]
 8008360:	78ba      	ldrb	r2, [r7, #2]
 8008362:	78f9      	ldrb	r1, [r7, #3]
 8008364:	8b3b      	ldrh	r3, [r7, #24]
 8008366:	9302      	str	r3, [sp, #8]
 8008368:	7d3b      	ldrb	r3, [r7, #20]
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	7c3b      	ldrb	r3, [r7, #16]
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	4603      	mov	r3, r0
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fa53 	bl	800881e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b082      	sub	sp, #8
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	460b      	mov	r3, r1
 800838c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800838e:	78fb      	ldrb	r3, [r7, #3]
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa72 	bl	800887c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b084      	sub	sp, #16
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f836 	bl	8008420 <USBH_GetFreePipe>
 80083b4:	4603      	mov	r3, r0
 80083b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80083b8:	89fb      	ldrh	r3, [r7, #14]
 80083ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083be:	4293      	cmp	r3, r2
 80083c0:	d00a      	beq.n	80083d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80083c2:	78fa      	ldrb	r2, [r7, #3]
 80083c4:	89fb      	ldrh	r3, [r7, #14]
 80083c6:	f003 030f 	and.w	r3, r3, #15
 80083ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	33e0      	adds	r3, #224	; 0xe0
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80083d8:	89fb      	ldrh	r3, [r7, #14]
 80083da:	b2db      	uxtb	r3, r3
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	2b0f      	cmp	r3, #15
 80083f4:	d80d      	bhi.n	8008412 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	33e0      	adds	r3, #224	; 0xe0
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	78fb      	ldrb	r3, [r7, #3]
 8008404:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008408:	6879      	ldr	r1, [r7, #4]
 800840a:	33e0      	adds	r3, #224	; 0xe0
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	440b      	add	r3, r1
 8008410:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800842c:	2300      	movs	r3, #0
 800842e:	73fb      	strb	r3, [r7, #15]
 8008430:	e00f      	b.n	8008452 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008432:	7bfb      	ldrb	r3, [r7, #15]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	33e0      	adds	r3, #224	; 0xe0
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d102      	bne.n	800844c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	b29b      	uxth	r3, r3
 800844a:	e007      	b.n	800845c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	3301      	adds	r3, #1
 8008450:	73fb      	strb	r3, [r7, #15]
 8008452:	7bfb      	ldrb	r3, [r7, #15]
 8008454:	2b0f      	cmp	r3, #15
 8008456:	d9ec      	bls.n	8008432 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008458:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800846c:	2201      	movs	r2, #1
 800846e:	490e      	ldr	r1, [pc, #56]	; (80084a8 <MX_USB_HOST_Init+0x40>)
 8008470:	480e      	ldr	r0, [pc, #56]	; (80084ac <MX_USB_HOST_Init+0x44>)
 8008472:	f7fe fba5 	bl	8006bc0 <USBH_Init>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800847c:	f7f8 fdf8 	bl	8001070 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008480:	490b      	ldr	r1, [pc, #44]	; (80084b0 <MX_USB_HOST_Init+0x48>)
 8008482:	480a      	ldr	r0, [pc, #40]	; (80084ac <MX_USB_HOST_Init+0x44>)
 8008484:	f7fe fc2a 	bl	8006cdc <USBH_RegisterClass>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800848e:	f7f8 fdef 	bl	8001070 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008492:	4806      	ldr	r0, [pc, #24]	; (80084ac <MX_USB_HOST_Init+0x44>)
 8008494:	f7fe fcae 	bl	8006df4 <USBH_Start>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800849e:	f7f8 fde7 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80084a2:	bf00      	nop
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	080084c9 	.word	0x080084c9
 80084ac:	200001ac 	.word	0x200001ac
 80084b0:	2000000c 	.word	0x2000000c

080084b4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80084b8:	4802      	ldr	r0, [pc, #8]	; (80084c4 <MX_USB_HOST_Process+0x10>)
 80084ba:	f7fe fcab 	bl	8006e14 <USBH_Process>
}
 80084be:	bf00      	nop
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	200001ac 	.word	0x200001ac

080084c8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80084d4:	78fb      	ldrb	r3, [r7, #3]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b04      	cmp	r3, #4
 80084da:	d819      	bhi.n	8008510 <USBH_UserProcess+0x48>
 80084dc:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <USBH_UserProcess+0x1c>)
 80084de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e2:	bf00      	nop
 80084e4:	08008511 	.word	0x08008511
 80084e8:	08008501 	.word	0x08008501
 80084ec:	08008511 	.word	0x08008511
 80084f0:	08008509 	.word	0x08008509
 80084f4:	080084f9 	.word	0x080084f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80084f8:	4b09      	ldr	r3, [pc, #36]	; (8008520 <USBH_UserProcess+0x58>)
 80084fa:	2203      	movs	r2, #3
 80084fc:	701a      	strb	r2, [r3, #0]
  break;
 80084fe:	e008      	b.n	8008512 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008500:	4b07      	ldr	r3, [pc, #28]	; (8008520 <USBH_UserProcess+0x58>)
 8008502:	2202      	movs	r2, #2
 8008504:	701a      	strb	r2, [r3, #0]
  break;
 8008506:	e004      	b.n	8008512 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008508:	4b05      	ldr	r3, [pc, #20]	; (8008520 <USBH_UserProcess+0x58>)
 800850a:	2201      	movs	r2, #1
 800850c:	701a      	strb	r2, [r3, #0]
  break;
 800850e:	e000      	b.n	8008512 <USBH_UserProcess+0x4a>

  default:
  break;
 8008510:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008512:	bf00      	nop
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	20000584 	.word	0x20000584

08008524 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08a      	sub	sp, #40	; 0x28
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800852c:	f107 0314 	add.w	r3, r7, #20
 8008530:	2200      	movs	r2, #0
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	605a      	str	r2, [r3, #4]
 8008536:	609a      	str	r2, [r3, #8]
 8008538:	60da      	str	r2, [r3, #12]
 800853a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008544:	d147      	bne.n	80085d6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008546:	2300      	movs	r3, #0
 8008548:	613b      	str	r3, [r7, #16]
 800854a:	4b25      	ldr	r3, [pc, #148]	; (80085e0 <HAL_HCD_MspInit+0xbc>)
 800854c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854e:	4a24      	ldr	r2, [pc, #144]	; (80085e0 <HAL_HCD_MspInit+0xbc>)
 8008550:	f043 0301 	orr.w	r3, r3, #1
 8008554:	6313      	str	r3, [r2, #48]	; 0x30
 8008556:	4b22      	ldr	r3, [pc, #136]	; (80085e0 <HAL_HCD_MspInit+0xbc>)
 8008558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	613b      	str	r3, [r7, #16]
 8008560:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008568:	2300      	movs	r3, #0
 800856a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800856c:	2300      	movs	r3, #0
 800856e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008570:	f107 0314 	add.w	r3, r7, #20
 8008574:	4619      	mov	r1, r3
 8008576:	481b      	ldr	r0, [pc, #108]	; (80085e4 <HAL_HCD_MspInit+0xc0>)
 8008578:	f7f9 f906 	bl	8001788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800857c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008582:	2302      	movs	r3, #2
 8008584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008586:	2300      	movs	r3, #0
 8008588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800858a:	2300      	movs	r3, #0
 800858c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800858e:	230a      	movs	r3, #10
 8008590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008592:	f107 0314 	add.w	r3, r7, #20
 8008596:	4619      	mov	r1, r3
 8008598:	4812      	ldr	r0, [pc, #72]	; (80085e4 <HAL_HCD_MspInit+0xc0>)
 800859a:	f7f9 f8f5 	bl	8001788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800859e:	4b10      	ldr	r3, [pc, #64]	; (80085e0 <HAL_HCD_MspInit+0xbc>)
 80085a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a2:	4a0f      	ldr	r2, [pc, #60]	; (80085e0 <HAL_HCD_MspInit+0xbc>)
 80085a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a8:	6353      	str	r3, [r2, #52]	; 0x34
 80085aa:	2300      	movs	r3, #0
 80085ac:	60fb      	str	r3, [r7, #12]
 80085ae:	4b0c      	ldr	r3, [pc, #48]	; (80085e0 <HAL_HCD_MspInit+0xbc>)
 80085b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b2:	4a0b      	ldr	r2, [pc, #44]	; (80085e0 <HAL_HCD_MspInit+0xbc>)
 80085b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085b8:	6453      	str	r3, [r2, #68]	; 0x44
 80085ba:	4b09      	ldr	r3, [pc, #36]	; (80085e0 <HAL_HCD_MspInit+0xbc>)
 80085bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80085c6:	2200      	movs	r2, #0
 80085c8:	2100      	movs	r1, #0
 80085ca:	2043      	movs	r0, #67	; 0x43
 80085cc:	f7f9 f8a5 	bl	800171a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80085d0:	2043      	movs	r0, #67	; 0x43
 80085d2:	f7f9 f8be 	bl	8001752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085d6:	bf00      	nop
 80085d8:	3728      	adds	r7, #40	; 0x28
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	40023800 	.word	0x40023800
 80085e4:	40020000 	.word	0x40020000

080085e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe ffeb 	bl	80075d2 <USBH_LL_IncTimer>
}
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008612:	4618      	mov	r0, r3
 8008614:	f7ff f823 	bl	800765e <USBH_LL_Connect>
}
 8008618:	bf00      	nop
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff f82c 	bl	800768c <USBH_LL_Disconnect>
}
 8008634:	bf00      	nop
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	70fb      	strb	r3, [r7, #3]
 8008648:	4613      	mov	r3, r2
 800864a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe ffdd 	bl	8007626 <USBH_LL_PortEnabled>
}
 800866c:	bf00      	nop
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe ffdd 	bl	8007642 <USBH_LL_PortDisabled>
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d12a      	bne.n	80086f8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80086a2:	4a18      	ldr	r2, [pc, #96]	; (8008704 <USBH_LL_Init+0x74>)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a15      	ldr	r2, [pc, #84]	; (8008704 <USBH_LL_Init+0x74>)
 80086ae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086b2:	4b14      	ldr	r3, [pc, #80]	; (8008704 <USBH_LL_Init+0x74>)
 80086b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80086ba:	4b12      	ldr	r3, [pc, #72]	; (8008704 <USBH_LL_Init+0x74>)
 80086bc:	2208      	movs	r2, #8
 80086be:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80086c0:	4b10      	ldr	r3, [pc, #64]	; (8008704 <USBH_LL_Init+0x74>)
 80086c2:	2201      	movs	r2, #1
 80086c4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086c6:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <USBH_LL_Init+0x74>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80086cc:	4b0d      	ldr	r3, [pc, #52]	; (8008704 <USBH_LL_Init+0x74>)
 80086ce:	2202      	movs	r2, #2
 80086d0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086d2:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <USBH_LL_Init+0x74>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80086d8:	480a      	ldr	r0, [pc, #40]	; (8008704 <USBH_LL_Init+0x74>)
 80086da:	f7f9 fa0a 	bl	8001af2 <HAL_HCD_Init>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80086e4:	f7f8 fcc4 	bl	8001070 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80086e8:	4806      	ldr	r0, [pc, #24]	; (8008704 <USBH_LL_Init+0x74>)
 80086ea:	f7f9 fdee 	bl	80022ca <HAL_HCD_GetCurrentFrame>
 80086ee:	4603      	mov	r3, r0
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7fe ff5e 	bl	80075b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20000588 	.word	0x20000588

08008708 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800871e:	4618      	mov	r0, r3
 8008720:	f7f9 fd5d 	bl	80021de <HAL_HCD_Start>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f95c 	bl	80089e8 <USBH_Get_USB_Status>
 8008730:	4603      	mov	r3, r0
 8008732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008734:	7bbb      	ldrb	r3, [r7, #14]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008754:	4618      	mov	r0, r3
 8008756:	f7f9 fd65 	bl	8002224 <HAL_HCD_Stop>
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	4618      	mov	r0, r3
 8008762:	f000 f941 	bl	80089e8 <USBH_Get_USB_Status>
 8008766:	4603      	mov	r3, r0
 8008768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800876a:	7bbb      	ldrb	r3, [r7, #14]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800877c:	2301      	movs	r3, #1
 800877e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008786:	4618      	mov	r0, r3
 8008788:	f7f9 fdad 	bl	80022e6 <HAL_HCD_GetCurrentSpeed>
 800878c:	4603      	mov	r3, r0
 800878e:	2b02      	cmp	r3, #2
 8008790:	d00c      	beq.n	80087ac <USBH_LL_GetSpeed+0x38>
 8008792:	2b02      	cmp	r3, #2
 8008794:	d80d      	bhi.n	80087b2 <USBH_LL_GetSpeed+0x3e>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <USBH_LL_GetSpeed+0x2c>
 800879a:	2b01      	cmp	r3, #1
 800879c:	d003      	beq.n	80087a6 <USBH_LL_GetSpeed+0x32>
 800879e:	e008      	b.n	80087b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73fb      	strb	r3, [r7, #15]
    break;
 80087a4:	e008      	b.n	80087b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80087a6:	2301      	movs	r3, #1
 80087a8:	73fb      	strb	r3, [r7, #15]
    break;
 80087aa:	e005      	b.n	80087b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80087ac:	2302      	movs	r3, #2
 80087ae:	73fb      	strb	r3, [r7, #15]
    break;
 80087b0:	e002      	b.n	80087b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80087b2:	2301      	movs	r3, #1
 80087b4:	73fb      	strb	r3, [r7, #15]
    break;
 80087b6:	bf00      	nop
  }
  return  speed;
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b084      	sub	sp, #16
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ca:	2300      	movs	r3, #0
 80087cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087d8:	4618      	mov	r0, r3
 80087da:	f7f9 fd40 	bl	800225e <HAL_HCD_ResetPort>
 80087de:	4603      	mov	r3, r0
 80087e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 f8ff 	bl	80089e8 <USBH_Get_USB_Status>
 80087ea:	4603      	mov	r3, r0
 80087ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800880a:	78fa      	ldrb	r2, [r7, #3]
 800880c:	4611      	mov	r1, r2
 800880e:	4618      	mov	r0, r3
 8008810:	f7f9 fd47 	bl	80022a2 <HAL_HCD_HC_GetXferCount>
 8008814:	4603      	mov	r3, r0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800881e:	b590      	push	{r4, r7, lr}
 8008820:	b089      	sub	sp, #36	; 0x24
 8008822:	af04      	add	r7, sp, #16
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	4608      	mov	r0, r1
 8008828:	4611      	mov	r1, r2
 800882a:	461a      	mov	r2, r3
 800882c:	4603      	mov	r3, r0
 800882e:	70fb      	strb	r3, [r7, #3]
 8008830:	460b      	mov	r3, r1
 8008832:	70bb      	strb	r3, [r7, #2]
 8008834:	4613      	mov	r3, r2
 8008836:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008846:	787c      	ldrb	r4, [r7, #1]
 8008848:	78ba      	ldrb	r2, [r7, #2]
 800884a:	78f9      	ldrb	r1, [r7, #3]
 800884c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800884e:	9302      	str	r3, [sp, #8]
 8008850:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008854:	9301      	str	r3, [sp, #4]
 8008856:	f897 3020 	ldrb.w	r3, [r7, #32]
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	4623      	mov	r3, r4
 800885e:	f7f9 f9aa 	bl	8001bb6 <HAL_HCD_HC_Init>
 8008862:	4603      	mov	r3, r0
 8008864:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008866:	7bfb      	ldrb	r3, [r7, #15]
 8008868:	4618      	mov	r0, r3
 800886a:	f000 f8bd 	bl	80089e8 <USBH_Get_USB_Status>
 800886e:	4603      	mov	r3, r0
 8008870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008872:	7bbb      	ldrb	r3, [r7, #14]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	bd90      	pop	{r4, r7, pc}

0800887c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008896:	78fa      	ldrb	r2, [r7, #3]
 8008898:	4611      	mov	r1, r2
 800889a:	4618      	mov	r0, r3
 800889c:	f7f9 fa1a 	bl	8001cd4 <HAL_HCD_HC_Halt>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 f89e 	bl	80089e8 <USBH_Get_USB_Status>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80088ba:	b590      	push	{r4, r7, lr}
 80088bc:	b089      	sub	sp, #36	; 0x24
 80088be:	af04      	add	r7, sp, #16
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	4608      	mov	r0, r1
 80088c4:	4611      	mov	r1, r2
 80088c6:	461a      	mov	r2, r3
 80088c8:	4603      	mov	r3, r0
 80088ca:	70fb      	strb	r3, [r7, #3]
 80088cc:	460b      	mov	r3, r1
 80088ce:	70bb      	strb	r3, [r7, #2]
 80088d0:	4613      	mov	r3, r2
 80088d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80088e2:	787c      	ldrb	r4, [r7, #1]
 80088e4:	78ba      	ldrb	r2, [r7, #2]
 80088e6:	78f9      	ldrb	r1, [r7, #3]
 80088e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80088ec:	9303      	str	r3, [sp, #12]
 80088ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088f0:	9302      	str	r3, [sp, #8]
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	4623      	mov	r3, r4
 80088fe:	f7f9 fa0d 	bl	8001d1c <HAL_HCD_HC_SubmitRequest>
 8008902:	4603      	mov	r3, r0
 8008904:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	4618      	mov	r0, r3
 800890a:	f000 f86d 	bl	80089e8 <USBH_Get_USB_Status>
 800890e:	4603      	mov	r3, r0
 8008910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008912:	7bbb      	ldrb	r3, [r7, #14]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	bd90      	pop	{r4, r7, pc}

0800891c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800892e:	78fa      	ldrb	r2, [r7, #3]
 8008930:	4611      	mov	r1, r2
 8008932:	4618      	mov	r0, r3
 8008934:	f7f9 fca1 	bl	800227a <HAL_HCD_HC_GetURBState>
 8008938:	4603      	mov	r3, r0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b082      	sub	sp, #8
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	460b      	mov	r3, r1
 800894c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008954:	2b01      	cmp	r3, #1
 8008956:	d103      	bne.n	8008960 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 f870 	bl	8008a40 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008960:	20c8      	movs	r0, #200	; 0xc8
 8008962:	f7f8 fddb 	bl	800151c <HAL_Delay>
  return USBH_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	460b      	mov	r3, r1
 800897a:	70fb      	strb	r3, [r7, #3]
 800897c:	4613      	mov	r3, r2
 800897e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008986:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008988:	78fb      	ldrb	r3, [r7, #3]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	212c      	movs	r1, #44	; 0x2c
 800898e:	fb01 f303 	mul.w	r3, r1, r3
 8008992:	4413      	add	r3, r2
 8008994:	333b      	adds	r3, #59	; 0x3b
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d009      	beq.n	80089b0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800899c:	78fb      	ldrb	r3, [r7, #3]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	212c      	movs	r1, #44	; 0x2c
 80089a2:	fb01 f303 	mul.w	r3, r1, r3
 80089a6:	4413      	add	r3, r2
 80089a8:	3354      	adds	r3, #84	; 0x54
 80089aa:	78ba      	ldrb	r2, [r7, #2]
 80089ac:	701a      	strb	r2, [r3, #0]
 80089ae:	e008      	b.n	80089c2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80089b0:	78fb      	ldrb	r3, [r7, #3]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	212c      	movs	r1, #44	; 0x2c
 80089b6:	fb01 f303 	mul.w	r3, r1, r3
 80089ba:	4413      	add	r3, r2
 80089bc:	3355      	adds	r3, #85	; 0x55
 80089be:	78ba      	ldrb	r2, [r7, #2]
 80089c0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7f8 fd9f 	bl	800151c <HAL_Delay>
}
 80089de:	bf00      	nop
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4603      	mov	r3, r0
 80089f0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	2b03      	cmp	r3, #3
 80089fa:	d817      	bhi.n	8008a2c <USBH_Get_USB_Status+0x44>
 80089fc:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <USBH_Get_USB_Status+0x1c>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008a15 	.word	0x08008a15
 8008a08:	08008a1b 	.word	0x08008a1b
 8008a0c:	08008a21 	.word	0x08008a21
 8008a10:	08008a27 	.word	0x08008a27
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]
    break;
 8008a18:	e00b      	b.n	8008a32 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008a1e:	e008      	b.n	8008a32 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008a20:	2301      	movs	r3, #1
 8008a22:	73fb      	strb	r3, [r7, #15]
    break;
 8008a24:	e005      	b.n	8008a32 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008a26:	2302      	movs	r3, #2
 8008a28:	73fb      	strb	r3, [r7, #15]
    break;
 8008a2a:	e002      	b.n	8008a32 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a30:	bf00      	nop
  }
  return usb_status;
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008a4e:	79fb      	ldrb	r3, [r7, #7]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d102      	bne.n	8008a5a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]
 8008a58:	e001      	b.n	8008a5e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
 8008a60:	461a      	mov	r2, r3
 8008a62:	2101      	movs	r1, #1
 8008a64:	4803      	ldr	r0, [pc, #12]	; (8008a74 <MX_DriverVbusFS+0x34>)
 8008a66:	f7f9 f82b 	bl	8001ac0 <HAL_GPIO_WritePin>
}
 8008a6a:	bf00      	nop
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	40020800 	.word	0x40020800

08008a78 <malloc>:
 8008a78:	4b02      	ldr	r3, [pc, #8]	; (8008a84 <malloc+0xc>)
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	f000 b82b 	b.w	8008ad8 <_malloc_r>
 8008a82:	bf00      	nop
 8008a84:	20000078 	.word	0x20000078

08008a88 <free>:
 8008a88:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <free+0xc>)
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	6818      	ldr	r0, [r3, #0]
 8008a8e:	f000 b8f3 	b.w	8008c78 <_free_r>
 8008a92:	bf00      	nop
 8008a94:	20000078 	.word	0x20000078

08008a98 <sbrk_aligned>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	4e0e      	ldr	r6, [pc, #56]	; (8008ad4 <sbrk_aligned+0x3c>)
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	6831      	ldr	r1, [r6, #0]
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	b911      	cbnz	r1, 8008aaa <sbrk_aligned+0x12>
 8008aa4:	f000 f8ac 	bl	8008c00 <_sbrk_r>
 8008aa8:	6030      	str	r0, [r6, #0]
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4628      	mov	r0, r5
 8008aae:	f000 f8a7 	bl	8008c00 <_sbrk_r>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	d00a      	beq.n	8008acc <sbrk_aligned+0x34>
 8008ab6:	1cc4      	adds	r4, r0, #3
 8008ab8:	f024 0403 	bic.w	r4, r4, #3
 8008abc:	42a0      	cmp	r0, r4
 8008abe:	d007      	beq.n	8008ad0 <sbrk_aligned+0x38>
 8008ac0:	1a21      	subs	r1, r4, r0
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	f000 f89c 	bl	8008c00 <_sbrk_r>
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d101      	bne.n	8008ad0 <sbrk_aligned+0x38>
 8008acc:	f04f 34ff 	mov.w	r4, #4294967295
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	20000890 	.word	0x20000890

08008ad8 <_malloc_r>:
 8008ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008adc:	1ccd      	adds	r5, r1, #3
 8008ade:	f025 0503 	bic.w	r5, r5, #3
 8008ae2:	3508      	adds	r5, #8
 8008ae4:	2d0c      	cmp	r5, #12
 8008ae6:	bf38      	it	cc
 8008ae8:	250c      	movcc	r5, #12
 8008aea:	2d00      	cmp	r5, #0
 8008aec:	4607      	mov	r7, r0
 8008aee:	db01      	blt.n	8008af4 <_malloc_r+0x1c>
 8008af0:	42a9      	cmp	r1, r5
 8008af2:	d905      	bls.n	8008b00 <_malloc_r+0x28>
 8008af4:	230c      	movs	r3, #12
 8008af6:	603b      	str	r3, [r7, #0]
 8008af8:	2600      	movs	r6, #0
 8008afa:	4630      	mov	r0, r6
 8008afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008bd4 <_malloc_r+0xfc>
 8008b04:	f000 f868 	bl	8008bd8 <__malloc_lock>
 8008b08:	f8d8 3000 	ldr.w	r3, [r8]
 8008b0c:	461c      	mov	r4, r3
 8008b0e:	bb5c      	cbnz	r4, 8008b68 <_malloc_r+0x90>
 8008b10:	4629      	mov	r1, r5
 8008b12:	4638      	mov	r0, r7
 8008b14:	f7ff ffc0 	bl	8008a98 <sbrk_aligned>
 8008b18:	1c43      	adds	r3, r0, #1
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	d155      	bne.n	8008bca <_malloc_r+0xf2>
 8008b1e:	f8d8 4000 	ldr.w	r4, [r8]
 8008b22:	4626      	mov	r6, r4
 8008b24:	2e00      	cmp	r6, #0
 8008b26:	d145      	bne.n	8008bb4 <_malloc_r+0xdc>
 8008b28:	2c00      	cmp	r4, #0
 8008b2a:	d048      	beq.n	8008bbe <_malloc_r+0xe6>
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	4631      	mov	r1, r6
 8008b30:	4638      	mov	r0, r7
 8008b32:	eb04 0903 	add.w	r9, r4, r3
 8008b36:	f000 f863 	bl	8008c00 <_sbrk_r>
 8008b3a:	4581      	cmp	r9, r0
 8008b3c:	d13f      	bne.n	8008bbe <_malloc_r+0xe6>
 8008b3e:	6821      	ldr	r1, [r4, #0]
 8008b40:	1a6d      	subs	r5, r5, r1
 8008b42:	4629      	mov	r1, r5
 8008b44:	4638      	mov	r0, r7
 8008b46:	f7ff ffa7 	bl	8008a98 <sbrk_aligned>
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	d037      	beq.n	8008bbe <_malloc_r+0xe6>
 8008b4e:	6823      	ldr	r3, [r4, #0]
 8008b50:	442b      	add	r3, r5
 8008b52:	6023      	str	r3, [r4, #0]
 8008b54:	f8d8 3000 	ldr.w	r3, [r8]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d038      	beq.n	8008bce <_malloc_r+0xf6>
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	42a2      	cmp	r2, r4
 8008b60:	d12b      	bne.n	8008bba <_malloc_r+0xe2>
 8008b62:	2200      	movs	r2, #0
 8008b64:	605a      	str	r2, [r3, #4]
 8008b66:	e00f      	b.n	8008b88 <_malloc_r+0xb0>
 8008b68:	6822      	ldr	r2, [r4, #0]
 8008b6a:	1b52      	subs	r2, r2, r5
 8008b6c:	d41f      	bmi.n	8008bae <_malloc_r+0xd6>
 8008b6e:	2a0b      	cmp	r2, #11
 8008b70:	d917      	bls.n	8008ba2 <_malloc_r+0xca>
 8008b72:	1961      	adds	r1, r4, r5
 8008b74:	42a3      	cmp	r3, r4
 8008b76:	6025      	str	r5, [r4, #0]
 8008b78:	bf18      	it	ne
 8008b7a:	6059      	strne	r1, [r3, #4]
 8008b7c:	6863      	ldr	r3, [r4, #4]
 8008b7e:	bf08      	it	eq
 8008b80:	f8c8 1000 	streq.w	r1, [r8]
 8008b84:	5162      	str	r2, [r4, r5]
 8008b86:	604b      	str	r3, [r1, #4]
 8008b88:	4638      	mov	r0, r7
 8008b8a:	f104 060b 	add.w	r6, r4, #11
 8008b8e:	f000 f829 	bl	8008be4 <__malloc_unlock>
 8008b92:	f026 0607 	bic.w	r6, r6, #7
 8008b96:	1d23      	adds	r3, r4, #4
 8008b98:	1af2      	subs	r2, r6, r3
 8008b9a:	d0ae      	beq.n	8008afa <_malloc_r+0x22>
 8008b9c:	1b9b      	subs	r3, r3, r6
 8008b9e:	50a3      	str	r3, [r4, r2]
 8008ba0:	e7ab      	b.n	8008afa <_malloc_r+0x22>
 8008ba2:	42a3      	cmp	r3, r4
 8008ba4:	6862      	ldr	r2, [r4, #4]
 8008ba6:	d1dd      	bne.n	8008b64 <_malloc_r+0x8c>
 8008ba8:	f8c8 2000 	str.w	r2, [r8]
 8008bac:	e7ec      	b.n	8008b88 <_malloc_r+0xb0>
 8008bae:	4623      	mov	r3, r4
 8008bb0:	6864      	ldr	r4, [r4, #4]
 8008bb2:	e7ac      	b.n	8008b0e <_malloc_r+0x36>
 8008bb4:	4634      	mov	r4, r6
 8008bb6:	6876      	ldr	r6, [r6, #4]
 8008bb8:	e7b4      	b.n	8008b24 <_malloc_r+0x4c>
 8008bba:	4613      	mov	r3, r2
 8008bbc:	e7cc      	b.n	8008b58 <_malloc_r+0x80>
 8008bbe:	230c      	movs	r3, #12
 8008bc0:	603b      	str	r3, [r7, #0]
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	f000 f80e 	bl	8008be4 <__malloc_unlock>
 8008bc8:	e797      	b.n	8008afa <_malloc_r+0x22>
 8008bca:	6025      	str	r5, [r4, #0]
 8008bcc:	e7dc      	b.n	8008b88 <_malloc_r+0xb0>
 8008bce:	605b      	str	r3, [r3, #4]
 8008bd0:	deff      	udf	#255	; 0xff
 8008bd2:	bf00      	nop
 8008bd4:	2000088c 	.word	0x2000088c

08008bd8 <__malloc_lock>:
 8008bd8:	4801      	ldr	r0, [pc, #4]	; (8008be0 <__malloc_lock+0x8>)
 8008bda:	f000 b84b 	b.w	8008c74 <__retarget_lock_acquire_recursive>
 8008bde:	bf00      	nop
 8008be0:	200009d0 	.word	0x200009d0

08008be4 <__malloc_unlock>:
 8008be4:	4801      	ldr	r0, [pc, #4]	; (8008bec <__malloc_unlock+0x8>)
 8008be6:	f000 b846 	b.w	8008c76 <__retarget_lock_release_recursive>
 8008bea:	bf00      	nop
 8008bec:	200009d0 	.word	0x200009d0

08008bf0 <memset>:
 8008bf0:	4402      	add	r2, r0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d100      	bne.n	8008bfa <memset+0xa>
 8008bf8:	4770      	bx	lr
 8008bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8008bfe:	e7f9      	b.n	8008bf4 <memset+0x4>

08008c00 <_sbrk_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4d06      	ldr	r5, [pc, #24]	; (8008c1c <_sbrk_r+0x1c>)
 8008c04:	2300      	movs	r3, #0
 8008c06:	4604      	mov	r4, r0
 8008c08:	4608      	mov	r0, r1
 8008c0a:	602b      	str	r3, [r5, #0]
 8008c0c:	f7f8 fba2 	bl	8001354 <_sbrk>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d102      	bne.n	8008c1a <_sbrk_r+0x1a>
 8008c14:	682b      	ldr	r3, [r5, #0]
 8008c16:	b103      	cbz	r3, 8008c1a <_sbrk_r+0x1a>
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	200009cc 	.word	0x200009cc

08008c20 <__errno>:
 8008c20:	4b01      	ldr	r3, [pc, #4]	; (8008c28 <__errno+0x8>)
 8008c22:	6818      	ldr	r0, [r3, #0]
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	20000078 	.word	0x20000078

08008c2c <__libc_init_array>:
 8008c2c:	b570      	push	{r4, r5, r6, lr}
 8008c2e:	4d0d      	ldr	r5, [pc, #52]	; (8008c64 <__libc_init_array+0x38>)
 8008c30:	4c0d      	ldr	r4, [pc, #52]	; (8008c68 <__libc_init_array+0x3c>)
 8008c32:	1b64      	subs	r4, r4, r5
 8008c34:	10a4      	asrs	r4, r4, #2
 8008c36:	2600      	movs	r6, #0
 8008c38:	42a6      	cmp	r6, r4
 8008c3a:	d109      	bne.n	8008c50 <__libc_init_array+0x24>
 8008c3c:	4d0b      	ldr	r5, [pc, #44]	; (8008c6c <__libc_init_array+0x40>)
 8008c3e:	4c0c      	ldr	r4, [pc, #48]	; (8008c70 <__libc_init_array+0x44>)
 8008c40:	f000 f866 	bl	8008d10 <_init>
 8008c44:	1b64      	subs	r4, r4, r5
 8008c46:	10a4      	asrs	r4, r4, #2
 8008c48:	2600      	movs	r6, #0
 8008c4a:	42a6      	cmp	r6, r4
 8008c4c:	d105      	bne.n	8008c5a <__libc_init_array+0x2e>
 8008c4e:	bd70      	pop	{r4, r5, r6, pc}
 8008c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c54:	4798      	blx	r3
 8008c56:	3601      	adds	r6, #1
 8008c58:	e7ee      	b.n	8008c38 <__libc_init_array+0xc>
 8008c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c5e:	4798      	blx	r3
 8008c60:	3601      	adds	r6, #1
 8008c62:	e7f2      	b.n	8008c4a <__libc_init_array+0x1e>
 8008c64:	08008d4c 	.word	0x08008d4c
 8008c68:	08008d4c 	.word	0x08008d4c
 8008c6c:	08008d4c 	.word	0x08008d4c
 8008c70:	08008d50 	.word	0x08008d50

08008c74 <__retarget_lock_acquire_recursive>:
 8008c74:	4770      	bx	lr

08008c76 <__retarget_lock_release_recursive>:
 8008c76:	4770      	bx	lr

08008c78 <_free_r>:
 8008c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c7a:	2900      	cmp	r1, #0
 8008c7c:	d044      	beq.n	8008d08 <_free_r+0x90>
 8008c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c82:	9001      	str	r0, [sp, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f1a1 0404 	sub.w	r4, r1, #4
 8008c8a:	bfb8      	it	lt
 8008c8c:	18e4      	addlt	r4, r4, r3
 8008c8e:	f7ff ffa3 	bl	8008bd8 <__malloc_lock>
 8008c92:	4a1e      	ldr	r2, [pc, #120]	; (8008d0c <_free_r+0x94>)
 8008c94:	9801      	ldr	r0, [sp, #4]
 8008c96:	6813      	ldr	r3, [r2, #0]
 8008c98:	b933      	cbnz	r3, 8008ca8 <_free_r+0x30>
 8008c9a:	6063      	str	r3, [r4, #4]
 8008c9c:	6014      	str	r4, [r2, #0]
 8008c9e:	b003      	add	sp, #12
 8008ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ca4:	f7ff bf9e 	b.w	8008be4 <__malloc_unlock>
 8008ca8:	42a3      	cmp	r3, r4
 8008caa:	d908      	bls.n	8008cbe <_free_r+0x46>
 8008cac:	6825      	ldr	r5, [r4, #0]
 8008cae:	1961      	adds	r1, r4, r5
 8008cb0:	428b      	cmp	r3, r1
 8008cb2:	bf01      	itttt	eq
 8008cb4:	6819      	ldreq	r1, [r3, #0]
 8008cb6:	685b      	ldreq	r3, [r3, #4]
 8008cb8:	1949      	addeq	r1, r1, r5
 8008cba:	6021      	streq	r1, [r4, #0]
 8008cbc:	e7ed      	b.n	8008c9a <_free_r+0x22>
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	b10b      	cbz	r3, 8008cc8 <_free_r+0x50>
 8008cc4:	42a3      	cmp	r3, r4
 8008cc6:	d9fa      	bls.n	8008cbe <_free_r+0x46>
 8008cc8:	6811      	ldr	r1, [r2, #0]
 8008cca:	1855      	adds	r5, r2, r1
 8008ccc:	42a5      	cmp	r5, r4
 8008cce:	d10b      	bne.n	8008ce8 <_free_r+0x70>
 8008cd0:	6824      	ldr	r4, [r4, #0]
 8008cd2:	4421      	add	r1, r4
 8008cd4:	1854      	adds	r4, r2, r1
 8008cd6:	42a3      	cmp	r3, r4
 8008cd8:	6011      	str	r1, [r2, #0]
 8008cda:	d1e0      	bne.n	8008c9e <_free_r+0x26>
 8008cdc:	681c      	ldr	r4, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	6053      	str	r3, [r2, #4]
 8008ce2:	440c      	add	r4, r1
 8008ce4:	6014      	str	r4, [r2, #0]
 8008ce6:	e7da      	b.n	8008c9e <_free_r+0x26>
 8008ce8:	d902      	bls.n	8008cf0 <_free_r+0x78>
 8008cea:	230c      	movs	r3, #12
 8008cec:	6003      	str	r3, [r0, #0]
 8008cee:	e7d6      	b.n	8008c9e <_free_r+0x26>
 8008cf0:	6825      	ldr	r5, [r4, #0]
 8008cf2:	1961      	adds	r1, r4, r5
 8008cf4:	428b      	cmp	r3, r1
 8008cf6:	bf04      	itt	eq
 8008cf8:	6819      	ldreq	r1, [r3, #0]
 8008cfa:	685b      	ldreq	r3, [r3, #4]
 8008cfc:	6063      	str	r3, [r4, #4]
 8008cfe:	bf04      	itt	eq
 8008d00:	1949      	addeq	r1, r1, r5
 8008d02:	6021      	streq	r1, [r4, #0]
 8008d04:	6054      	str	r4, [r2, #4]
 8008d06:	e7ca      	b.n	8008c9e <_free_r+0x26>
 8008d08:	b003      	add	sp, #12
 8008d0a:	bd30      	pop	{r4, r5, pc}
 8008d0c:	2000088c 	.word	0x2000088c

08008d10 <_init>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	bf00      	nop
 8008d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d16:	bc08      	pop	{r3}
 8008d18:	469e      	mov	lr, r3
 8008d1a:	4770      	bx	lr

08008d1c <_fini>:
 8008d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1e:	bf00      	nop
 8008d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d22:	bc08      	pop	{r3}
 8008d24:	469e      	mov	lr, r3
 8008d26:	4770      	bx	lr
